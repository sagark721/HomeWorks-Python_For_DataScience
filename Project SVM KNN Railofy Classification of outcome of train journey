{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "2cc53b52",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-26T11:04:59.199502Z",
     "iopub.status.busy": "2022-07-26T11:04:59.198163Z",
     "iopub.status.idle": "2022-07-26T11:05:00.321985Z",
     "shell.execute_reply": "2022-07-26T11:05:00.321162Z"
    },
    "papermill": {
     "duration": 1.155694,
     "end_time": "2022-07-26T11:05:00.324688",
     "exception": false,
     "start_time": "2022-07-26T11:04:59.168994",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import copy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "b05c88db",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-26T11:05:00.375012Z",
     "iopub.status.busy": "2022-07-26T11:05:00.373925Z",
     "iopub.status.idle": "2022-07-26T11:05:00.667819Z",
     "shell.execute_reply": "2022-07-26T11:05:00.666713Z"
    },
    "papermill": {
     "duration": 0.321681,
     "end_time": "2022-07-26T11:05:00.670565",
     "exception": false,
     "start_time": "2022-07-26T11:05:00.348884",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df_master_train=pd.read_csv(\"../input/railofy-challenge/Railofy_training_data_for_model.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "95ed78b8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-26T11:05:00.721685Z",
     "iopub.status.busy": "2022-07-26T11:05:00.720969Z",
     "iopub.status.idle": "2022-07-26T11:05:00.755493Z",
     "shell.execute_reply": "2022-07-26T11:05:00.754435Z"
    },
    "papermill": {
     "duration": 0.063231,
     "end_time": "2022-07-26T11:05:00.758055",
     "exception": false,
     "start_time": "2022-07-26T11:05:00.694824",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>pk</th>\n",
       "      <th>QT</th>\n",
       "      <th>GRCA</th>\n",
       "      <th>CCA</th>\n",
       "      <th>JD</th>\n",
       "      <th>ODD</th>\n",
       "      <th>JS</th>\n",
       "      <th>ODS</th>\n",
       "      <th>SL</th>\n",
       "      <th>NDTD</th>\n",
       "      <th>...</th>\n",
       "      <th>GRA</th>\n",
       "      <th>CURA</th>\n",
       "      <th>RPW</th>\n",
       "      <th>CUCA</th>\n",
       "      <th>CAR</th>\n",
       "      <th>BKT_2</th>\n",
       "      <th>CL_1</th>\n",
       "      <th>CL_2</th>\n",
       "      <th>CL_3</th>\n",
       "      <th>target</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>88315053602</td>\n",
       "      <td>GN</td>\n",
       "      <td>1.400436</td>\n",
       "      <td>0.610522</td>\n",
       "      <td>0.667146</td>\n",
       "      <td>0.930870</td>\n",
       "      <td>0.709433</td>\n",
       "      <td>0.800000</td>\n",
       "      <td>1</td>\n",
       "      <td>0.016290</td>\n",
       "      <td>...</td>\n",
       "      <td>1.341754</td>\n",
       "      <td>1.820791</td>\n",
       "      <td>0.280196</td>\n",
       "      <td>-0.007556</td>\n",
       "      <td>1.091054</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>88315053603</td>\n",
       "      <td>GN</td>\n",
       "      <td>1.400436</td>\n",
       "      <td>0.610522</td>\n",
       "      <td>0.667146</td>\n",
       "      <td>0.930870</td>\n",
       "      <td>0.709433</td>\n",
       "      <td>0.800000</td>\n",
       "      <td>1</td>\n",
       "      <td>0.024623</td>\n",
       "      <td>...</td>\n",
       "      <td>1.999409</td>\n",
       "      <td>3.810137</td>\n",
       "      <td>0.276128</td>\n",
       "      <td>-0.007556</td>\n",
       "      <td>1.143376</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>88314793081</td>\n",
       "      <td>GN</td>\n",
       "      <td>0.728882</td>\n",
       "      <td>0.524062</td>\n",
       "      <td>1.365898</td>\n",
       "      <td>0.885873</td>\n",
       "      <td>1.463205</td>\n",
       "      <td>0.767442</td>\n",
       "      <td>0</td>\n",
       "      <td>0.004357</td>\n",
       "      <td>...</td>\n",
       "      <td>0.618700</td>\n",
       "      <td>0.742814</td>\n",
       "      <td>0.278101</td>\n",
       "      <td>0.435419</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>88312760631</td>\n",
       "      <td>GN</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>0.298977</td>\n",
       "      <td>0.764192</td>\n",
       "      <td>0.354716</td>\n",
       "      <td>0.800000</td>\n",
       "      <td>0</td>\n",
       "      <td>0.003798</td>\n",
       "      <td>...</td>\n",
       "      <td>1.117669</td>\n",
       "      <td>1.079367</td>\n",
       "      <td>0.266220</td>\n",
       "      <td>0.091167</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>88312449843</td>\n",
       "      <td>GN</td>\n",
       "      <td>0.614226</td>\n",
       "      <td>0.389327</td>\n",
       "      <td>0.699606</td>\n",
       "      <td>0.917133</td>\n",
       "      <td>1.108489</td>\n",
       "      <td>0.862069</td>\n",
       "      <td>1</td>\n",
       "      <td>0.024571</td>\n",
       "      <td>...</td>\n",
       "      <td>4.393867</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>0.277710</td>\n",
       "      <td>2.103696</td>\n",
       "      <td>1.454895</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 25 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            pk  QT      GRCA       CCA        JD       ODD        JS  \\\n",
       "0  88315053602  GN  1.400436  0.610522  0.667146  0.930870  0.709433   \n",
       "1  88315053603  GN  1.400436  0.610522  0.667146  0.930870  0.709433   \n",
       "2  88314793081  GN  0.728882  0.524062  1.365898  0.885873  1.463205   \n",
       "3  88312760631  GN  5.000000  5.000000  0.298977  0.764192  0.354716   \n",
       "4  88312449843  GN  0.614226  0.389327  0.699606  0.917133  1.108489   \n",
       "\n",
       "        ODS  SL      NDTD  ...       GRA      CURA       RPW      CUCA  \\\n",
       "0  0.800000   1  0.016290  ...  1.341754  1.820791  0.280196 -0.007556   \n",
       "1  0.800000   1  0.024623  ...  1.999409  3.810137  0.276128 -0.007556   \n",
       "2  0.767442   0  0.004357  ...  0.618700  0.742814  0.278101  0.435419   \n",
       "3  0.800000   0  0.003798  ...  1.117669  1.079367  0.266220  0.091167   \n",
       "4  0.862069   1  0.024571  ...  4.393867  5.000000  0.277710  2.103696   \n",
       "\n",
       "        CAR  BKT_2  CL_1  CL_2  CL_3  target  \n",
       "0  1.091054      0     0     1     0       0  \n",
       "1  1.143376      0     0     1     0       0  \n",
       "2  5.000000      0     0     0     0       0  \n",
       "3  5.000000      1     0     0     0       1  \n",
       "4  1.454895      1     0     1     0       0  \n",
       "\n",
       "[5 rows x 25 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_master_train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "bf556ad5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-26T11:05:00.810556Z",
     "iopub.status.busy": "2022-07-26T11:05:00.810152Z",
     "iopub.status.idle": "2022-07-26T11:05:00.817266Z",
     "shell.execute_reply": "2022-07-26T11:05:00.816161Z"
    },
    "papermill": {
     "duration": 0.036129,
     "end_time": "2022-07-26T11:05:00.819684",
     "exception": false,
     "start_time": "2022-07-26T11:05:00.783555",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df=copy.copy(df_master_train) #Creating copy of dataframe"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "aa91ab00",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-26T11:05:00.871206Z",
     "iopub.status.busy": "2022-07-26T11:05:00.870752Z",
     "iopub.status.idle": "2022-07-26T11:05:00.894037Z",
     "shell.execute_reply": "2022-07-26T11:05:00.892890Z"
    },
    "papermill": {
     "duration": 0.051578,
     "end_time": "2022-07-26T11:05:00.896432",
     "exception": false,
     "start_time": "2022-07-26T11:05:00.844854",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>pk</th>\n",
       "      <th>QT</th>\n",
       "      <th>GRCA</th>\n",
       "      <th>CCA</th>\n",
       "      <th>JD</th>\n",
       "      <th>ODD</th>\n",
       "      <th>JS</th>\n",
       "      <th>ODS</th>\n",
       "      <th>SL</th>\n",
       "      <th>NDTD</th>\n",
       "      <th>...</th>\n",
       "      <th>GRA</th>\n",
       "      <th>CURA</th>\n",
       "      <th>RPW</th>\n",
       "      <th>CUCA</th>\n",
       "      <th>CAR</th>\n",
       "      <th>BKT_2</th>\n",
       "      <th>CL_1</th>\n",
       "      <th>CL_2</th>\n",
       "      <th>CL_3</th>\n",
       "      <th>target</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>88315053602</td>\n",
       "      <td>GN</td>\n",
       "      <td>1.400436</td>\n",
       "      <td>0.610522</td>\n",
       "      <td>0.667146</td>\n",
       "      <td>0.930870</td>\n",
       "      <td>0.709433</td>\n",
       "      <td>0.800000</td>\n",
       "      <td>1</td>\n",
       "      <td>0.016290</td>\n",
       "      <td>...</td>\n",
       "      <td>1.341754</td>\n",
       "      <td>1.820791</td>\n",
       "      <td>0.280196</td>\n",
       "      <td>-0.007556</td>\n",
       "      <td>1.091054</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>88315053603</td>\n",
       "      <td>GN</td>\n",
       "      <td>1.400436</td>\n",
       "      <td>0.610522</td>\n",
       "      <td>0.667146</td>\n",
       "      <td>0.930870</td>\n",
       "      <td>0.709433</td>\n",
       "      <td>0.800000</td>\n",
       "      <td>1</td>\n",
       "      <td>0.024623</td>\n",
       "      <td>...</td>\n",
       "      <td>1.999409</td>\n",
       "      <td>3.810137</td>\n",
       "      <td>0.276128</td>\n",
       "      <td>-0.007556</td>\n",
       "      <td>1.143376</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>88314793081</td>\n",
       "      <td>GN</td>\n",
       "      <td>0.728882</td>\n",
       "      <td>0.524062</td>\n",
       "      <td>1.365898</td>\n",
       "      <td>0.885873</td>\n",
       "      <td>1.463205</td>\n",
       "      <td>0.767442</td>\n",
       "      <td>0</td>\n",
       "      <td>0.004357</td>\n",
       "      <td>...</td>\n",
       "      <td>0.618700</td>\n",
       "      <td>0.742814</td>\n",
       "      <td>0.278101</td>\n",
       "      <td>0.435419</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>88312760631</td>\n",
       "      <td>GN</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>0.298977</td>\n",
       "      <td>0.764192</td>\n",
       "      <td>0.354716</td>\n",
       "      <td>0.800000</td>\n",
       "      <td>0</td>\n",
       "      <td>0.003798</td>\n",
       "      <td>...</td>\n",
       "      <td>1.117669</td>\n",
       "      <td>1.079367</td>\n",
       "      <td>0.266220</td>\n",
       "      <td>0.091167</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>88312449843</td>\n",
       "      <td>GN</td>\n",
       "      <td>0.614226</td>\n",
       "      <td>0.389327</td>\n",
       "      <td>0.699606</td>\n",
       "      <td>0.917133</td>\n",
       "      <td>1.108489</td>\n",
       "      <td>0.862069</td>\n",
       "      <td>1</td>\n",
       "      <td>0.024571</td>\n",
       "      <td>...</td>\n",
       "      <td>4.393867</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>0.277710</td>\n",
       "      <td>2.103696</td>\n",
       "      <td>1.454895</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 25 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            pk  QT      GRCA       CCA        JD       ODD        JS  \\\n",
       "0  88315053602  GN  1.400436  0.610522  0.667146  0.930870  0.709433   \n",
       "1  88315053603  GN  1.400436  0.610522  0.667146  0.930870  0.709433   \n",
       "2  88314793081  GN  0.728882  0.524062  1.365898  0.885873  1.463205   \n",
       "3  88312760631  GN  5.000000  5.000000  0.298977  0.764192  0.354716   \n",
       "4  88312449843  GN  0.614226  0.389327  0.699606  0.917133  1.108489   \n",
       "\n",
       "        ODS  SL      NDTD  ...       GRA      CURA       RPW      CUCA  \\\n",
       "0  0.800000   1  0.016290  ...  1.341754  1.820791  0.280196 -0.007556   \n",
       "1  0.800000   1  0.024623  ...  1.999409  3.810137  0.276128 -0.007556   \n",
       "2  0.767442   0  0.004357  ...  0.618700  0.742814  0.278101  0.435419   \n",
       "3  0.800000   0  0.003798  ...  1.117669  1.079367  0.266220  0.091167   \n",
       "4  0.862069   1  0.024571  ...  4.393867  5.000000  0.277710  2.103696   \n",
       "\n",
       "        CAR  BKT_2  CL_1  CL_2  CL_3  target  \n",
       "0  1.091054      0     0     1     0       0  \n",
       "1  1.143376      0     0     1     0       0  \n",
       "2  5.000000      0     0     0     0       0  \n",
       "3  5.000000      1     0     0     0       1  \n",
       "4  1.454895      1     0     1     0       0  \n",
       "\n",
       "[5 rows x 25 columns]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "b186752a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-26T11:05:00.950250Z",
     "iopub.status.busy": "2022-07-26T11:05:00.949848Z",
     "iopub.status.idle": "2022-07-26T11:05:01.065381Z",
     "shell.execute_reply": "2022-07-26T11:05:01.064516Z"
    },
    "papermill": {
     "duration": 0.146058,
     "end_time": "2022-07-26T11:05:01.067786",
     "exception": false,
     "start_time": "2022-07-26T11:05:00.921728",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>pk</th>\n",
       "      <th>GRCA</th>\n",
       "      <th>CCA</th>\n",
       "      <th>JD</th>\n",
       "      <th>ODD</th>\n",
       "      <th>JS</th>\n",
       "      <th>ODS</th>\n",
       "      <th>SL</th>\n",
       "      <th>NDTD</th>\n",
       "      <th>CURP</th>\n",
       "      <th>...</th>\n",
       "      <th>GRA</th>\n",
       "      <th>CURA</th>\n",
       "      <th>RPW</th>\n",
       "      <th>CUCA</th>\n",
       "      <th>CAR</th>\n",
       "      <th>BKT_2</th>\n",
       "      <th>CL_1</th>\n",
       "      <th>CL_2</th>\n",
       "      <th>CL_3</th>\n",
       "      <th>target</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>3.677500e+04</td>\n",
       "      <td>36775.000000</td>\n",
       "      <td>36775.000000</td>\n",
       "      <td>36775.000000</td>\n",
       "      <td>36775.000000</td>\n",
       "      <td>36775.000000</td>\n",
       "      <td>36775.000000</td>\n",
       "      <td>36775.000000</td>\n",
       "      <td>36775.000000</td>\n",
       "      <td>36775.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>36775.000000</td>\n",
       "      <td>36775.000000</td>\n",
       "      <td>36775.000000</td>\n",
       "      <td>36775.000000</td>\n",
       "      <td>36775.000000</td>\n",
       "      <td>36775.000000</td>\n",
       "      <td>36775.000000</td>\n",
       "      <td>36775.000000</td>\n",
       "      <td>36775.000000</td>\n",
       "      <td>36775.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>9.779557e+10</td>\n",
       "      <td>2.111787</td>\n",
       "      <td>2.316864</td>\n",
       "      <td>0.866927</td>\n",
       "      <td>0.783620</td>\n",
       "      <td>0.765393</td>\n",
       "      <td>0.689401</td>\n",
       "      <td>0.874643</td>\n",
       "      <td>0.027371</td>\n",
       "      <td>0.446203</td>\n",
       "      <td>...</td>\n",
       "      <td>2.087617</td>\n",
       "      <td>2.263060</td>\n",
       "      <td>0.215657</td>\n",
       "      <td>0.531473</td>\n",
       "      <td>1.422542</td>\n",
       "      <td>0.515731</td>\n",
       "      <td>0.552169</td>\n",
       "      <td>0.343168</td>\n",
       "      <td>0.019769</td>\n",
       "      <td>0.314833</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>1.642729e+11</td>\n",
       "      <td>1.620523</td>\n",
       "      <td>1.586308</td>\n",
       "      <td>0.496474</td>\n",
       "      <td>0.243582</td>\n",
       "      <td>0.517497</td>\n",
       "      <td>0.243552</td>\n",
       "      <td>0.331128</td>\n",
       "      <td>0.027457</td>\n",
       "      <td>0.411370</td>\n",
       "      <td>...</td>\n",
       "      <td>1.904102</td>\n",
       "      <td>1.902448</td>\n",
       "      <td>0.046398</td>\n",
       "      <td>1.011742</td>\n",
       "      <td>1.069083</td>\n",
       "      <td>0.499759</td>\n",
       "      <td>0.497278</td>\n",
       "      <td>0.474773</td>\n",
       "      <td>0.139207</td>\n",
       "      <td>0.464456</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>2.119454e+10</td>\n",
       "      <td>0.008190</td>\n",
       "      <td>0.007591</td>\n",
       "      <td>0.017084</td>\n",
       "      <td>0.012183</td>\n",
       "      <td>0.044340</td>\n",
       "      <td>0.012987</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000634</td>\n",
       "      <td>...</td>\n",
       "      <td>-5.000000</td>\n",
       "      <td>-5.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>-5.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>2.807045e+10</td>\n",
       "      <td>0.491381</td>\n",
       "      <td>0.923418</td>\n",
       "      <td>0.454445</td>\n",
       "      <td>0.645110</td>\n",
       "      <td>0.399056</td>\n",
       "      <td>0.518519</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.008318</td>\n",
       "      <td>0.254237</td>\n",
       "      <td>...</td>\n",
       "      <td>0.718988</td>\n",
       "      <td>0.894549</td>\n",
       "      <td>0.165534</td>\n",
       "      <td>-0.040932</td>\n",
       "      <td>0.984103</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>6.400895e+10</td>\n",
       "      <td>1.965524</td>\n",
       "      <td>2.061221</td>\n",
       "      <td>0.772215</td>\n",
       "      <td>0.880441</td>\n",
       "      <td>0.665093</td>\n",
       "      <td>0.750000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.016666</td>\n",
       "      <td>0.375000</td>\n",
       "      <td>...</td>\n",
       "      <td>1.733357</td>\n",
       "      <td>1.940815</td>\n",
       "      <td>0.234643</td>\n",
       "      <td>0.354118</td>\n",
       "      <td>1.129500</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>8.450154e+10</td>\n",
       "      <td>3.513375</td>\n",
       "      <td>3.656655</td>\n",
       "      <td>1.294144</td>\n",
       "      <td>0.997003</td>\n",
       "      <td>0.975470</td>\n",
       "      <td>0.904762</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.036048</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>...</td>\n",
       "      <td>3.591178</td>\n",
       "      <td>3.919440</td>\n",
       "      <td>0.252824</td>\n",
       "      <td>0.971762</td>\n",
       "      <td>1.436487</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>8.831011e+11</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>3.542452</td>\n",
       "      <td>1.020475</td>\n",
       "      <td>3.547164</td>\n",
       "      <td>0.987654</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.127794</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8 rows Ã— 24 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                 pk          GRCA           CCA            JD           ODD  \\\n",
       "count  3.677500e+04  36775.000000  36775.000000  36775.000000  36775.000000   \n",
       "mean   9.779557e+10      2.111787      2.316864      0.866927      0.783620   \n",
       "std    1.642729e+11      1.620523      1.586308      0.496474      0.243582   \n",
       "min    2.119454e+10      0.008190      0.007591      0.017084      0.012183   \n",
       "25%    2.807045e+10      0.491381      0.923418      0.454445      0.645110   \n",
       "50%    6.400895e+10      1.965524      2.061221      0.772215      0.880441   \n",
       "75%    8.450154e+10      3.513375      3.656655      1.294144      0.997003   \n",
       "max    8.831011e+11      5.000000      5.000000      3.542452      1.020475   \n",
       "\n",
       "                 JS           ODS            SL          NDTD          CURP  \\\n",
       "count  36775.000000  36775.000000  36775.000000  36775.000000  36775.000000   \n",
       "mean       0.765393      0.689401      0.874643      0.027371      0.446203   \n",
       "std        0.517497      0.243552      0.331128      0.027457      0.411370   \n",
       "min        0.044340      0.012987      0.000000      0.000000      0.000634   \n",
       "25%        0.399056      0.518519      1.000000      0.008318      0.254237   \n",
       "50%        0.665093      0.750000      1.000000      0.016666      0.375000   \n",
       "75%        0.975470      0.904762      1.000000      0.036048      0.500000   \n",
       "max        3.547164      0.987654      1.000000      0.127794      3.000000   \n",
       "\n",
       "       ...           GRA          CURA           RPW          CUCA  \\\n",
       "count  ...  36775.000000  36775.000000  36775.000000  36775.000000   \n",
       "mean   ...      2.087617      2.263060      0.215657      0.531473   \n",
       "std    ...      1.904102      1.902448      0.046398      1.011742   \n",
       "min    ...     -5.000000     -5.000000      0.000000     -5.000000   \n",
       "25%    ...      0.718988      0.894549      0.165534     -0.040932   \n",
       "50%    ...      1.733357      1.940815      0.234643      0.354118   \n",
       "75%    ...      3.591178      3.919440      0.252824      0.971762   \n",
       "max    ...      5.000000      5.000000      0.500000      5.000000   \n",
       "\n",
       "                CAR         BKT_2          CL_1          CL_2          CL_3  \\\n",
       "count  36775.000000  36775.000000  36775.000000  36775.000000  36775.000000   \n",
       "mean       1.422542      0.515731      0.552169      0.343168      0.019769   \n",
       "std        1.069083      0.499759      0.497278      0.474773      0.139207   \n",
       "min        0.000000      0.000000      0.000000      0.000000      0.000000   \n",
       "25%        0.984103      0.000000      0.000000      0.000000      0.000000   \n",
       "50%        1.129500      1.000000      1.000000      0.000000      0.000000   \n",
       "75%        1.436487      1.000000      1.000000      1.000000      0.000000   \n",
       "max        5.000000      1.000000      1.000000      1.000000      1.000000   \n",
       "\n",
       "             target  \n",
       "count  36775.000000  \n",
       "mean       0.314833  \n",
       "std        0.464456  \n",
       "min        0.000000  \n",
       "25%        0.000000  \n",
       "50%        0.000000  \n",
       "75%        1.000000  \n",
       "max        1.000000  \n",
       "\n",
       "[8 rows x 24 columns]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "474527e6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-26T11:05:01.123734Z",
     "iopub.status.busy": "2022-07-26T11:05:01.123001Z",
     "iopub.status.idle": "2022-07-26T11:05:01.146025Z",
     "shell.execute_reply": "2022-07-26T11:05:01.145198Z"
    },
    "papermill": {
     "duration": 0.054379,
     "end_time": "2022-07-26T11:05:01.149183",
     "exception": false,
     "start_time": "2022-07-26T11:05:01.094804",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 36775 entries, 0 to 36774\n",
      "Data columns (total 25 columns):\n",
      " #   Column  Non-Null Count  Dtype  \n",
      "---  ------  --------------  -----  \n",
      " 0   pk      36775 non-null  int64  \n",
      " 1   QT      36775 non-null  object \n",
      " 2   GRCA    36775 non-null  float64\n",
      " 3   CCA     36775 non-null  float64\n",
      " 4   JD      36775 non-null  float64\n",
      " 5   ODD     36775 non-null  float64\n",
      " 6   JS      36775 non-null  float64\n",
      " 7   ODS     36775 non-null  float64\n",
      " 8   SL      36775 non-null  int64  \n",
      " 9   NDTD    36775 non-null  float64\n",
      " 10  CURP    36775 non-null  float64\n",
      " 11  GROP    36775 non-null  float64\n",
      " 12  CANP    36775 non-null  float64\n",
      " 13  SBRA    36775 non-null  float64\n",
      " 14  SCRA    36775 non-null  float64\n",
      " 15  GRA     36775 non-null  float64\n",
      " 16  CURA    36775 non-null  float64\n",
      " 17  RPW     36775 non-null  float64\n",
      " 18  CUCA    36775 non-null  float64\n",
      " 19  CAR     36775 non-null  float64\n",
      " 20  BKT_2   36775 non-null  int64  \n",
      " 21  CL_1    36775 non-null  int64  \n",
      " 22  CL_2    36775 non-null  int64  \n",
      " 23  CL_3    36775 non-null  int64  \n",
      " 24  target  36775 non-null  int64  \n",
      "dtypes: float64(17), int64(7), object(1)\n",
      "memory usage: 7.0+ MB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "d3b4b895",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-26T11:05:01.204645Z",
     "iopub.status.busy": "2022-07-26T11:05:01.203936Z",
     "iopub.status.idle": "2022-07-26T11:05:01.207814Z",
     "shell.execute_reply": "2022-07-26T11:05:01.207117Z"
    },
    "papermill": {
     "duration": 0.033722,
     "end_time": "2022-07-26T11:05:01.209758",
     "exception": false,
     "start_time": "2022-07-26T11:05:01.176036",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#Lets drop the column pk as according to description it is just an identifier which wont be helping in predictions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "71205277",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-26T11:05:01.263349Z",
     "iopub.status.busy": "2022-07-26T11:05:01.262662Z",
     "iopub.status.idle": "2022-07-26T11:05:01.269608Z",
     "shell.execute_reply": "2022-07-26T11:05:01.268800Z"
    },
    "papermill": {
     "duration": 0.036131,
     "end_time": "2022-07-26T11:05:01.271645",
     "exception": false,
     "start_time": "2022-07-26T11:05:01.235514",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df=df.drop('pk',axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "f9d802df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-26T11:05:01.325319Z",
     "iopub.status.busy": "2022-07-26T11:05:01.324920Z",
     "iopub.status.idle": "2022-07-26T11:05:01.349570Z",
     "shell.execute_reply": "2022-07-26T11:05:01.348489Z"
    },
    "papermill": {
     "duration": 0.054147,
     "end_time": "2022-07-26T11:05:01.351762",
     "exception": false,
     "start_time": "2022-07-26T11:05:01.297615",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>QT</th>\n",
       "      <th>GRCA</th>\n",
       "      <th>CCA</th>\n",
       "      <th>JD</th>\n",
       "      <th>ODD</th>\n",
       "      <th>JS</th>\n",
       "      <th>ODS</th>\n",
       "      <th>SL</th>\n",
       "      <th>NDTD</th>\n",
       "      <th>CURP</th>\n",
       "      <th>...</th>\n",
       "      <th>GRA</th>\n",
       "      <th>CURA</th>\n",
       "      <th>RPW</th>\n",
       "      <th>CUCA</th>\n",
       "      <th>CAR</th>\n",
       "      <th>BKT_2</th>\n",
       "      <th>CL_1</th>\n",
       "      <th>CL_2</th>\n",
       "      <th>CL_3</th>\n",
       "      <th>target</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>GN</td>\n",
       "      <td>1.400436</td>\n",
       "      <td>0.610522</td>\n",
       "      <td>0.667146</td>\n",
       "      <td>0.930870</td>\n",
       "      <td>0.709433</td>\n",
       "      <td>0.800000</td>\n",
       "      <td>1</td>\n",
       "      <td>0.016290</td>\n",
       "      <td>0.204678</td>\n",
       "      <td>...</td>\n",
       "      <td>1.341754</td>\n",
       "      <td>1.820791</td>\n",
       "      <td>0.280196</td>\n",
       "      <td>-0.007556</td>\n",
       "      <td>1.091054</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>GN</td>\n",
       "      <td>1.400436</td>\n",
       "      <td>0.610522</td>\n",
       "      <td>0.667146</td>\n",
       "      <td>0.930870</td>\n",
       "      <td>0.709433</td>\n",
       "      <td>0.800000</td>\n",
       "      <td>1</td>\n",
       "      <td>0.024623</td>\n",
       "      <td>0.216374</td>\n",
       "      <td>...</td>\n",
       "      <td>1.999409</td>\n",
       "      <td>3.810137</td>\n",
       "      <td>0.276128</td>\n",
       "      <td>-0.007556</td>\n",
       "      <td>1.143376</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>GN</td>\n",
       "      <td>0.728882</td>\n",
       "      <td>0.524062</td>\n",
       "      <td>1.365898</td>\n",
       "      <td>0.885873</td>\n",
       "      <td>1.463205</td>\n",
       "      <td>0.767442</td>\n",
       "      <td>0</td>\n",
       "      <td>0.004357</td>\n",
       "      <td>0.089888</td>\n",
       "      <td>...</td>\n",
       "      <td>0.618700</td>\n",
       "      <td>0.742814</td>\n",
       "      <td>0.278101</td>\n",
       "      <td>0.435419</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>GN</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>0.298977</td>\n",
       "      <td>0.764192</td>\n",
       "      <td>0.354716</td>\n",
       "      <td>0.800000</td>\n",
       "      <td>0</td>\n",
       "      <td>0.003798</td>\n",
       "      <td>0.314147</td>\n",
       "      <td>...</td>\n",
       "      <td>1.117669</td>\n",
       "      <td>1.079367</td>\n",
       "      <td>0.266220</td>\n",
       "      <td>0.091167</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>GN</td>\n",
       "      <td>0.614226</td>\n",
       "      <td>0.389327</td>\n",
       "      <td>0.699606</td>\n",
       "      <td>0.917133</td>\n",
       "      <td>1.108489</td>\n",
       "      <td>0.862069</td>\n",
       "      <td>1</td>\n",
       "      <td>0.024571</td>\n",
       "      <td>0.253333</td>\n",
       "      <td>...</td>\n",
       "      <td>4.393867</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>0.277710</td>\n",
       "      <td>2.103696</td>\n",
       "      <td>1.454895</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 24 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   QT      GRCA       CCA        JD       ODD        JS       ODS  SL  \\\n",
       "0  GN  1.400436  0.610522  0.667146  0.930870  0.709433  0.800000   1   \n",
       "1  GN  1.400436  0.610522  0.667146  0.930870  0.709433  0.800000   1   \n",
       "2  GN  0.728882  0.524062  1.365898  0.885873  1.463205  0.767442   0   \n",
       "3  GN  5.000000  5.000000  0.298977  0.764192  0.354716  0.800000   0   \n",
       "4  GN  0.614226  0.389327  0.699606  0.917133  1.108489  0.862069   1   \n",
       "\n",
       "       NDTD      CURP  ...       GRA      CURA       RPW      CUCA       CAR  \\\n",
       "0  0.016290  0.204678  ...  1.341754  1.820791  0.280196 -0.007556  1.091054   \n",
       "1  0.024623  0.216374  ...  1.999409  3.810137  0.276128 -0.007556  1.143376   \n",
       "2  0.004357  0.089888  ...  0.618700  0.742814  0.278101  0.435419  5.000000   \n",
       "3  0.003798  0.314147  ...  1.117669  1.079367  0.266220  0.091167  5.000000   \n",
       "4  0.024571  0.253333  ...  4.393867  5.000000  0.277710  2.103696  1.454895   \n",
       "\n",
       "   BKT_2  CL_1  CL_2  CL_3  target  \n",
       "0      0     0     1     0       0  \n",
       "1      0     0     1     0       0  \n",
       "2      0     0     0     0       0  \n",
       "3      1     0     0     0       1  \n",
       "4      1     0     1     0       0  \n",
       "\n",
       "[5 rows x 24 columns]"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "d50e1735",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-26T11:05:01.407280Z",
     "iopub.status.busy": "2022-07-26T11:05:01.406523Z",
     "iopub.status.idle": "2022-07-26T11:05:01.410853Z",
     "shell.execute_reply": "2022-07-26T11:05:01.410107Z"
    },
    "papermill": {
     "duration": 0.03413,
     "end_time": "2022-07-26T11:05:01.412675",
     "exception": false,
     "start_time": "2022-07-26T11:05:01.378545",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#lets check distribution of 'target' variable"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "5b4d88a8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-26T11:05:01.469393Z",
     "iopub.status.busy": "2022-07-26T11:05:01.468396Z",
     "iopub.status.idle": "2022-07-26T11:05:01.668260Z",
     "shell.execute_reply": "2022-07-26T11:05:01.667190Z"
    },
    "papermill": {
     "duration": 0.231644,
     "end_time": "2022-07-26T11:05:01.670741",
     "exception": false,
     "start_time": "2022-07-26T11:05:01.439097",
     "status": "completed"
    },
    "scrolled": true,
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[Text(0, 0, '25197'), Text(0, 0, '11578')]"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAZEAAAEGCAYAAACkQqisAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAAsTAAALEwEAmpwYAAAWg0lEQVR4nO3de5BdZZnv8e+ThIsKHBISc0KCE8VAESI2pA+XUXQCyiWOAwMMEJUEiQSReMQLBWOdAhS1PGcEBBzQzCED6Jy0OFzHihM5KT04FreOCRDuMQSSVCRNEkkYCzHwnD/26nYn6STNS/beafr7qVq1137Wu9Z+V1XSv1prvfvdkZlIklRiUKs7IEnqvwwRSVIxQ0SSVMwQkSQVM0QkScWGtLoDzTZ8+PAcO3Zsq7shSf3KggULXszMEZvXB1yIjB07ls7OzlZ3Q5L6lYh4rre6t7MGuOXLlzNp0iTGjx/PwQcfzDXXXAPA5ZdfzujRo2lra6OtrY25c+cCsGbNGiZNmsQee+zBzJkzNznWj3/8Yw455BAOPvhgLr744p76F7/4xZ7jHHDAAey9995NOz9JjTXgrkS0qSFDhnDllVdy2GGHsWHDBiZOnMhHP/pRoPbH/ytf+com7XfffXeuuOIKFi9ezOLFi3vqa9as4aKLLmLBggWMGDGCadOmMX/+fI499liuvvrqnnbXXXcdCxcubM7JSWo4r0QGuFGjRnHYYYcBsOeee3LQQQexcuXKrbZ/xzvewQc/+EF23333TepLly5l3LhxjBhRu2X6kY98hNtuu22L/efMmcOUKVN24BlIaiVDRD2WLVvGwoULOeKIIwD43ve+xyGHHMI555zDunXrtrnve9/7Xp566imWLVvGxo0bufPOO1m+fPkmbZ577jmeffZZjjnmmIadg6TmMkQEwMsvv8ypp57Kd7/7Xfbaay/OP/98fvvb37Jo0SJGjRrFl7/85W3uP3ToUG644QbOOOMMjj76aMaOHcvgwYM3adPR0cFpp522RV1S/2WIiD/96U+ceuqpfPKTn+SUU04BYOTIkQwePJhBgwZx7rnn8uCDD273OB//+Md54IEHuO+++zjwwAM54IADNtne0dHhrSzpLcYQGeAyk+nTp3PQQQfxpS99qae+atWqnvU77riDCRMmbPdYq1evBmDdunVcf/31fOYzn+nZ9uSTT7Ju3TqOOuqoHdh7Sa3WsNFZEbEfcAswEkhgVmZeExGXA+cCXVXTr2bm3GqfvwemA68B/z0z51X1E4BrgMHA/87Mb1f1dwMdwD7AAuCszHy1Uef0VvTrX/+aH/7wh7zvfe+jra0NgG9961vMmTOHRYsWERGMHTuWH/zgBz37jB07lvXr1/Pqq69y55138vOf/5zx48fzhS98gYcffhiASy+9dJMrkY6ODs4880wioqnnJ6mxolG/JxIRo4BRmfmbiNiT2h/5k4HTgZcz8zubtR8PzAEOB/YF/i/Q/VfoaeCjwArgIWBKZj4eEbcCt2dmR0R8H3g4M2/YVr/a29vTLxtK0hsTEQsys33zesOuRDJzFbCqWt8QEU8Ao7exy0lAR2b+EXg2IpZQCxSAJZm5FCAiOoCTquMdA3yianMzcDmwzRB5syZedEsjD69+asE/TG11F6SWaMozkYgYCxwKPFCVZkbEIxExOyKGVrXRQP2Y0BVVbWv1fYDfZ+bGzeq9ff6MiOiMiM6urq7emkiSCjQ8RCJiD+A24MLMXE/tSmF/oI3alcqVje5DZs7KzPbMbO/+Mpwk6c1r6LQnEbELtQD5l8y8HSAzX6jb/k/AT6u3K4H96nYfU9XYSn0NsHdEDKmuRurbS5KaoGFXIlEbhnMj8ERmXlVXH1XX7G+B7gmY7gbOjIjdqlFX44AHqT1IHxcR746IXYEzgbuzNiLgF8Bp1f7TgLsadT6SpC018krkA8BZwKMRsaiqfRWYEhFt1Ib9LgPOA8jMx6rRVo8DG4ELMvM1gIiYCcyjNsR3dmY+Vh3vYqAjIr4BLKQWWpKkJmnk6Kz/AHr7UsDcbezzTeCbvdTn9rZfNWLr8M3rkqTm8BvrkqRihogkqZghIkkqZohIkooZIpKkYoaIJKmYISJJKmaISJKKGSKSpGKGiCSpmCEiSSpmiEiSihkikqRihogkqZghIkkqZohIkooZIpKkYoaIJKmYISJJKmaISJKKGSKSpGKGiCSpmCEiSSpmiEiSihkikqRihogkqZghIkkqZohIkooZIpKkYoaIJKmYISJJKmaISJKKNSxEImK/iPhFRDweEY9FxBeq+rCIuCcinqleh1b1iIhrI2JJRDwSEYfVHWta1f6ZiJhWV58YEY9W+1wbEdGo85EkbamRVyIbgS9n5njgSOCCiBgPXALMz8xxwPzqPcCJwLhqmQHcALXQAS4DjgAOBy7rDp6qzbl1+53QwPORJG2mYSGSmasy8zfV+gbgCWA0cBJwc9XsZuDkav0k4JasuR/YOyJGAccD92Tm2sxcB9wDnFBt2ysz78/MBG6pO5YkqQma8kwkIsYChwIPACMzc1W16XfAyGp9NLC8brcVVW1b9RW91Hv7/BkR0RkRnV1dXW/uZCRJPRoeIhGxB3AbcGFmrq/fVl1BZKP7kJmzMrM9M9tHjBjR6I+TpAGjoSESEbtQC5B/yczbq/IL1a0oqtfVVX0lsF/d7mOq2rbqY3qpS5KapJGjswK4EXgiM6+q23Q30D3CahpwV119ajVK60jgpeq21zzguIgYWj1QPw6YV21bHxFHVp81te5YkqQmGNLAY38AOAt4NCIWVbWvAt8Gbo2I6cBzwOnVtrnAZGAJ8Afg0wCZuTYirgAeqtp9PTPXVuufA24C3gb8rFokSU3SsBDJzP8Atva9jWN7aZ/ABVs51mxgdi/1TmDCm+imJOlN8BvrkqRihogkqZghIkkqZohIkooZIpKkYoaIJKmYISJJKmaISJKKGSKSpGKGiCSpmCEiSSpmiEiSihkikqRihogkqZghIkkqZohIkooZIpKkYoaIJKmYISJJKmaISJKKGSKSpGKGiCSpmCEiSSpmiEiSihkikqRihogkqZghIkkqZohIkooZIpKkYoaIJKmYISJJKmaISJKKNSxEImJ2RKyOiMV1tcsjYmVELKqWyXXb/j4ilkTEUxFxfF39hKq2JCIuqau/OyIeqOo/johdG3UukqTeNfJK5CbghF7qV2dmW7XMBYiI8cCZwMHVPtdHxOCIGAz8I3AiMB6YUrUF+J/Vsd4LrAOmN/BcJEm9aFiIZOa9wNo+Nj8J6MjMP2bms8AS4PBqWZKZSzPzVaADOCkiAjgG+Ndq/5uBk3dk/yVJ29eKZyIzI+KR6nbX0Ko2Glhe12ZFVdtafR/g95m5cbO6JKmJmh0iNwD7A23AKuDKZnxoRMyIiM6I6Ozq6mrGR0rSgNDUEMnMFzLztcx8HfgnarerAFYC+9U1HVPVtlZfA+wdEUM2q2/tc2dlZntmto8YMWLHnIwkqbkhEhGj6t7+LdA9cutu4MyI2C0i3g2MAx4EHgLGVSOxdqX28P3uzEzgF8Bp1f7TgLuacQ6SpD/rU4hExPy+1DbbPge4DzgwIlZExHTgf0XEoxHxCDAJ+CJAZj4G3Ao8Dvw7cEF1xbIRmAnMA54Abq3aAlwMfCkillB7RnJjX85FkrTjDNnWxojYHXg7MLx6CB7Vpr3YzoPszJzSS3mrf+gz85vAN3upzwXm9lJfyp9vh0mSWmCbIQKcB1wI7Ass4M8hsh74XuO6JUnqD7YZIpl5DXBNRHw+M69rUp8kSf3E9q5EAMjM6yLiL4Gx9ftk5i0N6pckqR/oU4hExA+pfb9jEfBaVU7AEJGkAaxPIQK0A+OrobWSJAF9/57IYuC/NrIjkqT+p69XIsOBxyPiQeCP3cXM/JuG9EqS1C/0NUQub2QnJEn9U19HZ/2/RndEktT/9HV01gZqo7EAdgV2Af4zM/dqVMckSTu/vl6J7Nm9Xv0g1EnAkY3qlCSpf3jDs/hmzZ3A8dtrK0l6a+vr7axT6t4Oova9kVca0iNJUr/R1yuRj9ctxwMbqN3SkqSGOeecc3jnO9/JhAkTemo/+clPOPjggxk0aBCdnZ099WXLlvG2t72NtrY22tra+OxnPwvAhg0bemptbW0MHz6cCy+8EIDnn3+eSZMmceihh3LIIYcwd+4WE4ZrO/r6TOTTje6IJG3u7LPPZubMmUydOrWnNmHCBG6//XbOO++8Ldrvv//+LFq0aJPannvuuUlt4sSJnHJK7ebKN77xDU4//XTOP/98Hn/8cSZPnsyyZcsacSpvWX39UaoxEXFHRKyultsiYkyjOydpYPvQhz7EsGHDNqkddNBBHHjggUXHe/rpp1m9ejVHH300ABHB+vXrAXjppZfYd99931yHB6C+3s76Z2o/YbtvtfxbVZOkncazzz7LoYceyoc//GF+9atfbbG9o6ODM844g9ogU7j88sv50Y9+xJgxY5g8eTLXXecvXrxRfQ2REZn5z5m5sVpuAkY0sF+S9IaMGjWK559/noULF3LVVVfxiU98oucqo1tHRwdTpvz5R1fnzJnD2WefzYoVK5g7dy5nnXUWr7/+erO73q/1NUTWRMSnImJwtXwKWNPIjknSG7Hbbruxzz77ALXnHvvvvz9PP/10z/aHH36YjRs3MnHixJ7ajTfeyOmnnw7AUUcdxSuvvMKLL77Y3I73c30NkXOA04HfAauA04CzG9QnSXrDurq6eO212s8dLV26lGeeeYb3vOc9PdvnzJmzyVUIwLve9S7mz58PwBNPPMErr7zCiBHeZHkj+joB49eBaZm5DiAihgHfoRYuktQQU6ZM4Ze//CUvvvgiY8aM4Wtf+xrDhg3j85//PF1dXXzsYx+jra2NefPmce+993LppZeyyy67MGjQIL7//e9v8lD+1ltv3WII75VXXsm5557L1VdfTURw00039TwvUd9EX35nKiIWZuah26v1B+3t7Vk/tvyNmniRP+aoLS34h6nbbyT1YxGxIDPbN6/39XbWoIgYWnewYfT9KkaS9BbV1yC4ErgvIn5Svf874JuN6ZKkUs9//X2t7oJ2Qu+69NGGHbuv31i/JSI6gWOq0imZ+XjDeiVJ6hf6fEuqCg2DQ5LU4w1PBS9JUjdDRJJUzBCRJBUzRCRJxQwRSVIxQ0SSVKxhIRIRs6sfsFpcVxsWEfdExDPV69CqHhFxbUQsiYhHIuKwun2mVe2fiYhpdfWJEfFotc+14YQ3ktR0jbwSuQk4YbPaJcD8zBwHzK/eA5wIjKuWGcAN0DO9ymXAEcDhwGV106/cAJxbt9/mnyVJarCGhUhm3gus3ax8EnBztX4zcHJd/ZasuR/YOyJGAccD92Tm2moG4XuAE6pte2Xm/VmbQfKWumNJkpqk2c9ERmbmqmr9d8DIan00sLyu3Yqqtq36il7qkqQmatmD9eoKYvvz0O8AETEjIjojorOrq6sZHylJA0KzQ+SF6lYU1evqqr4S2K+u3Ziqtq36mF7qvcrMWZnZnpnt/mqZJO04zQ6Ru4HuEVbTgLvq6lOrUVpHAi9Vt73mAcdFxNDqgfpxwLxq2/qIOLIalTW17liSpCZp2A9LRcQc4K+A4RGxgtooq28Dt0bEdOA5ar/bDjAXmAwsAf4AfBogM9dGxBXAQ1W7r2dm98P6z1EbAfY24GfVIklqooaFSGZO2cqmY3tpm8AFWznObGB2L/VOYMKb6aMk6c3xG+uSpGKGiCSpmCEiSSpmiEiSihkikqRihogkqZghIkkqZohIkooZIpKkYoaIJKmYISJJKmaISJKKGSKSpGKGiCSpmCEiSSpmiEiSihkikqRihogkqZghIkkqZohIkooZIpKkYoaIJKmYISJJKmaISJKKGSKSpGKGiCSpmCEiSSpmiEiSihkikqRihogkqZghIkkqZohIkooZIpKkYi0JkYhYFhGPRsSiiOisasMi4p6IeKZ6HVrVIyKujYglEfFIRBxWd5xpVftnImJaK85FkgayVl6JTMrMtsxsr95fAszPzHHA/Oo9wInAuGqZAdwAtdABLgOOAA4HLusOHklSc+xMt7NOAm6u1m8GTq6r35I19wN7R8Qo4Hjgnsxcm5nrgHuAE5rcZ0ka0FoVIgn8PCIWRMSMqjYyM1dV678DRlbro4HldfuuqGpbq28hImZERGdEdHZ1de2oc5CkAW9Iiz73g5m5MiLeCdwTEU/Wb8zMjIjcUR+WmbOAWQDt7e077LiSNNC15EokM1dWr6uBO6g903ihuk1F9bq6ar4S2K9u9zFVbWt1SVKTND1EIuIdEbFn9zpwHLAYuBvoHmE1DbirWr8bmFqN0joSeKm67TUPOC4ihlYP1I+rapKkJmnF7ayRwB0R0f35/ycz/z0iHgJujYjpwHPA6VX7ucBkYAnwB+DTAJm5NiKuAB6q2n09M9c27zQkSU0PkcxcCry/l/oa4Nhe6glcsJVjzQZm7+g+SpL6Zmca4itJ6mcMEUlSMUNEklTMEJEkFTNEJEnFDBFJUjFDRJJUzBCRJBUzRCRJxQwRSVIxQ0SSVMwQkSQVM0QkScUMEUlSMUNEklTMEJEkFTNEJEnFDBFJUjFDRJJUzBCRJBUzRCRJxQwRSVIxQ0SSVMwQkSQVM0QkScUMEUlSMUNEklTMEJEkFTNEJEnFDBFJUjFDRJJUzBCRJBXr9yESESdExFMRsSQiLml1fyRpIOnXIRIRg4F/BE4ExgNTImJ8a3slSQNHvw4R4HBgSWYuzcxXgQ7gpBb3SZIGjCGt7sCbNBpYXvd+BXDE5o0iYgYwo3r7ckQ81YS+DQTDgRdb3YmdQXxnWqu7oC3577PbZbEjjvIXvRX7e4j0SWbOAma1uh9vNRHRmZntre6H1Bv/fTZHf7+dtRLYr+79mKomSWqC/h4iDwHjIuLdEbErcCZwd4v7JEkDRr++nZWZGyNiJjAPGAzMzszHWtytgcRbhNqZ+e+zCSIzW90HSVI/1d9vZ0mSWsgQkSQVM0RUxOlmtLOKiNkRsToiFre6LwOBIaI3zOlmtJO7CTih1Z0YKAwRlXC6Ge20MvNeYG2r+zFQGCIq0dt0M6Nb1BdJLWSISJKKGSIq4XQzkgBDRGWcbkYSYIioQGZuBLqnm3kCuNXpZrSziIg5wH3AgRGxIiKmt7pPb2VOeyJJKuaViCSpmCEiSSpmiEiSihkikqRihogkqZghIu1AEbF3RHyuCZ9zspNeamdgiEg71t5An0Mkakr+H55MbQZlqaX8noi0A0VE94zGTwG/AA4BhgK7AP8jM++KiLHUvqj5ADARmAxMBT4FdFGb3HJBZn4nIvanNu3+COAPwLnAMOCnwEvVcmpm/rZZ5yjVG9LqDkhvMZcAEzKzLSKGAG/PzPURMRy4PyK6p4cZB0zLzPsj4r8BpwLvpxY2vwEWVO1mAZ/NzGci4gjg+sw8pjrOTzPzX5t5ctLmDBGpcQL4VkR8CHid2nT5I6ttz2Xm/dX6B4C7MvMV4JWI+DeAiNgD+EvgJxHRfczdmtV5qS8MEalxPkntNtTEzPxTRCwDdq+2/Wcf9h8E/D4z2xrTPenN88G6tGNtAPas1v8LsLoKkEnAX2xln18DH4+I3aurj78GyMz1wLMR8XfQ8xD+/b18jtQyhoi0A2XmGuDXEbEYaAPaI+JRag/On9zKPg9Rm0r/EeBnwKPUHphD7WpmekQ8DDzGn3+GuAO4KCIWVg/fpZZwdJa0E4iIPTLz5Yh4O3AvMCMzf9Pqfknb4zMRaecwq/ry4O7AzQaI+guvRCRJxXwmIkkqZohIkooZIpKkYoaIJKmYISJJKvb/AQlgVmV3lk/GAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "ax=sns.countplot(data=df,x='target')\n",
    "ax.bar_label(ax.containers[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "507de851",
   "metadata": {
    "papermill": {
     "duration": 0.026433,
     "end_time": "2022-07-26T11:05:01.724272",
     "exception": false,
     "start_time": "2022-07-26T11:05:01.697839",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "0ab905b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-26T11:05:01.779843Z",
     "iopub.status.busy": "2022-07-26T11:05:01.779457Z",
     "iopub.status.idle": "2022-07-26T11:05:01.791057Z",
     "shell.execute_reply": "2022-07-26T11:05:01.790303Z"
    },
    "papermill": {
     "duration": 0.041994,
     "end_time": "2022-07-26T11:05:01.793042",
     "exception": false,
     "start_time": "2022-07-26T11:05:01.751048",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#Lets separate Numerical features and categorical feature for better analysis\n",
    "\n",
    "df_num=df.select_dtypes(exclude='object') #Numerical features\n",
    "df_cat=df.select_dtypes(include='object') #Categorical features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "7b0d62cf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-26T11:05:01.849200Z",
     "iopub.status.busy": "2022-07-26T11:05:01.848606Z",
     "iopub.status.idle": "2022-07-26T11:05:01.870376Z",
     "shell.execute_reply": "2022-07-26T11:05:01.869555Z"
    },
    "papermill": {
     "duration": 0.052517,
     "end_time": "2022-07-26T11:05:01.872590",
     "exception": false,
     "start_time": "2022-07-26T11:05:01.820073",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>GRCA</th>\n",
       "      <th>CCA</th>\n",
       "      <th>JD</th>\n",
       "      <th>ODD</th>\n",
       "      <th>JS</th>\n",
       "      <th>ODS</th>\n",
       "      <th>SL</th>\n",
       "      <th>NDTD</th>\n",
       "      <th>CURP</th>\n",
       "      <th>GROP</th>\n",
       "      <th>...</th>\n",
       "      <th>GRA</th>\n",
       "      <th>CURA</th>\n",
       "      <th>RPW</th>\n",
       "      <th>CUCA</th>\n",
       "      <th>CAR</th>\n",
       "      <th>BKT_2</th>\n",
       "      <th>CL_1</th>\n",
       "      <th>CL_2</th>\n",
       "      <th>CL_3</th>\n",
       "      <th>target</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.400436</td>\n",
       "      <td>0.610522</td>\n",
       "      <td>0.667146</td>\n",
       "      <td>0.930870</td>\n",
       "      <td>0.709433</td>\n",
       "      <td>0.800000</td>\n",
       "      <td>1</td>\n",
       "      <td>0.016290</td>\n",
       "      <td>0.204678</td>\n",
       "      <td>0.409357</td>\n",
       "      <td>...</td>\n",
       "      <td>1.341754</td>\n",
       "      <td>1.820791</td>\n",
       "      <td>0.280196</td>\n",
       "      <td>-0.007556</td>\n",
       "      <td>1.091054</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.400436</td>\n",
       "      <td>0.610522</td>\n",
       "      <td>0.667146</td>\n",
       "      <td>0.930870</td>\n",
       "      <td>0.709433</td>\n",
       "      <td>0.800000</td>\n",
       "      <td>1</td>\n",
       "      <td>0.024623</td>\n",
       "      <td>0.216374</td>\n",
       "      <td>0.409357</td>\n",
       "      <td>...</td>\n",
       "      <td>1.999409</td>\n",
       "      <td>3.810137</td>\n",
       "      <td>0.276128</td>\n",
       "      <td>-0.007556</td>\n",
       "      <td>1.143376</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.728882</td>\n",
       "      <td>0.524062</td>\n",
       "      <td>1.365898</td>\n",
       "      <td>0.885873</td>\n",
       "      <td>1.463205</td>\n",
       "      <td>0.767442</td>\n",
       "      <td>0</td>\n",
       "      <td>0.004357</td>\n",
       "      <td>0.089888</td>\n",
       "      <td>0.101124</td>\n",
       "      <td>...</td>\n",
       "      <td>0.618700</td>\n",
       "      <td>0.742814</td>\n",
       "      <td>0.278101</td>\n",
       "      <td>0.435419</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>5.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>0.298977</td>\n",
       "      <td>0.764192</td>\n",
       "      <td>0.354716</td>\n",
       "      <td>0.800000</td>\n",
       "      <td>0</td>\n",
       "      <td>0.003798</td>\n",
       "      <td>0.314147</td>\n",
       "      <td>0.328710</td>\n",
       "      <td>...</td>\n",
       "      <td>1.117669</td>\n",
       "      <td>1.079367</td>\n",
       "      <td>0.266220</td>\n",
       "      <td>0.091167</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.614226</td>\n",
       "      <td>0.389327</td>\n",
       "      <td>0.699606</td>\n",
       "      <td>0.917133</td>\n",
       "      <td>1.108489</td>\n",
       "      <td>0.862069</td>\n",
       "      <td>1</td>\n",
       "      <td>0.024571</td>\n",
       "      <td>0.253333</td>\n",
       "      <td>0.560000</td>\n",
       "      <td>...</td>\n",
       "      <td>4.393867</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>0.277710</td>\n",
       "      <td>2.103696</td>\n",
       "      <td>1.454895</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 23 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       GRCA       CCA        JD       ODD        JS       ODS  SL      NDTD  \\\n",
       "0  1.400436  0.610522  0.667146  0.930870  0.709433  0.800000   1  0.016290   \n",
       "1  1.400436  0.610522  0.667146  0.930870  0.709433  0.800000   1  0.024623   \n",
       "2  0.728882  0.524062  1.365898  0.885873  1.463205  0.767442   0  0.004357   \n",
       "3  5.000000  5.000000  0.298977  0.764192  0.354716  0.800000   0  0.003798   \n",
       "4  0.614226  0.389327  0.699606  0.917133  1.108489  0.862069   1  0.024571   \n",
       "\n",
       "       CURP      GROP  ...       GRA      CURA       RPW      CUCA       CAR  \\\n",
       "0  0.204678  0.409357  ...  1.341754  1.820791  0.280196 -0.007556  1.091054   \n",
       "1  0.216374  0.409357  ...  1.999409  3.810137  0.276128 -0.007556  1.143376   \n",
       "2  0.089888  0.101124  ...  0.618700  0.742814  0.278101  0.435419  5.000000   \n",
       "3  0.314147  0.328710  ...  1.117669  1.079367  0.266220  0.091167  5.000000   \n",
       "4  0.253333  0.560000  ...  4.393867  5.000000  0.277710  2.103696  1.454895   \n",
       "\n",
       "   BKT_2  CL_1  CL_2  CL_3  target  \n",
       "0      0     0     1     0       0  \n",
       "1      0     0     1     0       0  \n",
       "2      0     0     0     0       0  \n",
       "3      1     0     0     0       1  \n",
       "4      1     0     1     0       0  \n",
       "\n",
       "[5 rows x 23 columns]"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_num.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "efcc979b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-26T11:05:01.929673Z",
     "iopub.status.busy": "2022-07-26T11:05:01.929116Z",
     "iopub.status.idle": "2022-07-26T11:05:01.936877Z",
     "shell.execute_reply": "2022-07-26T11:05:01.936174Z"
    },
    "papermill": {
     "duration": 0.038241,
     "end_time": "2022-07-26T11:05:01.938866",
     "exception": false,
     "start_time": "2022-07-26T11:05:01.900625",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>QT</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>GN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>GN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>GN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>GN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>GN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   QT\n",
       "0  GN\n",
       "1  GN\n",
       "2  GN\n",
       "3  GN\n",
       "4  GN"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_cat.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "d75fca29",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-26T11:05:01.996918Z",
     "iopub.status.busy": "2022-07-26T11:05:01.996244Z",
     "iopub.status.idle": "2022-07-26T11:05:02.030285Z",
     "shell.execute_reply": "2022-07-26T11:05:02.029404Z"
    },
    "papermill": {
     "duration": 0.066463,
     "end_time": "2022-07-26T11:05:02.032836",
     "exception": false,
     "start_time": "2022-07-26T11:05:01.966373",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class feature_details:\n",
    "    \n",
    "    \n",
    "    def categorical_feature_details(self,categorical_df):\n",
    "        \n",
    "        print(\"\\n==================================================================\")\n",
    "        print(\"                   CATEGORICAL FEATURE DETAILS                     \")\n",
    "        print(\"==================================================================\")\n",
    "        \n",
    "        cols=categorical_df.columns\n",
    "    \n",
    "        for col in cols:\n",
    "            print(\"\\n\\n________________\")\n",
    "            print(\"\\nFeature: {}\".format(col))\n",
    "            print(\"________________\")\n",
    "\n",
    "\n",
    "\n",
    "            #nulls\n",
    "            \n",
    "            print('\\n\\nNULLS:-\\n')\n",
    "            nulls=df[col].isnull().sum()\n",
    "            pernulls=np.round((nulls/(len(df[col])))*100,2)\n",
    "            print(\"    {} % Null values \\n    (i.e Out of {} instaces, there are {} Number of null values)\".format(pernulls,len(df[col]),nulls))\n",
    "\n",
    "\n",
    "\n",
    "            #uniques\n",
    "\n",
    "            print('\\nUNIQUES:-\\n')\n",
    "            nuniqs=df[col].nunique()\n",
    "            print(\"    Total {} unique values\".format(nuniqs))\n",
    "\n",
    "            uniqs=df[col].unique()\n",
    "            print(\"\\n    Unique values are:\")\n",
    "            for i in range(len(uniqs)):\n",
    "                print('    ',i+1,'-',uniqs[i])\n",
    "                \n",
    "            \n",
    "            #value_counts\n",
    "            \n",
    "            val_cnt=df[col].value_counts()\n",
    "            print(\"\\n    Unique values counts:\")\n",
    "            print(\"        \")\n",
    "            print(val_cnt)\n",
    "                \n",
    "                \n",
    "                \n",
    "                \n",
    "    def categorywise_outliers_details(self,categorical_df,target_column):\n",
    "        \n",
    "        df=pd.concat([categorical_df,target_column],axis=1)\n",
    "        targetcol=target_column.name\n",
    "        cols=df.columns\n",
    "        \n",
    "        \n",
    "        print(\"\\n=====================================================================\")\n",
    "        print(\"\\n                   CATEGORYWISE OUTLIERS DETAILS:                    \")\n",
    "        print(\"               (with respect to target variable: {} )               \\n\".format(targetcol))\n",
    "\n",
    "        print(\"=====================================================================\")\n",
    "        \n",
    "        \n",
    "        for i in range(len(cols)):\n",
    "\n",
    "            col=cols[i]\n",
    "\n",
    "            if col==targetcol:\n",
    "                continue\n",
    "            else:\n",
    "                print(\"\\n\\n________________\")\n",
    "                print(\"\\nCOLUMN: {} \".format(col.upper()))\n",
    "                print(\"________________\")\n",
    "                cats=df[col].unique()\n",
    "            \n",
    "            for i in range(len(cats)):\n",
    "                cat=cats[i]\n",
    "\n",
    "                print(\"\\n\\n      {}. Category: {} \\n\".format(i+1,cat))\n",
    "\n",
    "\n",
    "\n",
    "                q75,q25=np.percentile(df[df[col]==cat][targetcol],[75,25])\n",
    "                iqr=np.round(q75-q25,3)\n",
    "                upperlim=np.round(q75+(1.5*iqr),3)\n",
    "                lowerlim=np.round(q25-(1.5*iqr),3)\n",
    "\n",
    "\n",
    "\n",
    "                upper_indexes=df[(df[col]==cat) & (df[targetcol]>upperlim)].index\n",
    "                lower_indexes=df[(df[col]==cat) & (df[targetcol]<lowerlim)].index\n",
    "\n",
    "                mini=df[df[col]==cat][targetcol].min()\n",
    "                maxi=df[df[col]==cat][targetcol].max()\n",
    "                avg=np.round(df[df[col]==cat][targetcol].mean(),2)\n",
    "                print(\"                Minimum {} for {} is: {}\".format(targetcol,cat,mini))\n",
    "                print(\"                Maximum {} for {} is: {}\".format(targetcol,cat,maxi))\n",
    "                print(\"                Average {} for {} is: {}\\n\".format(targetcol,cat,avg))\n",
    "                \n",
    "                print(\"                Upper Limit is {}\".format(upperlim))\n",
    "                print(\"                Lower Limit is {}\".format(lowerlim))\n",
    "                \n",
    "                \n",
    "                \n",
    "                if (len(upper_indexes)>0) or (len(lower_indexes)>0):\n",
    "\n",
    "                    if len(upper_indexes)>0:\n",
    "                        print(\"\\n                  >>> HIGHER OUTLIERS: {} \".format(len(upper_indexes)))\n",
    "                        print(\"                \\nOutliers are at index nos: \\n\",list(upper_indexes))\n",
    "                        \n",
    "\n",
    "                    if len(lower_indexes)>0:\n",
    "                        print(\"                  >>> LOWER OUTLIERS: {} \\n\".format(len(lower_indexes)))\n",
    "                        print(\"                \\nOutliers are at index nos: \\n\",list(lower_indexes))\n",
    "                        \n",
    "\n",
    "                else:\n",
    "                    print(\"                  NO OUTLIERS\")\n",
    "                    \n",
    "                    \n",
    "                \n",
    "            \n",
    "                \n",
    "\n",
    "                \n",
    "                \n",
    "    def numerical_feature_details(self,numerical_df):\n",
    "        print(\"\\n==================================================================\")\n",
    "        print(\"                   NUMERICAL FEATURE DETAILS                     \")\n",
    "        print(\"==================================================================\")\n",
    "        \n",
    "        cols=numerical_df.columns\n",
    "\n",
    "        for col in cols:\n",
    "            print(\"\\n\\n________________\")\n",
    "            print(\"\\nFeature: {}\".format(col))\n",
    "            print(\"________________\\n\")\n",
    "\n",
    "\n",
    "            \n",
    "            mins=df[col].min()\n",
    "            maxs=df[col].max()\n",
    "            avgs=np.round(df[col].mean(),2)\n",
    "            \n",
    "            print(\"Minimum {} is {}\".format(col,mins))\n",
    "            print(\"Maximum {} is {}\".format(col,maxs))\n",
    "            print(\"Average {} is {}\".format(col,avgs))\n",
    "            \n",
    "            \n",
    "            \n",
    "            \n",
    "            #nulls\n",
    "\n",
    "            print('\\n\\nNULLS:-\\n')\n",
    "            nulls=df[col].isnull().sum()\n",
    "            pernulls=np.round((nulls/(len(df[col])))*100,2)\n",
    "            print(\"    {} % Null values \\n    (i.e Out of {} instaces, there are {} Number of null values)\".format(pernulls,len(df[col]),nulls))\n",
    "\n",
    "\n",
    "\n",
    "            #uniques\n",
    "\n",
    "            print('\\nUNIQUES:-\\n')\n",
    "            nuniqs=df[col].nunique()\n",
    "            print(\"    Total {} unique values\".format(nuniqs))\n",
    "\n",
    "\n",
    "\n",
    "            #outliers\n",
    "            \n",
    "            print('\\nOUTLIERS:-\\n')\n",
    "\n",
    "\n",
    "            q75,q25=np.percentile(df[col],[75,25])\n",
    "            iqr=np.round(q75-q25,3)\n",
    "            upperlim=np.round(q75+(1.5*iqr),3)\n",
    "            lowerlim=np.round(q25-(1.5*iqr),3)\n",
    "            \n",
    "            print(\"    25th Percentile is: \",q25)\n",
    "            print(\"    75th Percentile is: \",q75)\n",
    "\n",
    "            print(\"    Inter Quartile range is: \",iqr)\n",
    "\n",
    "            print(\"    Upper limit is: \", upperlim)\n",
    "            print(\"    Lower limit is: \", lowerlim)\n",
    "                        \n",
    "            print('\\n')    \n",
    "            print(\"    >>> HIGHER OUTLIERS: {} \".format(len(df[df[col]>upperlim])))\n",
    "            print(\"    >>> LOWER OUTLIERS: {} \".format(len(df[df[col]<lowerlim])))\n",
    "            print('\\n\\n')\n",
    "\n",
    "\n",
    "            \n",
    "            \n",
    "\n",
    "       "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "b0df3c67",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-26T11:05:02.090293Z",
     "iopub.status.busy": "2022-07-26T11:05:02.089393Z",
     "iopub.status.idle": "2022-07-26T11:05:02.093856Z",
     "shell.execute_reply": "2022-07-26T11:05:02.093100Z"
    },
    "papermill": {
     "duration": 0.035752,
     "end_time": "2022-07-26T11:05:02.096001",
     "exception": false,
     "start_time": "2022-07-26T11:05:02.060249",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "feature_details=feature_details()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "7fbb6b39",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-26T11:05:02.154082Z",
     "iopub.status.busy": "2022-07-26T11:05:02.153348Z",
     "iopub.status.idle": "2022-07-26T11:05:02.247232Z",
     "shell.execute_reply": "2022-07-26T11:05:02.245275Z"
    },
    "papermill": {
     "duration": 0.126305,
     "end_time": "2022-07-26T11:05:02.250721",
     "exception": false,
     "start_time": "2022-07-26T11:05:02.124416",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "==================================================================\n",
      "                   NUMERICAL FEATURE DETAILS                     \n",
      "==================================================================\n",
      "\n",
      "\n",
      "________________\n",
      "\n",
      "Feature: GRCA\n",
      "________________\n",
      "\n",
      "Minimum GRCA is 0.008189685\n",
      "Maximum GRCA is 5.0\n",
      "Average GRCA is 2.11\n",
      "\n",
      "\n",
      "NULLS:-\n",
      "\n",
      "    0.0 % Null values \n",
      "    (i.e Out of 36775 instaces, there are 0 Number of null values)\n",
      "\n",
      "UNIQUES:-\n",
      "\n",
      "    Total 590 unique values\n",
      "\n",
      "OUTLIERS:-\n",
      "\n",
      "    25th Percentile is:  0.491381086\n",
      "    75th Percentile is:  3.513374764\n",
      "    Inter Quartile range is:  3.022\n",
      "    Upper limit is:  8.046\n",
      "    Lower limit is:  -4.042\n",
      "\n",
      "\n",
      "    >>> HIGHER OUTLIERS: 0 \n",
      "    >>> LOWER OUTLIERS: 0 \n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "________________\n",
      "\n",
      "Feature: CCA\n",
      "________________\n",
      "\n",
      "Minimum CCA is 0.007590947\n",
      "Maximum CCA is 5.0\n",
      "Average CCA is 2.32\n",
      "\n",
      "\n",
      "NULLS:-\n",
      "\n",
      "    0.0 % Null values \n",
      "    (i.e Out of 36775 instaces, there are 0 Number of null values)\n",
      "\n",
      "UNIQUES:-\n",
      "\n",
      "    Total 5292 unique values\n",
      "\n",
      "OUTLIERS:-\n",
      "\n",
      "    25th Percentile is:  0.923418179\n",
      "    75th Percentile is:  3.65665549\n",
      "    Inter Quartile range is:  2.733\n",
      "    Upper limit is:  7.756\n",
      "    Lower limit is:  -3.176\n",
      "\n",
      "\n",
      "    >>> HIGHER OUTLIERS: 0 \n",
      "    >>> LOWER OUTLIERS: 0 \n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "________________\n",
      "\n",
      "Feature: JD\n",
      "________________\n",
      "\n",
      "Minimum JD is 0.017084406\n",
      "Maximum JD is 3.542451549\n",
      "Average JD is 0.87\n",
      "\n",
      "\n",
      "NULLS:-\n",
      "\n",
      "    0.0 % Null values \n",
      "    (i.e Out of 36775 instaces, there are 0 Number of null values)\n",
      "\n",
      "UNIQUES:-\n",
      "\n",
      "    Total 1937 unique values\n",
      "\n",
      "OUTLIERS:-\n",
      "\n",
      "    25th Percentile is:  0.454445195\n",
      "    75th Percentile is:  1.294143742\n",
      "    Inter Quartile range is:  0.84\n",
      "    Upper limit is:  2.554\n",
      "    Lower limit is:  -0.806\n",
      "\n",
      "\n",
      "    >>> HIGHER OUTLIERS: 54 \n",
      "    >>> LOWER OUTLIERS: 0 \n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "________________\n",
      "\n",
      "Feature: ODD\n",
      "________________\n",
      "\n",
      "Minimum ODD is 0.012183236\n",
      "Maximum ODD is 1.02047502\n",
      "Average ODD is 0.78\n",
      "\n",
      "\n",
      "NULLS:-\n",
      "\n",
      "    0.0 % Null values \n",
      "    (i.e Out of 36775 instaces, there are 0 Number of null values)\n",
      "\n",
      "UNIQUES:-\n",
      "\n",
      "    Total 6387 unique values\n",
      "\n",
      "OUTLIERS:-\n",
      "\n",
      "    25th Percentile is:  0.64511041\n",
      "    75th Percentile is:  0.997002997\n",
      "    Inter Quartile range is:  0.352\n",
      "    Upper limit is:  1.525\n",
      "    Lower limit is:  0.117\n",
      "\n",
      "\n",
      "    >>> HIGHER OUTLIERS: 0 \n",
      "    >>> LOWER OUTLIERS: 197 \n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "________________\n",
      "\n",
      "Feature: JS\n",
      "________________\n",
      "\n",
      "Minimum JS is 0.044339552\n",
      "Maximum JS is 3.547164173\n",
      "Average JS is 0.77\n",
      "\n",
      "\n",
      "NULLS:-\n",
      "\n",
      "    0.0 % Null values \n",
      "    (i.e Out of 36775 instaces, there are 0 Number of null values)\n",
      "\n",
      "UNIQUES:-\n",
      "\n",
      "    Total 77 unique values\n",
      "\n",
      "OUTLIERS:-\n",
      "\n",
      "    25th Percentile is:  0.399055969\n",
      "    75th Percentile is:  0.975470148\n",
      "    Inter Quartile range is:  0.576\n",
      "    Upper limit is:  1.839\n",
      "    Lower limit is:  -0.465\n",
      "\n",
      "\n",
      "    >>> HIGHER OUTLIERS: 1472 \n",
      "    >>> LOWER OUTLIERS: 0 \n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "________________\n",
      "\n",
      "Feature: ODS\n",
      "________________\n",
      "\n",
      "Minimum ODS is 0.012987013\n",
      "Maximum ODS is 0.987654321\n",
      "Average ODS is 0.69\n",
      "\n",
      "\n",
      "NULLS:-\n",
      "\n",
      "    0.0 % Null values \n",
      "    (i.e Out of 36775 instaces, there are 0 Number of null values)\n",
      "\n",
      "UNIQUES:-\n",
      "\n",
      "    Total 942 unique values\n",
      "\n",
      "OUTLIERS:-\n",
      "\n",
      "    25th Percentile is:  0.518518519\n",
      "    75th Percentile is:  0.904761905\n",
      "    Inter Quartile range is:  0.386\n",
      "    Upper limit is:  1.484\n",
      "    Lower limit is:  -0.06\n",
      "\n",
      "\n",
      "    >>> HIGHER OUTLIERS: 0 \n",
      "    >>> LOWER OUTLIERS: 0 \n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "________________\n",
      "\n",
      "Feature: SL\n",
      "________________\n",
      "\n",
      "Minimum SL is 0\n",
      "Maximum SL is 1\n",
      "Average SL is 0.87\n",
      "\n",
      "\n",
      "NULLS:-\n",
      "\n",
      "    0.0 % Null values \n",
      "    (i.e Out of 36775 instaces, there are 0 Number of null values)\n",
      "\n",
      "UNIQUES:-\n",
      "\n",
      "    Total 2 unique values\n",
      "\n",
      "OUTLIERS:-\n",
      "\n",
      "    25th Percentile is:  1.0\n",
      "    75th Percentile is:  1.0\n",
      "    Inter Quartile range is:  0.0\n",
      "    Upper limit is:  1.0\n",
      "    Lower limit is:  1.0\n",
      "\n",
      "\n",
      "    >>> HIGHER OUTLIERS: 0 \n",
      "    >>> LOWER OUTLIERS: 4610 \n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "________________\n",
      "\n",
      "Feature: NDTD\n",
      "________________\n",
      "\n",
      "Minimum NDTD is 0.0\n",
      "Maximum NDTD is 0.127794464\n",
      "Average NDTD is 0.03\n",
      "\n",
      "\n",
      "NULLS:-\n",
      "\n",
      "    0.0 % Null values \n",
      "    (i.e Out of 36775 instaces, there are 0 Number of null values)\n",
      "\n",
      "UNIQUES:-\n",
      "\n",
      "    Total 27074 unique values\n",
      "\n",
      "OUTLIERS:-\n",
      "\n",
      "    25th Percentile is:  0.008318239000000002\n",
      "    75th Percentile is:  0.03604837\n",
      "    Inter Quartile range is:  0.028\n",
      "    Upper limit is:  0.078\n",
      "    Lower limit is:  -0.034\n",
      "\n",
      "\n",
      "    >>> HIGHER OUTLIERS: 2671 \n",
      "    >>> LOWER OUTLIERS: 0 \n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "________________\n",
      "\n",
      "Feature: CURP\n",
      "________________\n",
      "\n",
      "Minimum CURP is 0.000634115\n",
      "Maximum CURP is 3.0\n",
      "Average CURP is 0.45\n",
      "\n",
      "\n",
      "NULLS:-\n",
      "\n",
      "    0.0 % Null values \n",
      "    (i.e Out of 36775 instaces, there are 0 Number of null values)\n",
      "\n",
      "UNIQUES:-\n",
      "\n",
      "    Total 15495 unique values\n",
      "\n",
      "OUTLIERS:-\n",
      "\n",
      "    25th Percentile is:  0.254237288\n",
      "    75th Percentile is:  0.5\n",
      "    Inter Quartile range is:  0.246\n",
      "    Upper limit is:  0.869\n",
      "    Lower limit is:  -0.115\n",
      "\n",
      "\n",
      "    >>> HIGHER OUTLIERS: 2768 \n",
      "    >>> LOWER OUTLIERS: 0 \n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "________________\n",
      "\n",
      "Feature: GROP\n",
      "________________\n",
      "\n",
      "Minimum GROP is 0.001077586\n",
      "Maximum GROP is 3.0\n",
      "Average GROP is 0.7\n",
      "\n",
      "\n",
      "NULLS:-\n",
      "\n",
      "    0.0 % Null values \n",
      "    (i.e Out of 36775 instaces, there are 0 Number of null values)\n",
      "\n",
      "UNIQUES:-\n",
      "\n",
      "    Total 9894 unique values\n",
      "\n",
      "OUTLIERS:-\n",
      "\n",
      "    25th Percentile is:  0.404761905\n",
      "    75th Percentile is:  0.782016349\n",
      "    Inter Quartile range is:  0.377\n",
      "    Upper limit is:  1.348\n",
      "    Lower limit is:  -0.161\n",
      "\n",
      "\n",
      "    >>> HIGHER OUTLIERS: 3251 \n",
      "    >>> LOWER OUTLIERS: 0 \n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "________________\n",
      "\n",
      "Feature: CANP\n",
      "________________\n",
      "\n",
      "Minimum CANP is 0.0\n",
      "Maximum CANP is 0.87628866\n",
      "Average CANP is 0.15\n",
      "\n",
      "\n",
      "NULLS:-\n",
      "\n",
      "    0.0 % Null values \n",
      "    (i.e Out of 36775 instaces, there are 0 Number of null values)\n",
      "\n",
      "UNIQUES:-\n",
      "\n",
      "    Total 16664 unique values\n",
      "\n",
      "OUTLIERS:-\n",
      "\n",
      "    25th Percentile is:  0.070621469\n",
      "    75th Percentile is:  0.20220387350000002\n",
      "    Inter Quartile range is:  0.132\n",
      "    Upper limit is:  0.4\n",
      "    Lower limit is:  -0.127\n",
      "\n",
      "\n",
      "    >>> HIGHER OUTLIERS: 1178 \n",
      "    >>> LOWER OUTLIERS: 0 \n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "________________\n",
      "\n",
      "Feature: SBRA\n",
      "________________\n",
      "\n",
      "Minimum SBRA is 0.009876445\n",
      "Maximum SBRA is 3.297663151\n",
      "Average SBRA is 1.21\n",
      "\n",
      "\n",
      "NULLS:-\n",
      "\n",
      "    0.0 % Null values \n",
      "    (i.e Out of 36775 instaces, there are 0 Number of null values)\n",
      "\n",
      "UNIQUES:-\n",
      "\n",
      "    Total 5681 unique values\n",
      "\n",
      "OUTLIERS:-\n",
      "\n",
      "    25th Percentile is:  0.970608536\n",
      "    75th Percentile is:  1.395809667\n",
      "    Inter Quartile range is:  0.425\n",
      "    Upper limit is:  2.033\n",
      "    Lower limit is:  0.333\n",
      "\n",
      "\n",
      "    >>> HIGHER OUTLIERS: 940 \n",
      "    >>> LOWER OUTLIERS: 315 \n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "________________\n",
      "\n",
      "Feature: SCRA\n",
      "________________\n",
      "\n",
      "Minimum SCRA is 0.0\n",
      "Maximum SCRA is 5.0\n",
      "Average SCRA is 1.57\n",
      "\n",
      "\n",
      "NULLS:-\n",
      "\n",
      "    0.0 % Null values \n",
      "    (i.e Out of 36775 instaces, there are 0 Number of null values)\n",
      "\n",
      "UNIQUES:-\n",
      "\n",
      "    Total 5499 unique values\n",
      "\n",
      "OUTLIERS:-\n",
      "\n",
      "    25th Percentile is:  0.844169101\n",
      "    75th Percentile is:  2.09845344\n",
      "    Inter Quartile range is:  1.254\n",
      "    Upper limit is:  3.979\n",
      "    Lower limit is:  -1.037\n",
      "\n",
      "\n",
      "    >>> HIGHER OUTLIERS: 825 \n",
      "    >>> LOWER OUTLIERS: 0 \n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "________________\n",
      "\n",
      "Feature: GRA\n",
      "________________\n",
      "\n",
      "Minimum GRA is -5.0\n",
      "Maximum GRA is 5.0\n",
      "Average GRA is 2.09\n",
      "\n",
      "\n",
      "NULLS:-\n",
      "\n",
      "    0.0 % Null values \n",
      "    (i.e Out of 36775 instaces, there are 0 Number of null values)\n",
      "\n",
      "UNIQUES:-\n",
      "\n",
      "    Total 24981 unique values\n",
      "\n",
      "OUTLIERS:-\n",
      "\n",
      "    25th Percentile is:  0.718988204\n",
      "    75th Percentile is:  3.5911775795\n",
      "    Inter Quartile range is:  2.872\n",
      "    Upper limit is:  7.899\n",
      "    Lower limit is:  -3.589\n",
      "\n",
      "\n",
      "    >>> HIGHER OUTLIERS: 0 \n",
      "    >>> LOWER OUTLIERS: 225 \n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "________________\n",
      "\n",
      "Feature: CURA\n",
      "________________\n",
      "\n",
      "Minimum CURA is -5.0\n",
      "Maximum CURA is 5.0\n",
      "Average CURA is 2.26\n",
      "\n",
      "\n",
      "NULLS:-\n",
      "\n",
      "    0.0 % Null values \n",
      "    (i.e Out of 36775 instaces, there are 0 Number of null values)\n",
      "\n",
      "UNIQUES:-\n",
      "\n",
      "    Total 24234 unique values\n",
      "\n",
      "OUTLIERS:-\n",
      "\n",
      "    25th Percentile is:  0.8945488075\n",
      "    75th Percentile is:  3.919440266\n",
      "    Inter Quartile range is:  3.025\n",
      "    Upper limit is:  8.457\n",
      "    Lower limit is:  -3.643\n",
      "\n",
      "\n",
      "    >>> HIGHER OUTLIERS: 0 \n",
      "    >>> LOWER OUTLIERS: 223 \n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "________________\n",
      "\n",
      "Feature: RPW\n",
      "________________\n",
      "\n",
      "Minimum RPW is 0.0\n",
      "Maximum RPW is 0.5\n",
      "Average RPW is 0.22\n",
      "\n",
      "\n",
      "NULLS:-\n",
      "\n",
      "    0.0 % Null values \n",
      "    (i.e Out of 36775 instaces, there are 0 Number of null values)\n",
      "\n",
      "UNIQUES:-\n",
      "\n",
      "    Total 315 unique values\n",
      "\n",
      "OUTLIERS:-\n",
      "\n",
      "    25th Percentile is:  0.16553399\n",
      "    75th Percentile is:  0.252824048\n",
      "    Inter Quartile range is:  0.087\n",
      "    Upper limit is:  0.383\n",
      "    Lower limit is:  0.035\n",
      "\n",
      "\n",
      "    >>> HIGHER OUTLIERS: 4 \n",
      "    >>> LOWER OUTLIERS: 30 \n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "________________\n",
      "\n",
      "Feature: CUCA\n",
      "________________\n",
      "\n",
      "Minimum CUCA is -5.0\n",
      "Maximum CUCA is 5.0\n",
      "Average CUCA is 0.53\n",
      "\n",
      "\n",
      "NULLS:-\n",
      "\n",
      "    0.0 % Null values \n",
      "    (i.e Out of 36775 instaces, there are 0 Number of null values)\n",
      "\n",
      "UNIQUES:-\n",
      "\n",
      "    Total 11289 unique values\n",
      "\n",
      "OUTLIERS:-\n",
      "\n",
      "    25th Percentile is:  -0.040931816\n",
      "    75th Percentile is:  0.971761856\n",
      "    Inter Quartile range is:  1.013\n",
      "    Upper limit is:  2.491\n",
      "    Lower limit is:  -1.56\n",
      "\n",
      "\n",
      "    >>> HIGHER OUTLIERS: 1716 \n",
      "    >>> LOWER OUTLIERS: 483 \n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "________________\n",
      "\n",
      "Feature: CAR\n",
      "________________\n",
      "\n",
      "Minimum CAR is 0.0\n",
      "Maximum CAR is 5.0\n",
      "Average CAR is 1.42\n",
      "\n",
      "\n",
      "NULLS:-\n",
      "\n",
      "    0.0 % Null values \n",
      "    (i.e Out of 36775 instaces, there are 0 Number of null values)\n",
      "\n",
      "UNIQUES:-\n",
      "\n",
      "    Total 31019 unique values\n",
      "\n",
      "OUTLIERS:-\n",
      "\n",
      "    25th Percentile is:  0.9841027874999999\n",
      "    75th Percentile is:  1.436486709\n",
      "    Inter Quartile range is:  0.452\n",
      "    Upper limit is:  2.114\n",
      "    Lower limit is:  0.306\n",
      "\n",
      "\n",
      "    >>> HIGHER OUTLIERS: 4822 \n",
      "    >>> LOWER OUTLIERS: 2022 \n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "________________\n",
      "\n",
      "Feature: BKT_2\n",
      "________________\n",
      "\n",
      "Minimum BKT_2 is 0\n",
      "Maximum BKT_2 is 1\n",
      "Average BKT_2 is 0.52\n",
      "\n",
      "\n",
      "NULLS:-\n",
      "\n",
      "    0.0 % Null values \n",
      "    (i.e Out of 36775 instaces, there are 0 Number of null values)\n",
      "\n",
      "UNIQUES:-\n",
      "\n",
      "    Total 2 unique values\n",
      "\n",
      "OUTLIERS:-\n",
      "\n",
      "    25th Percentile is:  0.0\n",
      "    75th Percentile is:  1.0\n",
      "    Inter Quartile range is:  1.0\n",
      "    Upper limit is:  2.5\n",
      "    Lower limit is:  -1.5\n",
      "\n",
      "\n",
      "    >>> HIGHER OUTLIERS: 0 \n",
      "    >>> LOWER OUTLIERS: 0 \n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "________________\n",
      "\n",
      "Feature: CL_1\n",
      "________________\n",
      "\n",
      "Minimum CL_1 is 0\n",
      "Maximum CL_1 is 1\n",
      "Average CL_1 is 0.55\n",
      "\n",
      "\n",
      "NULLS:-\n",
      "\n",
      "    0.0 % Null values \n",
      "    (i.e Out of 36775 instaces, there are 0 Number of null values)\n",
      "\n",
      "UNIQUES:-\n",
      "\n",
      "    Total 2 unique values\n",
      "\n",
      "OUTLIERS:-\n",
      "\n",
      "    25th Percentile is:  0.0\n",
      "    75th Percentile is:  1.0\n",
      "    Inter Quartile range is:  1.0\n",
      "    Upper limit is:  2.5\n",
      "    Lower limit is:  -1.5\n",
      "\n",
      "\n",
      "    >>> HIGHER OUTLIERS: 0 \n",
      "    >>> LOWER OUTLIERS: 0 \n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "________________\n",
      "\n",
      "Feature: CL_2\n",
      "________________\n",
      "\n",
      "Minimum CL_2 is 0\n",
      "Maximum CL_2 is 1\n",
      "Average CL_2 is 0.34\n",
      "\n",
      "\n",
      "NULLS:-\n",
      "\n",
      "    0.0 % Null values \n",
      "    (i.e Out of 36775 instaces, there are 0 Number of null values)\n",
      "\n",
      "UNIQUES:-\n",
      "\n",
      "    Total 2 unique values\n",
      "\n",
      "OUTLIERS:-\n",
      "\n",
      "    25th Percentile is:  0.0\n",
      "    75th Percentile is:  1.0\n",
      "    Inter Quartile range is:  1.0\n",
      "    Upper limit is:  2.5\n",
      "    Lower limit is:  -1.5\n",
      "\n",
      "\n",
      "    >>> HIGHER OUTLIERS: 0 \n",
      "    >>> LOWER OUTLIERS: 0 \n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "________________\n",
      "\n",
      "Feature: CL_3\n",
      "________________\n",
      "\n",
      "Minimum CL_3 is 0\n",
      "Maximum CL_3 is 1\n",
      "Average CL_3 is 0.02\n",
      "\n",
      "\n",
      "NULLS:-\n",
      "\n",
      "    0.0 % Null values \n",
      "    (i.e Out of 36775 instaces, there are 0 Number of null values)\n",
      "\n",
      "UNIQUES:-\n",
      "\n",
      "    Total 2 unique values\n",
      "\n",
      "OUTLIERS:-\n",
      "\n",
      "    25th Percentile is:  0.0\n",
      "    75th Percentile is:  0.0\n",
      "    Inter Quartile range is:  0.0\n",
      "    Upper limit is:  0.0\n",
      "    Lower limit is:  0.0\n",
      "\n",
      "\n",
      "    >>> HIGHER OUTLIERS: 727 \n",
      "    >>> LOWER OUTLIERS: 0 \n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "________________\n",
      "\n",
      "Feature: target\n",
      "________________\n",
      "\n",
      "Minimum target is 0\n",
      "Maximum target is 1\n",
      "Average target is 0.31\n",
      "\n",
      "\n",
      "NULLS:-\n",
      "\n",
      "    0.0 % Null values \n",
      "    (i.e Out of 36775 instaces, there are 0 Number of null values)\n",
      "\n",
      "UNIQUES:-\n",
      "\n",
      "    Total 2 unique values\n",
      "\n",
      "OUTLIERS:-\n",
      "\n",
      "    25th Percentile is:  0.0\n",
      "    75th Percentile is:  1.0\n",
      "    Inter Quartile range is:  1.0\n",
      "    Upper limit is:  2.5\n",
      "    Lower limit is:  -1.5\n",
      "\n",
      "\n",
      "    >>> HIGHER OUTLIERS: 0 \n",
      "    >>> LOWER OUTLIERS: 0 \n",
      "\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "feature_details.numerical_feature_details(df_num)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "57480908",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-26T11:05:02.310857Z",
     "iopub.status.busy": "2022-07-26T11:05:02.309797Z",
     "iopub.status.idle": "2022-07-26T11:05:02.331346Z",
     "shell.execute_reply": "2022-07-26T11:05:02.329992Z"
    },
    "papermill": {
     "duration": 0.053946,
     "end_time": "2022-07-26T11:05:02.333474",
     "exception": false,
     "start_time": "2022-07-26T11:05:02.279528",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "==================================================================\n",
      "                   CATEGORICAL FEATURE DETAILS                     \n",
      "==================================================================\n",
      "\n",
      "\n",
      "________________\n",
      "\n",
      "Feature: QT\n",
      "________________\n",
      "\n",
      "\n",
      "NULLS:-\n",
      "\n",
      "    0.0 % Null values \n",
      "    (i.e Out of 36775 instaces, there are 0 Number of null values)\n",
      "\n",
      "UNIQUES:-\n",
      "\n",
      "    Total 3 unique values\n",
      "\n",
      "    Unique values are:\n",
      "     1 - GN\n",
      "     2 - PQ\n",
      "     3 - RL\n",
      "\n",
      "    Unique values counts:\n",
      "        \n",
      "GN    26576\n",
      "RL     6648\n",
      "PQ     3551\n",
      "Name: QT, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "feature_details.categorical_feature_details(df_cat)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "93e5bec6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-26T11:05:02.394279Z",
     "iopub.status.busy": "2022-07-26T11:05:02.393492Z",
     "iopub.status.idle": "2022-07-26T11:05:02.406096Z",
     "shell.execute_reply": "2022-07-26T11:05:02.405004Z"
    },
    "papermill": {
     "duration": 0.045655,
     "end_time": "2022-07-26T11:05:02.408561",
     "exception": false,
     "start_time": "2022-07-26T11:05:02.362906",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#Onehot encoding on categorical variable:\n",
    "\n",
    "df_cat_dum=pd.get_dummies(df_cat,drop_first=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8fb9064",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-26T11:05:02.468596Z",
     "iopub.status.busy": "2022-07-26T11:05:02.468229Z",
     "iopub.status.idle": "2022-07-26T11:05:02.477584Z",
     "shell.execute_reply": "2022-07-26T11:05:02.476547Z"
    },
    "papermill": {
     "duration": 0.041891,
     "end_time": "2022-07-26T11:05:02.479931",
     "exception": false,
     "start_time": "2022-07-26T11:05:02.438040",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>QT_PQ</th>\n",
       "      <th>QT_RL</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   QT_PQ  QT_RL\n",
       "0      0      0\n",
       "1      0      0\n",
       "2      0      0\n",
       "3      0      0\n",
       "4      0      0"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_cat_dum.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "18da8d24",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-26T11:05:02.539670Z",
     "iopub.status.busy": "2022-07-26T11:05:02.539297Z",
     "iopub.status.idle": "2022-07-26T11:05:02.563535Z",
     "shell.execute_reply": "2022-07-26T11:05:02.562467Z"
    },
    "papermill": {
     "duration": 0.056779,
     "end_time": "2022-07-26T11:05:02.565682",
     "exception": false,
     "start_time": "2022-07-26T11:05:02.508903",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>GRCA</th>\n",
       "      <th>CCA</th>\n",
       "      <th>JD</th>\n",
       "      <th>ODD</th>\n",
       "      <th>JS</th>\n",
       "      <th>ODS</th>\n",
       "      <th>SL</th>\n",
       "      <th>NDTD</th>\n",
       "      <th>CURP</th>\n",
       "      <th>GROP</th>\n",
       "      <th>...</th>\n",
       "      <th>GRA</th>\n",
       "      <th>CURA</th>\n",
       "      <th>RPW</th>\n",
       "      <th>CUCA</th>\n",
       "      <th>CAR</th>\n",
       "      <th>BKT_2</th>\n",
       "      <th>CL_1</th>\n",
       "      <th>CL_2</th>\n",
       "      <th>CL_3</th>\n",
       "      <th>target</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.400436</td>\n",
       "      <td>0.610522</td>\n",
       "      <td>0.667146</td>\n",
       "      <td>0.930870</td>\n",
       "      <td>0.709433</td>\n",
       "      <td>0.800000</td>\n",
       "      <td>1</td>\n",
       "      <td>0.016290</td>\n",
       "      <td>0.204678</td>\n",
       "      <td>0.409357</td>\n",
       "      <td>...</td>\n",
       "      <td>1.341754</td>\n",
       "      <td>1.820791</td>\n",
       "      <td>0.280196</td>\n",
       "      <td>-0.007556</td>\n",
       "      <td>1.091054</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.400436</td>\n",
       "      <td>0.610522</td>\n",
       "      <td>0.667146</td>\n",
       "      <td>0.930870</td>\n",
       "      <td>0.709433</td>\n",
       "      <td>0.800000</td>\n",
       "      <td>1</td>\n",
       "      <td>0.024623</td>\n",
       "      <td>0.216374</td>\n",
       "      <td>0.409357</td>\n",
       "      <td>...</td>\n",
       "      <td>1.999409</td>\n",
       "      <td>3.810137</td>\n",
       "      <td>0.276128</td>\n",
       "      <td>-0.007556</td>\n",
       "      <td>1.143376</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.728882</td>\n",
       "      <td>0.524062</td>\n",
       "      <td>1.365898</td>\n",
       "      <td>0.885873</td>\n",
       "      <td>1.463205</td>\n",
       "      <td>0.767442</td>\n",
       "      <td>0</td>\n",
       "      <td>0.004357</td>\n",
       "      <td>0.089888</td>\n",
       "      <td>0.101124</td>\n",
       "      <td>...</td>\n",
       "      <td>0.618700</td>\n",
       "      <td>0.742814</td>\n",
       "      <td>0.278101</td>\n",
       "      <td>0.435419</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>5.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>0.298977</td>\n",
       "      <td>0.764192</td>\n",
       "      <td>0.354716</td>\n",
       "      <td>0.800000</td>\n",
       "      <td>0</td>\n",
       "      <td>0.003798</td>\n",
       "      <td>0.314147</td>\n",
       "      <td>0.328710</td>\n",
       "      <td>...</td>\n",
       "      <td>1.117669</td>\n",
       "      <td>1.079367</td>\n",
       "      <td>0.266220</td>\n",
       "      <td>0.091167</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.614226</td>\n",
       "      <td>0.389327</td>\n",
       "      <td>0.699606</td>\n",
       "      <td>0.917133</td>\n",
       "      <td>1.108489</td>\n",
       "      <td>0.862069</td>\n",
       "      <td>1</td>\n",
       "      <td>0.024571</td>\n",
       "      <td>0.253333</td>\n",
       "      <td>0.560000</td>\n",
       "      <td>...</td>\n",
       "      <td>4.393867</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>0.277710</td>\n",
       "      <td>2.103696</td>\n",
       "      <td>1.454895</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 23 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       GRCA       CCA        JD       ODD        JS       ODS  SL      NDTD  \\\n",
       "0  1.400436  0.610522  0.667146  0.930870  0.709433  0.800000   1  0.016290   \n",
       "1  1.400436  0.610522  0.667146  0.930870  0.709433  0.800000   1  0.024623   \n",
       "2  0.728882  0.524062  1.365898  0.885873  1.463205  0.767442   0  0.004357   \n",
       "3  5.000000  5.000000  0.298977  0.764192  0.354716  0.800000   0  0.003798   \n",
       "4  0.614226  0.389327  0.699606  0.917133  1.108489  0.862069   1  0.024571   \n",
       "\n",
       "       CURP      GROP  ...       GRA      CURA       RPW      CUCA       CAR  \\\n",
       "0  0.204678  0.409357  ...  1.341754  1.820791  0.280196 -0.007556  1.091054   \n",
       "1  0.216374  0.409357  ...  1.999409  3.810137  0.276128 -0.007556  1.143376   \n",
       "2  0.089888  0.101124  ...  0.618700  0.742814  0.278101  0.435419  5.000000   \n",
       "3  0.314147  0.328710  ...  1.117669  1.079367  0.266220  0.091167  5.000000   \n",
       "4  0.253333  0.560000  ...  4.393867  5.000000  0.277710  2.103696  1.454895   \n",
       "\n",
       "   BKT_2  CL_1  CL_2  CL_3  target  \n",
       "0      0     0     1     0       0  \n",
       "1      0     0     1     0       0  \n",
       "2      0     0     0     0       0  \n",
       "3      1     0     0     0       1  \n",
       "4      1     0     1     0       0  \n",
       "\n",
       "[5 rows x 23 columns]"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_num.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "ae17f539",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-26T11:05:02.626334Z",
     "iopub.status.busy": "2022-07-26T11:05:02.625900Z",
     "iopub.status.idle": "2022-07-26T11:05:02.630519Z",
     "shell.execute_reply": "2022-07-26T11:05:02.629468Z"
    },
    "papermill": {
     "duration": 0.037741,
     "end_time": "2022-07-26T11:05:02.632698",
     "exception": false,
     "start_time": "2022-07-26T11:05:02.594957",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#lets concatenate encoded categorical feature with numerical features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "add41357",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-26T11:05:02.694791Z",
     "iopub.status.busy": "2022-07-26T11:05:02.694366Z",
     "iopub.status.idle": "2022-07-26T11:05:02.705477Z",
     "shell.execute_reply": "2022-07-26T11:05:02.704480Z"
    },
    "papermill": {
     "duration": 0.045528,
     "end_time": "2022-07-26T11:05:02.707846",
     "exception": false,
     "start_time": "2022-07-26T11:05:02.662318",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df_final=pd.concat([df_cat_dum,df_num],axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "62b79f6d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-26T11:05:02.769276Z",
     "iopub.status.busy": "2022-07-26T11:05:02.768886Z",
     "iopub.status.idle": "2022-07-26T11:05:02.790381Z",
     "shell.execute_reply": "2022-07-26T11:05:02.789642Z"
    },
    "papermill": {
     "duration": 0.054517,
     "end_time": "2022-07-26T11:05:02.792350",
     "exception": false,
     "start_time": "2022-07-26T11:05:02.737833",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>QT_PQ</th>\n",
       "      <th>QT_RL</th>\n",
       "      <th>GRCA</th>\n",
       "      <th>CCA</th>\n",
       "      <th>JD</th>\n",
       "      <th>ODD</th>\n",
       "      <th>JS</th>\n",
       "      <th>ODS</th>\n",
       "      <th>SL</th>\n",
       "      <th>NDTD</th>\n",
       "      <th>...</th>\n",
       "      <th>GRA</th>\n",
       "      <th>CURA</th>\n",
       "      <th>RPW</th>\n",
       "      <th>CUCA</th>\n",
       "      <th>CAR</th>\n",
       "      <th>BKT_2</th>\n",
       "      <th>CL_1</th>\n",
       "      <th>CL_2</th>\n",
       "      <th>CL_3</th>\n",
       "      <th>target</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1.400436</td>\n",
       "      <td>0.610522</td>\n",
       "      <td>0.667146</td>\n",
       "      <td>0.930870</td>\n",
       "      <td>0.709433</td>\n",
       "      <td>0.800000</td>\n",
       "      <td>1</td>\n",
       "      <td>0.016290</td>\n",
       "      <td>...</td>\n",
       "      <td>1.341754</td>\n",
       "      <td>1.820791</td>\n",
       "      <td>0.280196</td>\n",
       "      <td>-0.007556</td>\n",
       "      <td>1.091054</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1.400436</td>\n",
       "      <td>0.610522</td>\n",
       "      <td>0.667146</td>\n",
       "      <td>0.930870</td>\n",
       "      <td>0.709433</td>\n",
       "      <td>0.800000</td>\n",
       "      <td>1</td>\n",
       "      <td>0.024623</td>\n",
       "      <td>...</td>\n",
       "      <td>1.999409</td>\n",
       "      <td>3.810137</td>\n",
       "      <td>0.276128</td>\n",
       "      <td>-0.007556</td>\n",
       "      <td>1.143376</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.728882</td>\n",
       "      <td>0.524062</td>\n",
       "      <td>1.365898</td>\n",
       "      <td>0.885873</td>\n",
       "      <td>1.463205</td>\n",
       "      <td>0.767442</td>\n",
       "      <td>0</td>\n",
       "      <td>0.004357</td>\n",
       "      <td>...</td>\n",
       "      <td>0.618700</td>\n",
       "      <td>0.742814</td>\n",
       "      <td>0.278101</td>\n",
       "      <td>0.435419</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>0.298977</td>\n",
       "      <td>0.764192</td>\n",
       "      <td>0.354716</td>\n",
       "      <td>0.800000</td>\n",
       "      <td>0</td>\n",
       "      <td>0.003798</td>\n",
       "      <td>...</td>\n",
       "      <td>1.117669</td>\n",
       "      <td>1.079367</td>\n",
       "      <td>0.266220</td>\n",
       "      <td>0.091167</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.614226</td>\n",
       "      <td>0.389327</td>\n",
       "      <td>0.699606</td>\n",
       "      <td>0.917133</td>\n",
       "      <td>1.108489</td>\n",
       "      <td>0.862069</td>\n",
       "      <td>1</td>\n",
       "      <td>0.024571</td>\n",
       "      <td>...</td>\n",
       "      <td>4.393867</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>0.277710</td>\n",
       "      <td>2.103696</td>\n",
       "      <td>1.454895</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 25 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   QT_PQ  QT_RL      GRCA       CCA        JD       ODD        JS       ODS  \\\n",
       "0      0      0  1.400436  0.610522  0.667146  0.930870  0.709433  0.800000   \n",
       "1      0      0  1.400436  0.610522  0.667146  0.930870  0.709433  0.800000   \n",
       "2      0      0  0.728882  0.524062  1.365898  0.885873  1.463205  0.767442   \n",
       "3      0      0  5.000000  5.000000  0.298977  0.764192  0.354716  0.800000   \n",
       "4      0      0  0.614226  0.389327  0.699606  0.917133  1.108489  0.862069   \n",
       "\n",
       "   SL      NDTD  ...       GRA      CURA       RPW      CUCA       CAR  BKT_2  \\\n",
       "0   1  0.016290  ...  1.341754  1.820791  0.280196 -0.007556  1.091054      0   \n",
       "1   1  0.024623  ...  1.999409  3.810137  0.276128 -0.007556  1.143376      0   \n",
       "2   0  0.004357  ...  0.618700  0.742814  0.278101  0.435419  5.000000      0   \n",
       "3   0  0.003798  ...  1.117669  1.079367  0.266220  0.091167  5.000000      1   \n",
       "4   1  0.024571  ...  4.393867  5.000000  0.277710  2.103696  1.454895      1   \n",
       "\n",
       "   CL_1  CL_2  CL_3  target  \n",
       "0     0     1     0       0  \n",
       "1     0     1     0       0  \n",
       "2     0     0     0       0  \n",
       "3     0     0     0       1  \n",
       "4     0     1     0       0  \n",
       "\n",
       "[5 rows x 25 columns]"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_final.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "8dfd9ec2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-26T11:05:02.853303Z",
     "iopub.status.busy": "2022-07-26T11:05:02.852907Z",
     "iopub.status.idle": "2022-07-26T11:05:02.857574Z",
     "shell.execute_reply": "2022-07-26T11:05:02.856426Z"
    },
    "papermill": {
     "duration": 0.037766,
     "end_time": "2022-07-26T11:05:02.859785",
     "exception": false,
     "start_time": "2022-07-26T11:05:02.822019",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#Data is clean now, no further modification is required.\n",
    "#let's seperate Dependent features and independent features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "8f5a9255",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-26T11:05:02.921588Z",
     "iopub.status.busy": "2022-07-26T11:05:02.921205Z",
     "iopub.status.idle": "2022-07-26T11:05:02.937628Z",
     "shell.execute_reply": "2022-07-26T11:05:02.936826Z"
    },
    "papermill": {
     "duration": 0.050307,
     "end_time": "2022-07-26T11:05:02.940057",
     "exception": false,
     "start_time": "2022-07-26T11:05:02.889750",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X=df_final.drop('target',axis=1) #Independent features\n",
    "y=df['target'] #Target variable"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "d7d93f84",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-26T11:05:03.002340Z",
     "iopub.status.busy": "2022-07-26T11:05:03.001569Z",
     "iopub.status.idle": "2022-07-26T11:05:03.025277Z",
     "shell.execute_reply": "2022-07-26T11:05:03.024215Z"
    },
    "papermill": {
     "duration": 0.057507,
     "end_time": "2022-07-26T11:05:03.027509",
     "exception": false,
     "start_time": "2022-07-26T11:05:02.970002",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>QT_PQ</th>\n",
       "      <th>QT_RL</th>\n",
       "      <th>GRCA</th>\n",
       "      <th>CCA</th>\n",
       "      <th>JD</th>\n",
       "      <th>ODD</th>\n",
       "      <th>JS</th>\n",
       "      <th>ODS</th>\n",
       "      <th>SL</th>\n",
       "      <th>NDTD</th>\n",
       "      <th>...</th>\n",
       "      <th>SCRA</th>\n",
       "      <th>GRA</th>\n",
       "      <th>CURA</th>\n",
       "      <th>RPW</th>\n",
       "      <th>CUCA</th>\n",
       "      <th>CAR</th>\n",
       "      <th>BKT_2</th>\n",
       "      <th>CL_1</th>\n",
       "      <th>CL_2</th>\n",
       "      <th>CL_3</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1.400436</td>\n",
       "      <td>0.610522</td>\n",
       "      <td>0.667146</td>\n",
       "      <td>0.930870</td>\n",
       "      <td>0.709433</td>\n",
       "      <td>0.800000</td>\n",
       "      <td>1</td>\n",
       "      <td>0.016290</td>\n",
       "      <td>...</td>\n",
       "      <td>0.919474</td>\n",
       "      <td>1.341754</td>\n",
       "      <td>1.820791</td>\n",
       "      <td>0.280196</td>\n",
       "      <td>-0.007556</td>\n",
       "      <td>1.091054</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1.400436</td>\n",
       "      <td>0.610522</td>\n",
       "      <td>0.667146</td>\n",
       "      <td>0.930870</td>\n",
       "      <td>0.709433</td>\n",
       "      <td>0.800000</td>\n",
       "      <td>1</td>\n",
       "      <td>0.024623</td>\n",
       "      <td>...</td>\n",
       "      <td>0.919474</td>\n",
       "      <td>1.999409</td>\n",
       "      <td>3.810137</td>\n",
       "      <td>0.276128</td>\n",
       "      <td>-0.007556</td>\n",
       "      <td>1.143376</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.728882</td>\n",
       "      <td>0.524062</td>\n",
       "      <td>1.365898</td>\n",
       "      <td>0.885873</td>\n",
       "      <td>1.463205</td>\n",
       "      <td>0.767442</td>\n",
       "      <td>0</td>\n",
       "      <td>0.004357</td>\n",
       "      <td>...</td>\n",
       "      <td>0.003487</td>\n",
       "      <td>0.618700</td>\n",
       "      <td>0.742814</td>\n",
       "      <td>0.278101</td>\n",
       "      <td>0.435419</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>0.298977</td>\n",
       "      <td>0.764192</td>\n",
       "      <td>0.354716</td>\n",
       "      <td>0.800000</td>\n",
       "      <td>0</td>\n",
       "      <td>0.003798</td>\n",
       "      <td>...</td>\n",
       "      <td>0.148338</td>\n",
       "      <td>1.117669</td>\n",
       "      <td>1.079367</td>\n",
       "      <td>0.266220</td>\n",
       "      <td>0.091167</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.614226</td>\n",
       "      <td>0.389327</td>\n",
       "      <td>0.699606</td>\n",
       "      <td>0.917133</td>\n",
       "      <td>1.108489</td>\n",
       "      <td>0.862069</td>\n",
       "      <td>1</td>\n",
       "      <td>0.024571</td>\n",
       "      <td>...</td>\n",
       "      <td>2.129082</td>\n",
       "      <td>4.393867</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>0.277710</td>\n",
       "      <td>2.103696</td>\n",
       "      <td>1.454895</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 24 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   QT_PQ  QT_RL      GRCA       CCA        JD       ODD        JS       ODS  \\\n",
       "0      0      0  1.400436  0.610522  0.667146  0.930870  0.709433  0.800000   \n",
       "1      0      0  1.400436  0.610522  0.667146  0.930870  0.709433  0.800000   \n",
       "2      0      0  0.728882  0.524062  1.365898  0.885873  1.463205  0.767442   \n",
       "3      0      0  5.000000  5.000000  0.298977  0.764192  0.354716  0.800000   \n",
       "4      0      0  0.614226  0.389327  0.699606  0.917133  1.108489  0.862069   \n",
       "\n",
       "   SL      NDTD  ...      SCRA       GRA      CURA       RPW      CUCA  \\\n",
       "0   1  0.016290  ...  0.919474  1.341754  1.820791  0.280196 -0.007556   \n",
       "1   1  0.024623  ...  0.919474  1.999409  3.810137  0.276128 -0.007556   \n",
       "2   0  0.004357  ...  0.003487  0.618700  0.742814  0.278101  0.435419   \n",
       "3   0  0.003798  ...  0.148338  1.117669  1.079367  0.266220  0.091167   \n",
       "4   1  0.024571  ...  2.129082  4.393867  5.000000  0.277710  2.103696   \n",
       "\n",
       "        CAR  BKT_2  CL_1  CL_2  CL_3  \n",
       "0  1.091054      0     0     1     0  \n",
       "1  1.143376      0     0     1     0  \n",
       "2  5.000000      0     0     0     0  \n",
       "3  5.000000      1     0     0     0  \n",
       "4  1.454895      1     0     1     0  \n",
       "\n",
       "[5 rows x 24 columns]"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "3c176225",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-26T11:05:03.090722Z",
     "iopub.status.busy": "2022-07-26T11:05:03.089968Z",
     "iopub.status.idle": "2022-07-26T11:05:03.097071Z",
     "shell.execute_reply": "2022-07-26T11:05:03.096335Z"
    },
    "papermill": {
     "duration": 0.041426,
     "end_time": "2022-07-26T11:05:03.099325",
     "exception": false,
     "start_time": "2022-07-26T11:05:03.057899",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    0\n",
       "1    0\n",
       "2    0\n",
       "3    1\n",
       "4    0\n",
       "Name: target, dtype: int64"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e538748f",
   "metadata": {
    "papermill": {
     "duration": 0.030136,
     "end_time": "2022-07-26T11:05:03.159600",
     "exception": false,
     "start_time": "2022-07-26T11:05:03.129464",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Logistic Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "be83b19c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-26T11:05:03.223003Z",
     "iopub.status.busy": "2022-07-26T11:05:03.222286Z",
     "iopub.status.idle": "2022-07-26T11:05:03.423599Z",
     "shell.execute_reply": "2022-07-26T11:05:03.422492Z"
    },
    "papermill": {
     "duration": 0.236317,
     "end_time": "2022-07-26T11:05:03.426208",
     "exception": false,
     "start_time": "2022-07-26T11:05:03.189891",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#Lets split data for trainig and testing (evaluating)\n",
    "from sklearn.model_selection import train_test_split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "64a7a0f4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-26T11:05:03.490207Z",
     "iopub.status.busy": "2022-07-26T11:05:03.489772Z",
     "iopub.status.idle": "2022-07-26T11:05:03.508751Z",
     "shell.execute_reply": "2022-07-26T11:05:03.507879Z"
    },
    "papermill": {
     "duration": 0.054004,
     "end_time": "2022-07-26T11:05:03.511266",
     "exception": false,
     "start_time": "2022-07-26T11:05:03.457262",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.10, random_state=101)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "df89a2e6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-26T11:05:03.574414Z",
     "iopub.status.busy": "2022-07-26T11:05:03.573685Z",
     "iopub.status.idle": "2022-07-26T11:05:03.578307Z",
     "shell.execute_reply": "2022-07-26T11:05:03.577575Z"
    },
    "papermill": {
     "duration": 0.038814,
     "end_time": "2022-07-26T11:05:03.580395",
     "exception": false,
     "start_time": "2022-07-26T11:05:03.541581",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#Lets scale data\n",
    "from sklearn.preprocessing import StandardScaler"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "27b4461d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-26T11:05:03.643394Z",
     "iopub.status.busy": "2022-07-26T11:05:03.642668Z",
     "iopub.status.idle": "2022-07-26T11:05:03.647396Z",
     "shell.execute_reply": "2022-07-26T11:05:03.646698Z"
    },
    "papermill": {
     "duration": 0.038783,
     "end_time": "2022-07-26T11:05:03.649564",
     "exception": false,
     "start_time": "2022-07-26T11:05:03.610781",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "scaler=StandardScaler()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "50ee3a84",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-26T11:05:03.713021Z",
     "iopub.status.busy": "2022-07-26T11:05:03.712291Z",
     "iopub.status.idle": "2022-07-26T11:05:03.739927Z",
     "shell.execute_reply": "2022-07-26T11:05:03.739112Z"
    },
    "papermill": {
     "duration": 0.062285,
     "end_time": "2022-07-26T11:05:03.742394",
     "exception": false,
     "start_time": "2022-07-26T11:05:03.680109",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X_train=scaler.fit_transform(X_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "0836c0dd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-26T11:05:03.806337Z",
     "iopub.status.busy": "2022-07-26T11:05:03.805101Z",
     "iopub.status.idle": "2022-07-26T11:05:03.813016Z",
     "shell.execute_reply": "2022-07-26T11:05:03.812267Z"
    },
    "papermill": {
     "duration": 0.042174,
     "end_time": "2022-07-26T11:05:03.815248",
     "exception": false,
     "start_time": "2022-07-26T11:05:03.773074",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X_test=scaler.transform(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "ba8ec119",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-26T11:05:03.880370Z",
     "iopub.status.busy": "2022-07-26T11:05:03.878942Z",
     "iopub.status.idle": "2022-07-26T11:05:03.957925Z",
     "shell.execute_reply": "2022-07-26T11:05:03.956654Z"
    },
    "papermill": {
     "duration": 0.113965,
     "end_time": "2022-07-26T11:05:03.960554",
     "exception": false,
     "start_time": "2022-07-26T11:05:03.846589",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.linear_model import LogisticRegression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "ca1eb9d8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-26T11:05:04.025918Z",
     "iopub.status.busy": "2022-07-26T11:05:04.025463Z",
     "iopub.status.idle": "2022-07-26T11:05:04.030603Z",
     "shell.execute_reply": "2022-07-26T11:05:04.029422Z"
    },
    "papermill": {
     "duration": 0.040767,
     "end_time": "2022-07-26T11:05:04.032867",
     "exception": false,
     "start_time": "2022-07-26T11:05:03.992100",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "log_model=LogisticRegression()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "d52e9446",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-26T11:05:04.098035Z",
     "iopub.status.busy": "2022-07-26T11:05:04.097284Z",
     "iopub.status.idle": "2022-07-26T11:05:04.290327Z",
     "shell.execute_reply": "2022-07-26T11:05:04.289158Z"
    },
    "papermill": {
     "duration": 0.229338,
     "end_time": "2022-07-26T11:05:04.293535",
     "exception": false,
     "start_time": "2022-07-26T11:05:04.064197",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LogisticRegression()"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "log_model.fit(X_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "6811ebf4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-26T11:05:04.412636Z",
     "iopub.status.busy": "2022-07-26T11:05:04.412265Z",
     "iopub.status.idle": "2022-07-26T11:05:04.420420Z",
     "shell.execute_reply": "2022-07-26T11:05:04.419211Z"
    },
    "papermill": {
     "duration": 0.070509,
     "end_time": "2022-07-26T11:05:04.423619",
     "exception": false,
     "start_time": "2022-07-26T11:05:04.353110",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "y_pred=log_model.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "6a550ed7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-26T11:05:04.539748Z",
     "iopub.status.busy": "2022-07-26T11:05:04.539376Z",
     "iopub.status.idle": "2022-07-26T11:05:04.543755Z",
     "shell.execute_reply": "2022-07-26T11:05:04.542945Z"
    },
    "papermill": {
     "duration": 0.063861,
     "end_time": "2022-07-26T11:05:04.545538",
     "exception": false,
     "start_time": "2022-07-26T11:05:04.481677",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.metrics import confusion_matrix,classification_report,plot_confusion_matrix,plot_roc_curve,plot_precision_recall_curve"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "9d3bb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-26T11:05:04.609832Z",
     "iopub.status.busy": "2022-07-26T11:05:04.609197Z",
     "iopub.status.idle": "2022-07-26T11:05:04.618355Z",
     "shell.execute_reply": "2022-07-26T11:05:04.617599Z"
    },
    "papermill": {
     "duration": 0.04364,
     "end_time": "2022-07-26T11:05:04.620277",
     "exception": false,
     "start_time": "2022-07-26T11:05:04.576637",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[2406,  183],\n",
       "       [ 691,  398]])"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "confusion_matrix(y_test,y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "6d62cdeb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-26T11:05:04.684519Z",
     "iopub.status.busy": "2022-07-26T11:05:04.683807Z",
     "iopub.status.idle": "2022-07-26T11:05:04.913194Z",
     "shell.execute_reply": "2022-07-26T11:05:04.912151Z"
    },
    "papermill": {
     "duration": 0.264356,
     "end_time": "2022-07-26T11:05:04.915705",
     "exception": false,
     "start_time": "2022-07-26T11:05:04.651349",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.7/site-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function plot_confusion_matrix is deprecated; Function `plot_confusion_matrix` is deprecated in 1.0 and will be removed in 1.2. Use one of the class methods: ConfusionMatrixDisplay.from_predictions or ConfusionMatrixDisplay.from_estimator.\n",
      "  warnings.warn(msg, category=FutureWarning)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay at 0x7fa811cfba50>"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_confusion_matrix(log_model,X_test,y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "5d33bb71",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-26T11:05:04.982153Z",
     "iopub.status.busy": "2022-07-26T11:05:04.981504Z",
     "iopub.status.idle": "2022-07-26T11:05:04.995828Z",
     "shell.execute_reply": "2022-07-26T11:05:04.995075Z"
    },
    "papermill": {
     "duration": 0.050311,
     "end_time": "2022-07-26T11:05:04.998512",
     "exception": false,
     "start_time": "2022-07-26T11:05:04.948201",
     "status": "completed"
    },
    "scrolled": true,
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.78      0.93      0.85      2589\n",
      "           1       0.69      0.37      0.48      1089\n",
      "\n",
      "    accuracy                           0.76      3678\n",
      "   macro avg       0.73      0.65      0.66      3678\n",
      "weighted avg       0.75      0.76      0.74      3678\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(classification_report(y_test,y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "ba459a34",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-26T11:05:05.066424Z",
     "iopub.status.busy": "2022-07-26T11:05:05.065802Z",
     "iopub.status.idle": "2022-07-26T11:05:05.069640Z",
     "shell.execute_reply": "2022-07-26T11:05:05.068628Z"
    },
    "papermill": {
     "duration": 0.039404,
     "end_time": "2022-07-26T11:05:05.071771",
     "exception": false,
     "start_time": "2022-07-26T11:05:05.032367",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# f1 score for predicting '1' is not upto the mark"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "6ca740f6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-26T11:05:05.137942Z",
     "iopub.status.busy": "2022-07-26T11:05:05.137266Z",
     "iopub.status.idle": "2022-07-26T11:05:05.354277Z",
     "shell.execute_reply": "2022-07-26T11:05:05.353457Z"
    },
    "papermill": {
     "duration": 0.25297,
     "end_time": "2022-07-26T11:05:05.356732",
     "exception": false,
     "start_time": "2022-07-26T11:05:05.103762",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.7/site-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function plot_precision_recall_curve is deprecated; Function `plot_precision_recall_curve` is deprecated in 1.0 and will be removed in 1.2. Use one of the class methods: PrecisionRecallDisplay.from_predictions or PrecisionRecallDisplay.from_estimator.\n",
      "  warnings.warn(msg, category=FutureWarning)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<sklearn.metrics._plot.precision_recall_curve.PrecisionRecallDisplay at 0x7fa8127973d0>"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_precision_recall_curve(log_model,X_test,y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "aecde3d8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-26T11:05:05.424397Z",
     "iopub.status.busy": "2022-07-26T11:05:05.423999Z",
     "iopub.status.idle": "2022-07-26T11:05:05.625803Z",
     "shell.execute_reply": "2022-07-26T11:05:05.624864Z"
    },
    "papermill": {
     "duration": 0.238325,
     "end_time": "2022-07-26T11:05:05.628098",
     "exception": false,
     "start_time": "2022-07-26T11:05:05.389773",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.7/site-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function plot_roc_curve is deprecated; Function :func:`plot_roc_curve` is deprecated in 1.0 and will be removed in 1.2. Use one of the class methods: :meth:`sklearn.metric.RocCurveDisplay.from_predictions` or :meth:`sklearn.metric.RocCurveDisplay.from_estimator`.\n",
      "  warnings.warn(msg, category=FutureWarning)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<sklearn.metrics._plot.roc_curve.RocCurveDisplay at 0x7fa812646250>"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_roc_curve(log_model,X_test,y_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "885770c5",
   "metadata": {
    "papermill": {
     "duration": 0.032514,
     "end_time": "2022-07-26T11:05:05.694065",
     "exception": false,
     "start_time": "2022-07-26T11:05:05.661551",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Logistic Regression using GridSearchCV"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "eecab1f3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-26T11:05:05.762065Z",
     "iopub.status.busy": "2022-07-26T11:05:05.761339Z",
     "iopub.status.idle": "2022-07-26T11:05:05.765783Z",
     "shell.execute_reply": "2022-07-26T11:05:05.765125Z"
    },
    "papermill": {
     "duration": 0.041069,
     "end_time": "2022-07-26T11:05:05.767842",
     "exception": false,
     "start_time": "2022-07-26T11:05:05.726773",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#Lets find best hyperparameter using GridSearchCV"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "b2346ac7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-26T11:05:05.835341Z",
     "iopub.status.busy": "2022-07-26T11:05:05.834617Z",
     "iopub.status.idle": "2022-07-26T11:05:05.839637Z",
     "shell.execute_reply": "2022-07-26T11:05:05.838936Z"
    },
    "papermill": {
     "duration": 0.041416,
     "end_time": "2022-07-26T11:05:05.841727",
     "exception": false,
     "start_time": "2022-07-26T11:05:05.800311",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "base_model=LogisticRegression(solver='saga',max_iter=100000,tol=0.01)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "bb66ff85",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-26T11:05:05.909845Z",
     "iopub.status.busy": "2022-07-26T11:05:05.909067Z",
     "iopub.status.idle": "2022-07-26T11:05:05.913809Z",
     "shell.execute_reply": "2022-07-26T11:05:05.913127Z"
    },
    "papermill": {
     "duration": 0.041249,
     "end_time": "2022-07-26T11:05:05.915865",
     "exception": false,
     "start_time": "2022-07-26T11:05:05.874616",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.model_selection import GridSearchCV"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "b4c6be39",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-26T11:05:05.985339Z",
     "iopub.status.busy": "2022-07-26T11:05:05.984599Z",
     "iopub.status.idle": "2022-07-26T11:05:05.990400Z",
     "shell.execute_reply": "2022-07-26T11:05:05.989551Z"
    },
    "papermill": {
     "duration": 0.042828,
     "end_time": "2022-07-26T11:05:05.992507",
     "exception": false,
     "start_time": "2022-07-26T11:05:05.949679",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "param_grid={'penalty':['elasticnet'],'C':np.logspace(1,10,5), 'l1_ratio':np.linspace(0,1,5)}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "371f6705",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-26T11:05:06.063218Z",
     "iopub.status.busy": "2022-07-26T11:05:06.062795Z",
     "iopub.status.idle": "2022-07-26T11:05:06.068371Z",
     "shell.execute_reply": "2022-07-26T11:05:06.067215Z"
    },
    "papermill": {
     "duration": 0.044518,
     "end_time": "2022-07-26T11:05:06.070555",
     "exception": false,
     "start_time": "2022-07-26T11:05:06.026037",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "grid_model=GridSearchCV(base_model,param_grid=param_grid,cv=5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "e3a6d032",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-26T11:05:06.140031Z",
     "iopub.status.busy": "2022-07-26T11:05:06.139286Z",
     "iopub.status.idle": "2022-07-26T11:05:30.583962Z",
     "shell.execute_reply": "2022-07-26T11:05:30.582881Z"
    },
    "papermill": {
     "duration": 24.48168,
     "end_time": "2022-07-26T11:05:30.586274",
     "exception": false,
     "start_time": "2022-07-26T11:05:06.104594",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GridSearchCV(cv=5,\n",
       "             estimator=LogisticRegression(max_iter=100000, solver='saga',\n",
       "                                          tol=0.01),\n",
       "             param_grid={'C': array([1.00000000e+01, 1.77827941e+03, 3.16227766e+05, 5.62341325e+07,\n",
       "       1.00000000e+10]),\n",
       "                         'l1_ratio': array([0.  , 0.25, 0.5 , 0.75, 1.  ]),\n",
       "                         'penalty': ['elasticnet']})"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "grid_model.fit(X_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "27e3a95b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-26T11:05:30.656382Z",
     "iopub.status.busy": "2022-07-26T11:05:30.655659Z",
     "iopub.status.idle": "2022-07-26T11:05:30.662991Z",
     "shell.execute_reply": "2022-07-26T11:05:30.662201Z"
    },
    "papermill": {
     "duration": 0.045027,
     "end_time": "2022-07-26T11:05:30.665122",
     "exception": false,
     "start_time": "2022-07-26T11:05:30.620095",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'C': 56234132.51903491,\n",
       " 'class_weight': None,\n",
       " 'dual': False,\n",
       " 'fit_intercept': True,\n",
       " 'intercept_scaling': 1,\n",
       " 'l1_ratio': 0.0,\n",
       " 'max_iter': 100000,\n",
       " 'multi_class': 'auto',\n",
       " 'n_jobs': None,\n",
       " 'penalty': 'elasticnet',\n",
       " 'random_state': None,\n",
       " 'solver': 'saga',\n",
       " 'tol': 0.01,\n",
       " 'verbose': 0,\n",
       " 'warm_start': False}"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "grid_model.best_estimator_.get_params()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "5fd7f04a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-26T11:05:30.735291Z",
     "iopub.status.busy": "2022-07-26T11:05:30.734558Z",
     "iopub.status.idle": "2022-07-26T11:05:30.740735Z",
     "shell.execute_reply": "2022-07-26T11:05:30.739562Z"
    },
    "papermill": {
     "duration": 0.045441,
     "end_time": "2022-07-26T11:05:30.744535",
     "exception": false,
     "start_time": "2022-07-26T11:05:30.699094",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "y_pred=grid_model.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "e9f9e78a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-26T11:05:30.868046Z",
     "iopub.status.busy": "2022-07-26T11:05:30.867679Z",
     "iopub.status.idle": "2022-07-26T11:05:30.875389Z",
     "shell.execute_reply": "2022-07-26T11:05:30.874546Z"
    },
    "papermill": {
     "duration": 0.069608,
     "end_time": "2022-07-26T11:05:30.877321",
     "exception": false,
     "start_time": "2022-07-26T11:05:30.807713",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[2407,  182],\n",
       "       [ 691,  398]])"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "confusion_matrix(y_test,y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "4b72c9fa",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-26T11:05:30.949916Z",
     "iopub.status.busy": "2022-07-26T11:05:30.949206Z",
     "iopub.status.idle": "2022-07-26T11:05:31.210792Z",
     "shell.execute_reply": "2022-07-26T11:05:31.210076Z"
    },
    "papermill": {
     "duration": 0.30085,
     "end_time": "2022-07-26T11:05:31.212820",
     "exception": false,
     "start_time": "2022-07-26T11:05:30.911970",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.7/site-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function plot_confusion_matrix is deprecated; Function `plot_confusion_matrix` is deprecated in 1.0 and will be removed in 1.2. Use one of the class methods: ConfusionMatrixDisplay.from_predictions or ConfusionMatrixDisplay.from_estimator.\n",
      "  warnings.warn(msg, category=FutureWarning)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay at 0x7fa80f5c8190>"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_confusion_matrix(grid_model,X_test,y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "b7e6b95c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-26T11:05:31.284411Z",
     "iopub.status.busy": "2022-07-26T11:05:31.284003Z",
     "iopub.status.idle": "2022-07-26T11:05:31.299644Z",
     "shell.execute_reply": "2022-07-26T11:05:31.298113Z"
    },
    "papermill": {
     "duration": 0.054664,
     "end_time": "2022-07-26T11:05:31.302488",
     "exception": false,
     "start_time": "2022-07-26T11:05:31.247824",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.78      0.93      0.85      2589\n",
      "           1       0.69      0.37      0.48      1089\n",
      "\n",
      "    accuracy                           0.76      3678\n",
      "   macro avg       0.73      0.65      0.66      3678\n",
      "weighted avg       0.75      0.76      0.74      3678\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(classification_report(y_test,y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "63a16ec9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-26T11:05:31.375606Z",
     "iopub.status.busy": "2022-07-26T11:05:31.374601Z",
     "iopub.status.idle": "2022-07-26T11:05:31.603515Z",
     "shell.execute_reply": "2022-07-26T11:05:31.602428Z"
    },
    "papermill": {
     "duration": 0.267636,
     "end_time": "2022-07-26T11:05:31.605862",
     "exception": false,
     "start_time": "2022-07-26T11:05:31.338226",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.7/site-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function plot_precision_recall_curve is deprecated; Function `plot_precision_recall_curve` is deprecated in 1.0 and will be removed in 1.2. Use one of the class methods: PrecisionRecallDisplay.from_predictions or PrecisionRecallDisplay.from_estimator.\n",
      "  warnings.warn(msg, category=FutureWarning)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<sklearn.metrics._plot.precision_recall_curve.PrecisionRecallDisplay at 0x7fa80f607dd0>"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_precision_recall_curve(grid_model,X_test,y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "d8a3b3e5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-26T11:05:31.679200Z",
     "iopub.status.busy": "2022-07-26T11:05:31.678475Z",
     "iopub.status.idle": "2022-07-26T11:05:31.895711Z",
     "shell.execute_reply": "2022-07-26T11:05:31.894892Z"
    },
    "papermill": {
     "duration": 0.256595,
     "end_time": "2022-07-26T11:05:31.898036",
     "exception": false,
     "start_time": "2022-07-26T11:05:31.641441",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.7/site-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function plot_roc_curve is deprecated; Function :func:`plot_roc_curve` is deprecated in 1.0 and will be removed in 1.2. Use one of the class methods: :meth:`sklearn.metric.RocCurveDisplay.from_predictions` or :meth:`sklearn.metric.RocCurveDisplay.from_estimator`.\n",
      "  warnings.warn(msg, category=FutureWarning)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<sklearn.metrics._plot.roc_curve.RocCurveDisplay at 0x7fa80f4a1a90>"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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uYY333wTgK1btzJz5syTymZmZtKkSRPefffdQo+ZnJzM3//+d5YtW0atWrU4cuRIkeuU85OZmUnFikX7SHnxxRf5/PPPWbRoEXFxcRw6dIgZM2YwevRohg4dyj/+8Y9A2enTpzN69OiTjrF27VqysrJo1apVYNu0adM4++yzmTZtGkOHDi1WLMWxb98+JkyYwJIlSxARevbsyfDhw6lTp06ucm+99VZg+a677qJWLWdU5MzMTK688kpef/11unXrxt69ewNPA1111VU8//zz3HfffcWKEaIsEfy0+zBdbdhpc4omfLSWdTsOlegxOzaJ48HfFjytx5dffknlypW56aabAttatmzJrbfeCsCUKVN4//33OXLkCFlZWUydOpULL7yQNWvWcOzYMa677jpWrlxJ+/btOXbM+RK0Z88eatasSY0aNQCoUaNGYHnTpk2MGTOGlJQUqlWrxssvv0z79u356KOPePjhh0lPT6devXq88cYbNGzYkPHjx7Np0yY2b95MixYt+Pe//81NN90U+Hb+wgsv0KRJE7KysrjhhhtYsGABTZs25cMPP6Rq1ao88sgjzJ07l7i4OADi4uK45pprAKhTpw7ff/89Z5zhDHT89ttvM3v27JPeozfeeIOLLroosK6qvPPOO3z++ef07duXtLQ0YmNjQ/4uCovlVM2ePZvBgwdTt25dAAYPHsysWbPyTWg5sb/99tt8+eWXAHz22Wd07dqVbt26AVCv3omBMocPH07fvn1LJBGc0jDUkWp/aga7D9nz4CZyrF27lh49ehRaZtmyZbz77rvMmzcv1/YXXniBatWqsX79eiZMmMDSpUsB6NatGw0bNiQxMZHrrruOjz4KTDzIjTfeyLPPPsvSpUt54okn+POfnWlHzj77bBYuXMjy5csZNWoUjz32WOA169at44svvmDatGncdttt9O/fn5UrV7Js2TI6dXKS3E8//cSYMWNYu3YttWvX5r333uPQoUMcPnw41zf5YKNHj2b69OkALFy4kLp169K27ckTSX377bf07NkzsL5gwQISExNp3bo155xzDp988kmh7x8QMpZgjz/+eKAaJ/jntttuO6ns9u3bad68eWC9WbNmbN++vcBjf/311zRs2DBwnT/++CMiwpAhQ+jRo0eu971OnTocP36cvXv3how5lKi5I9i2LxWAxPjqPkdiIlVh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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_roc_curve(grid_model,X_test,y_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "93fcaaab",
   "metadata": {
    "papermill": {
     "duration": 0.036182,
     "end_time": "2022-07-26T11:05:31.970689",
     "exception": false,
     "start_time": "2022-07-26T11:05:31.934507",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Support Vector Machine"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "3a3aefad",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-26T11:05:32.046677Z",
     "iopub.status.busy": "2022-07-26T11:05:32.045871Z",
     "iopub.status.idle": "2022-07-26T11:05:32.053864Z",
     "shell.execute_reply": "2022-07-26T11:05:32.053059Z"
    },
    "papermill": {
     "duration": 0.049407,
     "end_time": "2022-07-26T11:05:32.056621",
     "exception": false,
     "start_time": "2022-07-26T11:05:32.007214",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X=df_final.drop('target',axis=1) #Independent Variables\n",
    "y=df['target'] #Target Variable"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "d5d97e31",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-26T11:05:32.132231Z",
     "iopub.status.busy": "2022-07-26T11:05:32.131822Z",
     "iopub.status.idle": "2022-07-26T11:05:32.155263Z",
     "shell.execute_reply": "2022-07-26T11:05:32.154161Z"
    },
    "papermill": {
     "duration": 0.063712,
     "end_time": "2022-07-26T11:05:32.157471",
     "exception": false,
     "start_time": "2022-07-26T11:05:32.093759",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>QT_PQ</th>\n",
       "      <th>QT_RL</th>\n",
       "      <th>GRCA</th>\n",
       "      <th>CCA</th>\n",
       "      <th>JD</th>\n",
       "      <th>ODD</th>\n",
       "      <th>JS</th>\n",
       "      <th>ODS</th>\n",
       "      <th>SL</th>\n",
       "      <th>NDTD</th>\n",
       "      <th>...</th>\n",
       "      <th>SCRA</th>\n",
       "      <th>GRA</th>\n",
       "      <th>CURA</th>\n",
       "      <th>RPW</th>\n",
       "      <th>CUCA</th>\n",
       "      <th>CAR</th>\n",
       "      <th>BKT_2</th>\n",
       "      <th>CL_1</th>\n",
       "      <th>CL_2</th>\n",
       "      <th>CL_3</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1.400436</td>\n",
       "      <td>0.610522</td>\n",
       "      <td>0.667146</td>\n",
       "      <td>0.930870</td>\n",
       "      <td>0.709433</td>\n",
       "      <td>0.800000</td>\n",
       "      <td>1</td>\n",
       "      <td>0.016290</td>\n",
       "      <td>...</td>\n",
       "      <td>0.919474</td>\n",
       "      <td>1.341754</td>\n",
       "      <td>1.820791</td>\n",
       "      <td>0.280196</td>\n",
       "      <td>-0.007556</td>\n",
       "      <td>1.091054</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1.400436</td>\n",
       "      <td>0.610522</td>\n",
       "      <td>0.667146</td>\n",
       "      <td>0.930870</td>\n",
       "      <td>0.709433</td>\n",
       "      <td>0.800000</td>\n",
       "      <td>1</td>\n",
       "      <td>0.024623</td>\n",
       "      <td>...</td>\n",
       "      <td>0.919474</td>\n",
       "      <td>1.999409</td>\n",
       "      <td>3.810137</td>\n",
       "      <td>0.276128</td>\n",
       "      <td>-0.007556</td>\n",
       "      <td>1.143376</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.728882</td>\n",
       "      <td>0.524062</td>\n",
       "      <td>1.365898</td>\n",
       "      <td>0.885873</td>\n",
       "      <td>1.463205</td>\n",
       "      <td>0.767442</td>\n",
       "      <td>0</td>\n",
       "      <td>0.004357</td>\n",
       "      <td>...</td>\n",
       "      <td>0.003487</td>\n",
       "      <td>0.618700</td>\n",
       "      <td>0.742814</td>\n",
       "      <td>0.278101</td>\n",
       "      <td>0.435419</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>0.298977</td>\n",
       "      <td>0.764192</td>\n",
       "      <td>0.354716</td>\n",
       "      <td>0.800000</td>\n",
       "      <td>0</td>\n",
       "      <td>0.003798</td>\n",
       "      <td>...</td>\n",
       "      <td>0.148338</td>\n",
       "      <td>1.117669</td>\n",
       "      <td>1.079367</td>\n",
       "      <td>0.266220</td>\n",
       "      <td>0.091167</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.614226</td>\n",
       "      <td>0.389327</td>\n",
       "      <td>0.699606</td>\n",
       "      <td>0.917133</td>\n",
       "      <td>1.108489</td>\n",
       "      <td>0.862069</td>\n",
       "      <td>1</td>\n",
       "      <td>0.024571</td>\n",
       "      <td>...</td>\n",
       "      <td>2.129082</td>\n",
       "      <td>4.393867</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>0.277710</td>\n",
       "      <td>2.103696</td>\n",
       "      <td>1.454895</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 24 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   QT_PQ  QT_RL      GRCA       CCA        JD       ODD        JS       ODS  \\\n",
       "0      0      0  1.400436  0.610522  0.667146  0.930870  0.709433  0.800000   \n",
       "1      0      0  1.400436  0.610522  0.667146  0.930870  0.709433  0.800000   \n",
       "2      0      0  0.728882  0.524062  1.365898  0.885873  1.463205  0.767442   \n",
       "3      0      0  5.000000  5.000000  0.298977  0.764192  0.354716  0.800000   \n",
       "4      0      0  0.614226  0.389327  0.699606  0.917133  1.108489  0.862069   \n",
       "\n",
       "   SL      NDTD  ...      SCRA       GRA      CURA       RPW      CUCA  \\\n",
       "0   1  0.016290  ...  0.919474  1.341754  1.820791  0.280196 -0.007556   \n",
       "1   1  0.024623  ...  0.919474  1.999409  3.810137  0.276128 -0.007556   \n",
       "2   0  0.004357  ...  0.003487  0.618700  0.742814  0.278101  0.435419   \n",
       "3   0  0.003798  ...  0.148338  1.117669  1.079367  0.266220  0.091167   \n",
       "4   1  0.024571  ...  2.129082  4.393867  5.000000  0.277710  2.103696   \n",
       "\n",
       "        CAR  BKT_2  CL_1  CL_2  CL_3  \n",
       "0  1.091054      0     0     1     0  \n",
       "1  1.143376      0     0     1     0  \n",
       "2  5.000000      0     0     0     0  \n",
       "3  5.000000      1     0     0     0  \n",
       "4  1.454895      1     0     1     0  \n",
       "\n",
       "[5 rows x 24 columns]"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "88572f64",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-26T11:05:32.232844Z",
     "iopub.status.busy": "2022-07-26T11:05:32.232241Z",
     "iopub.status.idle": "2022-07-26T11:05:32.239770Z",
     "shell.execute_reply": "2022-07-26T11:05:32.238936Z"
    },
    "papermill": {
     "duration": 0.047438,
     "end_time": "2022-07-26T11:05:32.241728",
     "exception": false,
     "start_time": "2022-07-26T11:05:32.194290",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    0\n",
       "1    0\n",
       "2    0\n",
       "3    1\n",
       "4    0\n",
       "Name: target, dtype: int64"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "3bfe4a5e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-26T11:05:32.316632Z",
     "iopub.status.busy": "2022-07-26T11:05:32.315991Z",
     "iopub.status.idle": "2022-07-26T11:05:32.320653Z",
     "shell.execute_reply": "2022-07-26T11:05:32.319971Z"
    },
    "papermill": {
     "duration": 0.044283,
     "end_time": "2022-07-26T11:05:32.322625",
     "exception": false,
     "start_time": "2022-07-26T11:05:32.278342",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#Lets split data for trainig and testing (evaluating)\n",
    "from sklearn.model_selection import train_test_split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "5a54c8d2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-26T11:05:32.398273Z",
     "iopub.status.busy": "2022-07-26T11:05:32.397635Z",
     "iopub.status.idle": "2022-07-26T11:05:32.414634Z",
     "shell.execute_reply": "2022-07-26T11:05:32.413582Z"
    },
    "papermill": {
     "duration": 0.057357,
     "end_time": "2022-07-26T11:05:32.416892",
     "exception": false,
     "start_time": "2022-07-26T11:05:32.359535",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.10, random_state=101)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "4e7d875d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-26T11:05:32.492388Z",
     "iopub.status.busy": "2022-07-26T11:05:32.491972Z",
     "iopub.status.idle": "2022-07-26T11:05:32.496259Z",
     "shell.execute_reply": "2022-07-26T11:05:32.495148Z"
    },
    "papermill": {
     "duration": 0.044724,
     "end_time": "2022-07-26T11:05:32.498343",
     "exception": false,
     "start_time": "2022-07-26T11:05:32.453619",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#Lets scale data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "89ff9655",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-26T11:05:32.574170Z",
     "iopub.status.busy": "2022-07-26T11:05:32.573092Z",
     "iopub.status.idle": "2022-07-26T11:05:32.577768Z",
     "shell.execute_reply": "2022-07-26T11:05:32.577029Z"
    },
    "papermill": {
     "duration": 0.044401,
     "end_time": "2022-07-26T11:05:32.579601",
     "exception": false,
     "start_time": "2022-07-26T11:05:32.535200",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import StandardScaler"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "1ca653d3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-26T11:05:32.655712Z",
     "iopub.status.busy": "2022-07-26T11:05:32.655057Z",
     "iopub.status.idle": "2022-07-26T11:05:32.658917Z",
     "shell.execute_reply": "2022-07-26T11:05:32.658198Z"
    },
    "papermill": {
     "duration": 0.043896,
     "end_time": "2022-07-26T11:05:32.660775",
     "exception": false,
     "start_time": "2022-07-26T11:05:32.616879",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "scaler=StandardScaler()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "ff253219",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-26T11:05:32.741650Z",
     "iopub.status.busy": "2022-07-26T11:05:32.740841Z",
     "iopub.status.idle": "2022-07-26T11:05:32.766296Z",
     "shell.execute_reply": "2022-07-26T11:05:32.765290Z"
    },
    "papermill": {
     "duration": 0.071361,
     "end_time": "2022-07-26T11:05:32.769306",
     "exception": false,
     "start_time": "2022-07-26T11:05:32.697945",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X_train=scaler.fit_transform(X_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "fe922ee6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-26T11:05:32.862789Z",
     "iopub.status.busy": "2022-07-26T11:05:32.862239Z",
     "iopub.status.idle": "2022-07-26T11:05:32.868692Z",
     "shell.execute_reply": "2022-07-26T11:05:32.867987Z"
    },
    "papermill": {
     "duration": 0.050333,
     "end_time": "2022-07-26T11:05:32.870643",
     "exception": false,
     "start_time": "2022-07-26T11:05:32.820310",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X_test=scaler.transform(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "e9e64e70",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-26T11:05:32.947337Z",
     "iopub.status.busy": "2022-07-26T11:05:32.946741Z",
     "iopub.status.idle": "2022-07-26T11:05:32.950478Z",
     "shell.execute_reply": "2022-07-26T11:05:32.949723Z"
    },
    "papermill": {
     "duration": 0.04466,
     "end_time": "2022-07-26T11:05:32.952535",
     "exception": false,
     "start_time": "2022-07-26T11:05:32.907875",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.svm import SVC"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "5b1d9647",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-26T11:05:33.029313Z",
     "iopub.status.busy": "2022-07-26T11:05:33.028735Z",
     "iopub.status.idle": "2022-07-26T11:05:33.032685Z",
     "shell.execute_reply": "2022-07-26T11:05:33.031957Z"
    },
    "papermill": {
     "duration": 0.044553,
     "end_time": "2022-07-26T11:05:33.034592",
     "exception": false,
     "start_time": "2022-07-26T11:05:32.990039",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "model_svc=SVC()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "b3c64914",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-26T11:05:33.112372Z",
     "iopub.status.busy": "2022-07-26T11:05:33.111708Z",
     "iopub.status.idle": "2022-07-26T11:06:12.023559Z",
     "shell.execute_reply": "2022-07-26T11:06:12.022459Z"
    },
    "papermill": {
     "duration": 38.989085,
     "end_time": "2022-07-26T11:06:12.062431",
     "exception": false,
     "start_time": "2022-07-26T11:05:33.073346",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "SVC()"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_svc.fit(X_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "53c8896c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-26T11:06:12.138788Z",
     "iopub.status.busy": "2022-07-26T11:06:12.138406Z",
     "iopub.status.idle": "2022-07-26T11:06:16.326478Z",
     "shell.execute_reply": "2022-07-26T11:06:16.325340Z"
    },
    "papermill": {
     "duration": 4.22938,
     "end_time": "2022-07-26T11:06:16.329448",
     "exception": false,
     "start_time": "2022-07-26T11:06:12.100068",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "y_pred=model_svc.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "04a5451d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-26T11:06:16.406216Z",
     "iopub.status.busy": "2022-07-26T11:06:16.405546Z",
     "iopub.status.idle": "2022-07-26T11:06:16.413493Z",
     "shell.execute_reply": "2022-07-26T11:06:16.412629Z"
    },
    "papermill": {
     "duration": 0.048718,
     "end_time": "2022-07-26T11:06:16.415558",
     "exception": false,
     "start_time": "2022-07-26T11:06:16.366840",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[2434,  155],\n",
       "       [ 443,  646]])"
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "confusion_matrix(y_test,y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "cbe19105",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-26T11:06:16.492026Z",
     "iopub.status.busy": "2022-07-26T11:06:16.491442Z",
     "iopub.status.idle": "2022-07-26T11:06:20.875372Z",
     "shell.execute_reply": "2022-07-26T11:06:20.874187Z"
    },
    "papermill": {
     "duration": 4.424945,
     "end_time": "2022-07-26T11:06:20.877585",
     "exception": false,
     "start_time": "2022-07-26T11:06:16.452640",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.7/site-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function plot_confusion_matrix is deprecated; Function `plot_confusion_matrix` is deprecated in 1.0 and will be removed in 1.2. Use one of the class methods: ConfusionMatrixDisplay.from_predictions or ConfusionMatrixDisplay.from_estimator.\n",
      "  warnings.warn(msg, category=FutureWarning)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay at 0x7fa80f3cff90>"
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_confusion_matrix(model_svc,X_test,y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "id": "2bb1caaf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-26T11:06:20.955247Z",
     "iopub.status.busy": "2022-07-26T11:06:20.954490Z",
     "iopub.status.idle": "2022-07-26T11:06:20.970749Z",
     "shell.execute_reply": "2022-07-26T11:06:20.969040Z"
    },
    "papermill": {
     "duration": 0.058337,
     "end_time": "2022-07-26T11:06:20.973776",
     "exception": false,
     "start_time": "2022-07-26T11:06:20.915439",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.85      0.94      0.89      2589\n",
      "           1       0.81      0.59      0.68      1089\n",
      "\n",
      "    accuracy                           0.84      3678\n",
      "   macro avg       0.83      0.77      0.79      3678\n",
      "weighted avg       0.83      0.84      0.83      3678\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(classification_report(y_test,y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "1dfeafd8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-26T11:06:21.052236Z",
     "iopub.status.busy": "2022-07-26T11:06:21.051801Z",
     "iopub.status.idle": "2022-07-26T11:06:25.411044Z",
     "shell.execute_reply": "2022-07-26T11:06:25.409951Z"
    },
    "papermill": {
     "duration": 4.401122,
     "end_time": "2022-07-26T11:06:25.413447",
     "exception": false,
     "start_time": "2022-07-26T11:06:21.012325",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.7/site-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function plot_precision_recall_curve is deprecated; Function `plot_precision_recall_curve` is deprecated in 1.0 and will be removed in 1.2. Use one of the class methods: PrecisionRecallDisplay.from_predictions or PrecisionRecallDisplay.from_estimator.\n",
      "  warnings.warn(msg, category=FutureWarning)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<sklearn.metrics._plot.precision_recall_curve.PrecisionRecallDisplay at 0x7fa80f3caf50>"
      ]
     },
     "execution_count": 77,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_precision_recall_curve(model_svc,X_test,y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "id": "ba8366e6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-26T11:06:25.494489Z",
     "iopub.status.busy": "2022-07-26T11:06:25.493838Z",
     "iopub.status.idle": "2022-07-26T11:06:29.970793Z",
     "shell.execute_reply": "2022-07-26T11:06:29.970053Z"
    },
    "papermill": {
     "duration": 4.520121,
     "end_time": "2022-07-26T11:06:29.973023",
     "exception": false,
     "start_time": "2022-07-26T11:06:25.452902",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.7/site-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function plot_roc_curve is deprecated; Function :func:`plot_roc_curve` is deprecated in 1.0 and will be removed in 1.2. Use one of the class methods: :meth:`sklearn.metric.RocCurveDisplay.from_predictions` or :meth:`sklearn.metric.RocCurveDisplay.from_estimator`.\n",
      "  warnings.warn(msg, category=FutureWarning)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<sklearn.metrics._plot.roc_curve.RocCurveDisplay at 0x7fa80f4aefd0>"
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_roc_curve(model_svc,X_test,y_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b422743f",
   "metadata": {
    "papermill": {
     "duration": 0.039195,
     "end_time": "2022-07-26T11:06:30.052250",
     "exception": false,
     "start_time": "2022-07-26T11:06:30.013055",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## SVM using GridSearchCV"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "id": "5296b778",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-26T11:06:30.135083Z",
     "iopub.status.busy": "2022-07-26T11:06:30.133874Z",
     "iopub.status.idle": "2022-07-26T11:06:30.139292Z",
     "shell.execute_reply": "2022-07-26T11:06:30.138563Z"
    },
    "papermill": {
     "duration": 0.049947,
     "end_time": "2022-07-26T11:06:30.141404",
     "exception": false,
     "start_time": "2022-07-26T11:06:30.091457",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "base_model=SVC(gamma='auto')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "id": "e01c79c7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-26T11:06:30.222874Z",
     "iopub.status.busy": "2022-07-26T11:06:30.222202Z",
     "iopub.status.idle": "2022-07-26T11:06:30.227740Z",
     "shell.execute_reply": "2022-07-26T11:06:30.226765Z"
    },
    "papermill": {
     "duration": 0.048911,
     "end_time": "2022-07-26T11:06:30.229940",
     "exception": false,
     "start_time": "2022-07-26T11:06:30.181029",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "param_grid={'C':[0.1,0.5,1,2],'kernel':['rbf','poly'],'degree':[2,3,4,5]}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "a08a3b07",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-26T11:06:30.310293Z",
     "iopub.status.busy": "2022-07-26T11:06:30.309676Z",
     "iopub.status.idle": "2022-07-26T11:06:30.314465Z",
     "shell.execute_reply": "2022-07-26T11:06:30.313705Z"
    },
    "papermill": {
     "duration": 0.047199,
     "end_time": "2022-07-26T11:06:30.316430",
     "exception": false,
     "start_time": "2022-07-26T11:06:30.269231",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "grid_model_svm=GridSearchCV(base_model,param_grid=param_grid,cv=5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "id": "6b0f922d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-26T11:06:30.396872Z",
     "iopub.status.busy": "2022-07-26T11:06:30.396261Z",
     "iopub.status.idle": "2022-07-26T12:36:00.206050Z",
     "shell.execute_reply": "2022-07-26T12:36:00.204973Z"
    },
    "papermill": {
     "duration": 5369.892433,
     "end_time": "2022-07-26T12:36:00.247815",
     "exception": false,
     "start_time": "2022-07-26T11:06:30.355382",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GridSearchCV(cv=5, estimator=SVC(gamma='auto'),\n",
       "             param_grid={'C': [0.1, 0.5, 1, 2], 'degree': [2, 3, 4, 5],\n",
       "                         'kernel': ['rbf', 'poly']})"
      ]
     },
     "execution_count": 82,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "grid_model_svm.fit(X_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "id": "607c4e3e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-26T12:36:00.329023Z",
     "iopub.status.busy": "2022-07-26T12:36:00.328407Z",
     "iopub.status.idle": "2022-07-26T12:36:00.335709Z",
     "shell.execute_reply": "2022-07-26T12:36:00.334687Z"
    },
    "papermill": {
     "duration": 0.05053,
     "end_time": "2022-07-26T12:36:00.337748",
     "exception": false,
     "start_time": "2022-07-26T12:36:00.287218",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'C': 2,\n",
       " 'break_ties': False,\n",
       " 'cache_size': 200,\n",
       " 'class_weight': None,\n",
       " 'coef0': 0.0,\n",
       " 'decision_function_shape': 'ovr',\n",
       " 'degree': 2,\n",
       " 'gamma': 'auto',\n",
       " 'kernel': 'rbf',\n",
       " 'max_iter': -1,\n",
       " 'probability': False,\n",
       " 'random_state': None,\n",
       " 'shrinking': True,\n",
       " 'tol': 0.001,\n",
       " 'verbose': False}"
      ]
     },
     "execution_count": 83,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "grid_model_svm.best_estimator_.get_params()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "id": "0476a918",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-26T12:36:00.419914Z",
     "iopub.status.busy": "2022-07-26T12:36:00.419328Z",
     "iopub.status.idle": "2022-07-26T12:36:04.521794Z",
     "shell.execute_reply": "2022-07-26T12:36:04.520957Z"
    },
    "papermill": {
     "duration": 4.146241,
     "end_time": "2022-07-26T12:36:04.524177",
     "exception": false,
     "start_time": "2022-07-26T12:36:00.377936",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "y_pred=grid_model_svm.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "id": "e77d2088",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-26T12:36:04.606902Z",
     "iopub.status.busy": "2022-07-26T12:36:04.606298Z",
     "iopub.status.idle": "2022-07-26T12:36:04.613862Z",
     "shell.execute_reply": "2022-07-26T12:36:04.612902Z"
    },
    "papermill": {
     "duration": 0.051704,
     "end_time": "2022-07-26T12:36:04.616129",
     "exception": false,
     "start_time": "2022-07-26T12:36:04.564425",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[2430,  159],\n",
       "       [ 398,  691]])"
      ]
     },
     "execution_count": 85,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "confusion_matrix(y_test,y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "id": "ba91fbae",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-26T12:36:04.699115Z",
     "iopub.status.busy": "2022-07-26T12:36:04.698382Z",
     "iopub.status.idle": "2022-07-26T12:36:08.936692Z",
     "shell.execute_reply": "2022-07-26T12:36:08.935600Z"
    },
    "papermill": {
     "duration": 4.282449,
     "end_time": "2022-07-26T12:36:08.939273",
     "exception": false,
     "start_time": "2022-07-26T12:36:04.656824",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.7/site-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function plot_confusion_matrix is deprecated; Function `plot_confusion_matrix` is deprecated in 1.0 and will be removed in 1.2. Use one of the class methods: ConfusionMatrixDisplay.from_predictions or ConfusionMatrixDisplay.from_estimator.\n",
      "  warnings.warn(msg, category=FutureWarning)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay at 0x7fa80f482650>"
      ]
     },
     "execution_count": 86,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_confusion_matrix(grid_model_svm,X_test,y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "id": "a39b8274",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-26T12:36:09.023281Z",
     "iopub.status.busy": "2022-07-26T12:36:09.022881Z",
     "iopub.status.idle": "2022-07-26T12:36:09.039354Z",
     "shell.execute_reply": "2022-07-26T12:36:09.037432Z"
    },
    "papermill": {
     "duration": 0.061498,
     "end_time": "2022-07-26T12:36:09.041827",
     "exception": false,
     "start_time": "2022-07-26T12:36:08.980329",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.86      0.94      0.90      2589\n",
      "           1       0.81      0.63      0.71      1089\n",
      "\n",
      "    accuracy                           0.85      3678\n",
      "   macro avg       0.84      0.79      0.80      3678\n",
      "weighted avg       0.85      0.85      0.84      3678\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(classification_report(y_test,y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "id": "f3145e0e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-26T12:36:09.127470Z",
     "iopub.status.busy": "2022-07-26T12:36:09.127056Z",
     "iopub.status.idle": "2022-07-26T12:36:13.334311Z",
     "shell.execute_reply": "2022-07-26T12:36:13.333551Z"
    },
    "papermill": {
     "duration": 4.25294,
     "end_time": "2022-07-26T12:36:13.336334",
     "exception": false,
     "start_time": "2022-07-26T12:36:09.083394",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.7/site-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function plot_precision_recall_curve is deprecated; Function `plot_precision_recall_curve` is deprecated in 1.0 and will be removed in 1.2. Use one of the class methods: PrecisionRecallDisplay.from_predictions or PrecisionRecallDisplay.from_estimator.\n",
      "  warnings.warn(msg, category=FutureWarning)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<sklearn.metrics._plot.precision_recall_curve.PrecisionRecallDisplay at 0x7fa80f2e1490>"
      ]
     },
     "execution_count": 88,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYIAAAEGCAYAAABo25JHAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAAsTAAALEwEAmpwYAAA3c0lEQVR4nO3dd3wVVdrA8d+TQEiAAAIRCcVQpQaEgKBSREEEBRUR0LWwrq4uwr5i71gQrPu6FhS7+ypYcAWVIlJFROklIC1ECEVCDSUQkjzvHzO5pt8byM3NTZ7v53M/uTNzZuaZEO5z55wz54iqYowxpvwKCXQAxhhjAssSgTHGlHOWCIwxppyzRGCMMeWcJQJjjCnnKgQ6gKKqXbu2xsTEBDoMY4wJKsuXL9+nqlH5bQu6RBATE8OyZcsCHYYxxgQVEfm9oG1WNWSMMeWcJQJjjCnnLBEYY0w5Z4nAGGPKOUsExhhTzvktEYjI+yKyV0TWFbBdROTfIrJFRNaISAd/xWKMMaZg/rwj+BDoW8j2K4Bm7usOYIIfYzHGGFMAvz1HoKoLRSSmkCIDgY/VGQd7iYjUEJG6qrrbH/EsTTzAj5uSC9zesFYVrutY3x+nNsaYUi2QD5TVA3ZkW05y1+VJBCJyB85dAw0bNjytk634/SCvzduS77asKRmualeXShVCT+v4xhgTrILiyWJVnQhMBIiLizutmXT+3qMJf+/RJN9tb87fwgszN2Jz9BhjyqNA9hraCTTItlzfXWeMMaYEBTIRTANudnsPdQEO+6t9oDgdOJbG1FU7+XFzwe0NxhgTTPxWNSQik4CeQG0RSQKeBCoCqOpbwHSgH7AFOA4M91csZ2pp4gHeXrCVHzbszbH+t2f6El7R2hSMMcHNn72GhnnZrsAIf53/TKVnZHLthMWsSTqcY32XxjVJOphK0sFUMjKtUcEYE/yCorG4pD0xdR0f//zniK0XNqnFE1e1osU51QCYuHArz03/jSMn0vlqRRIhIcINnRsiIoEK2RhjTpslgmzSM5WYh77zLNeuGsaiB3vlqf7ZcSAVgC7j5njW9WpxNnWrR3iW96acoHrlioV2R91z+ATfr9+DAIM61qdymP1zGGNKnn3yZNPmyVme9/Pv60lM7Sr5ljtwLA2AOtUqUatKJdbvTiEjU1mTdIh/zd7EvI1OQ3L/tnV548Y/R87YeSiVSb9sZ/q63SQkH8txzKjIcPq2Oae4L8kYY7yyRAB5nh9IeK4fISEFV/O8cWMH3nDfT/p1Ow9/tZaLn5+Xp9yRk+ksSdjP2wu2epJDlvCKIVzcNIqYWpV5d9E27vy/5TzYtwV39cz/WQdjjPEXSwTAxz8net5vG9evSHX9SxL2e973PC+Ke3ufR9v61Yl56DsWbkpmYbZhLbo3j+KGzg24tGUdKoY6PXeTDh7n3UXbAHh+5m+cd05VerWoc4ZXZIwxvrNEAAzt1JBX52xm7Zg+RW7wHXdtW6KqVuLBK1p4Ptyz6x9bl1G9mnHeOZH57l//rMokju/vaZv464fLmPk/3ViaeBABbujcsNC7E2OMOVOiQTauQlxcnJbFyes/W7qdB6eszbP+zh5NiN91GFX4e4/GdGsWVaTjnjiVwYJNyfyScIANu1P4bU8KKSfS+eelzYiuEcEfKSdoElWFvm3qFtelGGNKIRFZrqpx+W6zRFB6TF+7m398soLz6kSSlpHJtn05G5Qb1qzMwgcuAUBVWbH9IKcylC6Na3nKbP7jCF+v2smCTcms25mS5xz1akSw81BqnvUdzz2LWy+MoUHNyhw8lkbXJrUIrxiKqpKpEGp3JcYENUsEQeiPlBNc8Nwc7r6kKTd2aUjXcXMBGNShPksS9uf4ML+qXTSrdxxi+4HjOY4RItCh4Vl0axZF3zbn0LxOVUSE2z5cSlpGJoM61GfcjA38kXIy3xiqhIVyLC0DgJG9mpKalsH1nRoQU6sKYRVscjtjgoklgjLgqtcWsXbnn085nx1Zib1Hcn6AV4+oSM/zohjQLpruzaPybbMoSO9XFrAl+Si3d2vMxIUJANSqEsZ+t6tsbn1a1eH1GzpQMVT4ff9xlv9+kPhdKZzKyOTWi2JoElX1NK7SGOMvlgjKgO37j9P/tR958bpYLmtZhwqhIRw4lsYN7yzhoSta0K1ZVLFV3xxPSyeiYigiwt6UE/zfL9sZ2D6aS19e4NP+t3drxKP9WxVLLMaY4mGJwBSryb9u56GvnIbtuHPPok296lzctDZt6lX3PG09+57uNKuTs6fUiVMZNkifMQFSWCKw7qOmyIZ2bsjQzoXPFNf7XwsJqxDCpS3OZuOeIyS4Dd8t61Zjyl1dbTgNY0oRa/EzxWrbuH6e92npmcxYt4ddh1Pp0LAGABt2pzBj7Z4ARWeMyY99LTPFSkRIHN+fNUmHSNx/nD6t6niqg2bF7+Hv/1nOvV+spk/rOkSGVwxwtMYYsDsC4yex9WswoF10jjaBy1v/Oahe2zHfM2Ptbk6mZwQiPGNMNnZHYErU6N7NeWX2JgDu+mQFDWtW5qO/dmZW/B5+2rKPk6cyGXh+NFe3r0eVSvbnaUxJsF5DJiA6PjO7wGcUsvRrew7b9h1n0x9HeOOGDjZMtzFnwLqPmlLprQVbGT/jN65uH81lrerQ87yzeXHmb3yUbXa43B7s24LhF8VQqUIIW/Ye5dfEAxw4msaV7aJpVMD8EcaYACYCEekLvAqEAu+q6vhc288F3geigAPAX1Q1qbBjWiIo+46eTGfC/C0M7dSQBjUr55g1rjB39WzCX7qcS1p6JtsPHKdd/erUqBzm52iNCQ4BSQQiEgpsAnoDScBSYJiqrs9W5gvgW1X9SER6AcNV9abCjmuJoHxKTctg9oY/GDVpJQCNaleha5NaXNHmHG5679cC90sc37+kQjSmVAvUA2WdgS2qmuAGMRkYCKzPVqYVMNp9Pw/42o/xmCAWERbKgHbRDGgXnWdb4vj+fLN6FyPdJDHikia8MW8rAJ8v28H1cQ1KNFZjgo0/E0E9YEe25STgglxlVgPX4lQfXQNEikgtVd2PMUVwVbtorsqWJLISwQNfruH7+D2MuzaWqMhKgQrPmFIt0M8R3Af0EJGVQA9gJ5CnY7mI3CEiy0RkWXJycu7NxuSxbVw/mkQ5jcc/bNhLp7E/EPfsbHq/soCMzODqIGGMv/kzEewEst+T13fXeajqLlW9VlXPBx511x3KfSBVnaiqcaoaFxVVtBm6TPkkIsy5tyffjbrYs27f0TQ27z1Kk0emo6r8kXICVSXYes4ZU9z82VhcAaex+FKcBLAUuEFV47OVqQ0cUNVMERkLZKjqE4Ud1xqLTVFlZippGU5Poj7/WlhguXOqhTPrnu5kZirVIyraXNGmTCmssdhvdwSqmg7cDcwCNgCfq2q8iDwtIgPcYj2BjSKyCagDjPVXPKb8CgkRwiuG0rxOJJNu7wJAzSp5u5XuSTlBu6e+5/xnZtP4kem8NmdzvtN6GlPW2ANlxvDngHiVKoRwMj0zx7Z7ezfnpq7nEhle0eZuNkHrjJ8jEJGzgYuAaCAVWAcsU9XMQnf0A0sEpiR88NM2nvpmfZ71fVrVoXerOpzf8CyaRFVBxBKDCQ6nnQhE5BLgIaAmsBLYC4QDzYEmwJfAy6qaUtxBF8QSgSlJT05dV+CQF/f2bs7IS5uVcETGnJ4zSQQvAq+p6vZ8tlUArgRCVXVKcQXrjSUCEyiLNu/j82U7mLZ6V47113WsT7+259C1cW0iwmwqTlM62aBzxhSzEZ+u4Ls1u/OstyEtTGnll0QgIsNV9YMziuw0WCIwpcnHPycyfe1uliQcyLF+9RN9qF7ZZmAzpYe/EsF2VS18BnM/sERgSqOXZm3k9Xlb8qyPqVWZd2+Jo3HtqvZcggmoM2kjWFPQJqC5qpb44C2WCExpduxkOq2fnFXg9pG9mlK3egTbDxznqnZ1aR1dvQSjM+XZmSSCP4DLgYO5NwGLVTXvUJB+ZonABIsdB47T7YV5hZYJqxDC1e2jefbqtoRVCPTQX6YsO5NhqL8FqqrqqnwOOv/MQzOm7GpQs7Kn8fh4Wjrfrt7NA1PW8Gi/loydvgGAtPRMPl+WxOfLklg7pg+R4dauYEqe9RoyJkB+SdhP5bAKXPX6Is+6Gy5oyMVNaxO/6zAxtaoQFVmJg8fT6N822u4YzBmx7qPGlGKJ+47R86X5Xstde349XhrczhqdzWkJyKBzxhjfxNSuQuL4/jzQ9zwA/ueyZozq1RSA4RfFeMp9tXInjR+Zzqodhzh2Mp2UE6cCEa4pg+yOwJgg8Mh/1/LpL3ke8Of5QW3pHxtN1Ur+nGzQlAVWNWRMGRHz0Hf5rm9cuwofDO/EubWqlHBEJlgUS9WQiEwsbNkY43+J4/t7Xhc1reVZn7DvGD1enM+8jXsDGJ0JVj7fEYhIR1VdXtBySbE7AmNyen3uZl76flOOdd2bR3FHt8Z0bVLL5lAwgFUNGVPmZWYqV7/5E2uSDudYP6hDfV6+vl2AojKlyWk/UCYi3wAFZgpVHVDQNmNMyQkJEabdfTHgzLY2bvoGEvcfZ8qKJCqHhfJo/5aEV7Qhsk3+vA0x0aOwnVV1QbFH5IXdERjjm/walsMqhHBTl3MZ1rkhTc+uGoCoTKAUS9WQiEQADVV1Y3EGV1SWCIzxzYFjacxev4cHp6zNd/s3d19M2/o26F15cca9hkTkKmAVMNNdbi8i03zYr6+IbBSRLSLyUD7bG4rIPBFZKSJrRKSfL/EYY7yrWSWMIZ0aenoZzbm3B/dffp5ne/ahLUz55mv30TFAZ+AQgDsIXaPCdhCRUOAN4AqgFTBMRFrlKvYY8Lmqng8MBd70MR5jTBE1iarKiEuasm3cn9+39h09GcCITGnh6+OIp1T1sEiObmje6pQ6A1tUNQFARCYDA4H1uY5RzX1fHcg5GawxptiJCPXPiiDpYCpxz/7AZS3rsCbpEEdOpHNB45p8OLxzoEM0JczXRBAvIjcAoSLSDBgFLPayTz1gR7blJOCCXGXGAN+LyEigCnBZfgcSkTuAOwAaNizxSdGMKXN+GN2DFo/PdN5v+MOzfv7GZGav/4O1SYeYvm4PsfWq8z+XNadhrcqBCtWUAJ8ai0WkMvAo0AdnUppZwDOqeqKQfa4D+qrq39zlm4ALVPXubGVGuzG8LCJdgfeANqqaWdBxrbHYmOJxOPUUby/YyqUtzyY0JIQ7/7OcPSn5/5e+vHUdRvZqRuvoauSqGTBBotgeKBORaoCq6hEfynYFxqjq5e7ywzg7j8tWJh4nWexwlxOALqpa4HPylgiM8Q9VpdmjM6hTLZyx17ThxKkM7vy/FTnK/O3iRjx2Ze6mPhMMzmSGsqwDdALeByLd5cPAX70MMbEUaCYijYCdOI3BN+Qqsx24FPhQRFoC4UCyLzEZY4qXiLDluZwd9xLH9+e9Rdt45lunae/dRdtoenZVhna2KtqyxNdeQ+8B/1DVGFWNAUYAHxS2g6qmA3fjVCNtwOkdFC8iT4tI1hPJ9wK3i8hqYBJwqwbbmBfGlHG3XdyIxPH9Ca/ofFw89NVaHv4q/2cTTHDytY1gpdvFM/u6FarawW+RFcCqhowJjMxMZez0Dby3aJtn3a+PXsrZkeFkZioHj6dRq2qlAEZoCnMmYw1lfdAvEJG3cb61KzAEmF+cQRpjSreQEOHxK1uRkal8uDgRgM5j5+QpV7tqGAsfuITKYTZZTrDwNtbQvEL2VVXtVfwhFc7uCIwJvNS0DFo+MdOzXK9GBDsPpXqWK4TkbW8wgXXadwSqeol/QjLGBLOIsFASx/fPs377/uN0f3Ee6ZnKf35O5KauMSUfnCmyosxQ1l9EHhCRJ7Je/gzMGBN8GtaqzL+HOc2Jj0+ND3A0xle+Djr3Fk67wEicB8oGA+f6MS5jTJC6sm1dz/uYh77jg5+2YZ0BSzdfew2tUdXYbD+rAjNUtZv/Q8zJ2giMKf2+XbOLuz9dme82G/46MIpj8vqsVqDjIhINnALqFlLeGFOOXRkbzbLHLmPEJU3ybLPhr0sfX/t3fSsiNYAXgRU4XUjf9VdQxpjgV7tqJe6/vAX3X97Csy5r1rSFm5Lp3jwqUKGZXHy6I1DVZ1T1kKpOwWkbaKGqj/s3NGNMWfP0wNYA3Pz+r6zcfjDA0ZgshSYCEbk29wvoD1zqvjfGGJ8NyzZG0TVvLmZt0uEARmOyeLsjuKqQ15X+Dc0YU9ZUDA1hzZg+nuWrXl/ExIVbAxiRgSIOQ10aWK8hY4KfqtLo4eme5bVj+hAZXjGAEZV9xdFryBhjio2IkDi+P51jagLw+rwtAY6ofLNEYIwJmBZ1IwF4e0ECMQ99x5hp8TnGLDIlwxKBMSZgnh7Yhlu6/jlIwYeLE7lo/NwARlQ++TrERGUReVxE3nGXm4mINRYbY87YUwPbsOHpvky6vYtnXcxD3zFuxgbSMwqcvtwUI1/vCD4ATgJd3eWdwLN+icgYU+5EhIXStUktPv97V8+6txck0PTRGYybviGAkZUPvo41tExV47LPVCYiq1W1nd8jzMV6DRlT9u08lJqjiigqshJXxtZlaKeGnHdOZAAjC17F0WsoTUQicIaWQESa4NwhGGNMsatXI4LE8f1pHFUFgOQjJ/ngp0Qu/9+FvDjrN/amnGD/0ZOsSTrE3iMnAhxt8PP1jqAP8CjQCvgeuAhnovn5XvbrC7wKhALvqur4XNv/BWRNflMZOFtVaxR2TLsjMKZ82bjnCCknTjH4rZ8LLHNZyzq8e0u+X3aNq7A7Ap8fKBORWkAXnPkIlqjqPi/lQ4FNQG8gCVgKDFPV9QWUHwmcr6p/Ley4lgiMKb+OnUyn9ZOzAGgdXY34XSk5tv8wujtNz7aqo/yc9lSV2Q7wDfApME1Vj/l43s7AFlVNcI8xGRgI5JsIgGHAkz4e2xhTDlWpVCHPFJnv/pjAs985DcqXvbIQgPn39SSmdpUSjy9Y+dpG8BLQDVgvIl+KyHUiEu5ln3rAjmzLSe66PETkXKARkG8HYhG5Q0SWiciy5ORkH0M2xpQHf+vWmG3j+hEZ/uf32qvf/IlDx9MCGFVw8XUY6gWq+g+gMfA2cD2wtxjjGAp8qaoZBZx/oqrGqWpcVJSNYW6MyUlEWDvmcjaPvQKAQ8dP0f7p2azcftCmyfRBUSavjwAGAXcCnYCPvOyyE2iQbbm+uy4/Q4FJvsZijDH5qRgaworHe3uWr3lzMd1fnGfJwAtfnyz+HNgA9AJeB5qo6kgvuy0FmolIIxEJw/mwn5bPsVsAZwEFdwkwxhgf1awSxux7ulMhRADYcSCVRg9Pt4lwCuHrHcF7OB/+d6rqPFX1+ty3qqYDdwOzcJLI56oaLyJPi8iAbEWHApPVUrYxppg0qxPJluf6sejBSzzrrnlzMWnpNmRFfgrtPioivVR1bkGzkanqV36LrADWfdQYU1RZcyUDbBvXDxEJYDSBcSZPFvdwf9oMZcaYoDXn3h6e99v2+doDvvzw9cniRqq6zdu6kmB3BMaY0zFh/laen/kbAGvG9KFaOZsRrTjGGpqSz7ovTz8kY4wpWRc2qeV5HzvmezIyrVkyS6FPFrs9eloD1XO1E1QDvD1QZowxpUa7BjVIeK4fjR9x5kredSiVBjUrBziq0sHbHcF5OG0BNcjZPtABuN2vkRljTDELCRFuu7gRADe8uyTA0ZQehd4RqOpUYKqIdFVV6+dvjAl6V8bW5b1F29hxIJUV2w/SoeFZgQ4p4Aq9IxCRB9y3N4jIv3O/SiA+Y4wpVuc3PIv3b3XaTK99czF/pNh8Bt5GH82aI8666RhjyoxeLep43r84ayMvDS7xyRZLFW9VQ9+4Pz3jColICFBVVVMK3NEYY0q5jc/25bzHZrJ6x6FAhxJwvo419KmIVBORKsA6nOGo7/dvaMYY4z+VKoQSXjGEzXuPEvPQd7wxb0u5HYLC1+cIWrl3AFcDM3DmDrjJX0EZY0xJ+ODWzp73L87ayLuLEgIYTeD4mggqikhFnEQwTVVP4U5kb4wxwaprk1okju/PXT2bAPDCzI3845PlAY6q5PmaCN4GEoEqwEJ3RjFrIzDGlAkP9m3B0wNbAzB97R5e/n5jgCMqWb7OUPZvVa2nqv3U8TtwidcdjTEmSNzcNYa/XuQ8bLb5j6MBjqZk+dpYXF1EXsmaN1hEXsa5OzDGmDLjiata0bxOVWbG72FW/J5Ah1NifK0aeh84gjNX8fU41UIf+CsoY4wJlNu7NQbgqWnxAY6k5PiaCJqo6pOqmuC+nsKZyN4YY8qUwXENiKxUgVpVKwU6lBLjayJIFZGLsxZE5CIg1T8hGWNMYDU/J5K1Ow+zbufhQIdSInxNBHcCb4hIoogk4kxg/3e/RWWMMQG0cc8RAK58bRHlYTp1r4lARNoDzXAmmY8FYlX1fFVd48O+fUVko4hsEZGHCihzvYisF5F4Efm0iPEbY0yxW/NkH9o3qAHAup1lv6e8t9FHnwA+BwYB3wFDfB1jSERCgTeAK4BWwDARaZWrTDPgYeAiVW0N/E9RL8AYY4pbSIhwX5/zALjq9UVklvHZzLzdEQwB2qvqMKATcEcRjt0Z2OI2LqcBk4GBucrcDryhqgcBVHVvEY5vjDF+c1HTWkRWcsblTD56MsDR+Je3RHBSVY8DqOp+H8pnVw/YkW05yV2XXXOguYj8JCJLRKRvEY5vjDF+IyI82r8lAMM/WBrgaPzL2wd7YxGZ5r6+AZpkW55WDOevgNP+0BMYBrwjIjVyFxKRO7IeZktOTi6G0xpjjHdDOjUAYP3uFO75bFVgg/EjbxPT5K7KeakIx94JNMi2XN9dl10S8Is7iN02EdmEkxhypF9VnQhMBIiLiyvblXXGmFJDRHj35jj+9vEy/rtyJ0sTD7DowV6BDqvYFXpHoKoLCnt5OfZSoJmINBKRMJxeR7nvIr7GuRtARGrjVBWVz3FgjTGl0mWt6vDzw86Hf9LBVLq9MJeDx9ICHFXx8tZr6BsRucodgjr3tsYi8rSI/DW/fVU1HbgbmIUz5eXnqhrv7jPALTYL2C8i64F5wP1uW4QxxpQadatHsPB+Z5zNHQdS+fTX7QGOqHhJYQ9LiMg5wGic7qMHgGQgHIgBtgKvq+pU/4f5p7i4OF22zKZQNsaUvIxMpckj0wFIeK4fISES4Ih8JyLLVTUuv23e5izeAzwAPCAiMUBdnKElNmX1JjLGmPIiNESoVCGEk+mZHE1Lp1p4nsqSoORzd1BVTVTVn1V1lSUBY0x5df/lzoNmp8rQ/MZFeS7AGGPKvaza9Oem/xbYQIqRJQJjjCmCGy5oCMCUFUnsTTkR4GiKhyUCY4wpgiqVKnBlbF0APlu6w0vp4ODrVJUXichsEdkkIgkisk1ErL+/MaZcuqKNkwhenr0pwJEUD1/vCN4DXgEuxhl8Ls79aYwx5U7/2Lo0O7sqAKt2HApsMMXA10RwWFVnqOpeVd2f9fJrZMYYU4rd3t2ZrffqN35izoY/AhzNmfE1EcwTkRdFpKuIdMh6+TUyY4wpxa6Pa0Dr6GoA3PZRcD/k6msiuACnOug54GX3VZQB6Iwxpsz5blQ3oquHA/DpL9uDdlpLb6OPAqCql/g7EGOMCUaPX9mKuz5ZwSP/Xcu+oycZdWmzQIdUZL72GqouIq9kzQkgIi+LSHV/B2eMMaXdFW3rej78Jy5MICMIp7X0tWrofeAIcL37SgE+8FdQxhgTTEb3bk7tqmEcPZnORePnBjqcIvM1ETRR1Sfd+YcTVPUpoLE/AzPGmGDyzs3OwJ57Uk4Q89B3LE08EOCIfOdrIkgVkYuzFkTkIpxRSI0xxgDnNzyLZY9d5lke/NbPAYymaHxNBHcBb4hIooj8DrwO3Om/sIwxJvjUrlqJxPH9Pcsf/rQtgNH4zqdE4A493Q6IBdqq6vmqutq/oRljTHD68QGno+W8jclB0aW00O6jIvIXVf0/ERmdaz0AqvqKH2Mzxpig1KBmZSLDK7BgUzKPfb2Osde0DXRIhfJ2R1DF/RlZwMsYY0w+Jt/RBYDkIycDHIl33qaqfNv9+VTJhGOMMWVD6+jqnFcnkh837wt0KF75+kDZCyJSTUQqisgcEUkWkb/4sF9fEdkoIltE5KF8tt/qHmuV+/rb6VyEMcaURodS00g9lcHiLaU7Gfjaa6iPqqYAVwKJQFPg/sJ2EJFQ4A3gCqAVMExEWuVT9DNVbe++3vU5cmOMKeWec9sG5v62N8CRFM7XRJBVhdQf+EJVD/uwT2dgi/sAWhowGRh4GjEaY0xQurRlHQCmrt4V4EgK52si+FZEfgM6AnNEJArwNllnPSD7PG5J7rrcBonIGhH5UkQa5HcgEbkja5yj5ORkH0M2xpjAi64eTvKRkyz/vfQ+aezrcwQPARcCcap6CjhG8Xy7/waIUdVYYDbwUQHnn6iqcaoaFxUVVQynNcaYktHfnd/4nYWl9+Eyb88R9FLVuSJybbZ12Yt8VcjuO4Hs3/Dru+s8cs1y9i7wgreAjTEmmDzavxVfr9rFzPg9gQ6lQN7mI+gBzAWuymebUngiWAo0E5FGOAlgKHBD9gIiUldVd7uLA4ANvgRtjDHB5PjJdAC+WLaDwXH51oAHlLfnCJ50fw4v6oFVNV1E7gZmAaHA+6oaLyJPA8tUdRowSkQGAOnAAeDWop7HGGNKuxn/7E73F+cx6dftwZcIsojIc8ALqnrIXT4LuFdVHytsP1WdDkzPte6JbO8fBh4uYszGGBNUGtSMAGDF9kOkpmUQERYa4Ihy8rXX0BVZSQBAVQ8C/fwSkTHGlDEiwuCO9QEY8emKAEeTl6+JIFREKmUtiEgEUKmQ8sYYY7J5pF9LwHm4bMveIwGOJidfE8EnOM8P3CYit1FIV09jjDF5nVUljGcGtgZg2qrS9YCZr88RPA88C7R0X8+oqnX1NMaYIhjkVg/9e+4WZq//I8DR/MnXOwJwunbOVNX7gB9FxIahNsaYIqgcVoH7+jQHnLaC0jJEta+jj94OfAm87a6qB3ztp5iMMabMurtXM+pWDyctPZNOY39g275jgQ7J5zuCEcBFQAqAqm4GzvZXUMYYU5b9MLoHHc89C4DJS7cHOBrfE8FJdwRRAESkAs6TxcYYY4qoSqUKTLnrQgC+W7PbS2n/8zURLBCRR4AIEekNfIEzYJwxxpjTFF4xhFpVwgIdhs+J4EEgGVgL/B3naeFCnyo2xhhTuE4xNVmddJi9Kd5G9fcvr4nAnWlsg6q+o6qDVfU6971VDRljzBloXLsKAJ2fm8Mxd2C6QPCaCFQ1A9goIg1LIB5jjCk3nryqtef9bR8tDVgcvlYNnQXEuxPXT8t6+TMwY4wp60JChN+e6QvAkoQDZGYGpqLFp9FHgcf9GoUxxpRT4RVD6dXibOb+tpekg6k0rFW5xGPwNkNZOHAn0BSnofg9VQ1cRZYxxpRBfVufw9zf9vLbnpSAJAJvVUMfAXE4SeAK4GW/R2SMMeVMuwY1APhwcWJAzu+taqiVqrYFEJH3gF/9H5IxxpQvzetUBWDx1v2oau654f3O2x3Bqaw3ViVkjDH+ISK0d+8K5mzYW+Ln95YI2olIivs6AsRmvReRlJII0BhjyoMH+p4HwIQFW0v83IUmAlUNVdVq7itSVStke1/N28FFpK+IbBSRLSLyUCHlBomIikjc6VyEMcYEuwub1Ca6ejg1IiqW+LmLMh9BkbhPJL+B08jcChgmIq3yKRcJ/BP4xV+xGGNMMKhYIYQ5v+3lzflbSvS8fksEQGdgi6omuCOXTgYG5lPuGeB5ILCDbRhjTID1bXMOAC/M3MjUVTtL7Lz+TAT1gB3ZlpPcdR4i0gFooKrfFXYgEblDRJaJyLLk5OTij9QYY0qBh69oyYQbOwDwz8mrSuxJY38mgkKJSAjwCnCvt7KqOlFV41Q1Lioqyv/BGWNMgFzRti5hFZyP5rcXJpTIOf2ZCHYCDbIt13fXZYkE2gDzRSQR6AJMswZjY0x5t+qJ3gCkpWeWyPn8mQiWAs1EpJGIhAFDAc9Adap6WFVrq2qMqsYAS4ABqrrMjzEZY0ypF14hFICVOw6WyPn8lgjcB9DuBmYBG4DPVTVeRJ4WkQH+Oq8xxgS7rAeLDx5LK7xgMfF19NHToqrTcWYzy77uiQLK9vRnLMYYEyxEhG7NanPkRMkM6BCwxmJjjDEFS0vPZNWOQ5zK8H87gSUCY4wpheqdFQHAiVMZfj+XJQJjjCmFWtX1OopPsbFEYIwxpdi+o/5vMLZEYIwxpVCNymEArEk65PdzWSIwxphSqFPMWYAz1IS/WSIwxphSqGFNZ+7iqMhKfj+XJQJjjCmFRIQhcQ1IPnKSDD8PPmeJwBhjSqlTmc4zBAnJR/16Hr8+WVxSTp06RVJSEidO2JQGpnQIDw+nfv36VKxY8rNNmbLj0hZ1+GrFTl6ds5nXb+jgt/OUiUSQlJREZGQkMTExSNYgHcYEiKqyf/9+kpKSaNSoUaDDMUHsgsY1Afh2zW7GXXuKyHD/fLEoE1VDJ06coFatWpYETKkgItSqVcvuUM0Zq121El3cZLDsd/+NRFomEgFgScCUKvb3aIrLQ1e0dN74sb24zCQCY4wxp8cSQTH5448/uOGGG2jcuDEdO3aka9eu/Pe//8237K5du7juuuvy3dazZ0+WLXPm5nn//fdp27YtsbGxtGnThqlTp/ot/sTERNq0aVPg9pdeeokWLVrQvn17OnXqxMcff8xTTz3Fww8/nKPcqlWraNmyZb7HuO6660hISMhRVkSYOXNmjnKhoaG0b9+eNm3aMHjwYI4fP34GV+bU2Y8aNYqmTZsSGxvLihUr8i03adIkz++7b9++7Nu3D4D777+fFi1aEBsbyzXXXMOhQ4cAWLt2LbfeeusZxWaMNyHuzeW8jXv9dw6/HbkcUVWuvvpqunfvTkJCAsuXL2fy5MkkJSXlKZuenk50dDRffvllocdMSkpi7NixLFq0iDVr1rBkyRJiY2PPONb09KKPb/7WW28xe/Zsfv31V1atWsWcOXNQVYYNG8Znn32Wo+zkyZMZNmxYnmPEx8eTkZFB48aNPesmTZrExRdfzKRJk3KUjYiIYNWqVaxbt46wsDDeeuutIsec3YwZM9i8eTObN29m4sSJ3HXXXXnKpKen889//pN58+axZs0aYmNjef311wHo3bs369atY82aNTRv3pxx48YB0LZtW5KSkti+ffsZxWdMYVq6g8+F+LG6sUz0GsruqW/iWb8rpViP2Sq6Gk9e1brA7XPnziUsLIw777zTs+7cc89l5MiRAHz44Yd89dVXHD16lIyMDD766COuvPJK1q1bR2pqKsOHD2f16tW0aNGC1NRUAPbu3UtkZCRVq1YFoGrVqp73W7duZcSIESQnJ1O5cmXeeecdWrRowTfffMOzzz5LWloatWrV4pNPPqFOnTqMGTOGrVu3kpCQQMOGDfnf//1f7rzzTs+38wkTJhAdHU1GRga33347ixcvpl69ekydOpWIiAiee+455s+fT7Vqzh9ktWrVuOWWWwA466yz+OWXX7jgggsA+Pzzz5k1a1ae39Enn3zCwIEDPcuqyhdffMHs2bPp1q0bJ06cIDw8PM9+3bp1Y82aNT7+S+Vv6tSp3HzzzYgIXbp04dChQ+zevZu6devmiEdVOXbsGLVq1SIlJYWmTZsC0KdPH0+5Ll265EjiV111FZMnT+aBBx44oxiNKUjF0BCqhIX6dV4CuyMoBvHx8XToUHgf3xUrVvDll1+yYMGCHOsnTJhA5cqV2bBhA0899RTLly8HoF27dtSpU4dGjRoxfPhwvvnmG88+d9xxB6+99hrLly/npZde4h//+AcAF198MUuWLGHlypUMHTqUF154wbPP+vXr+eGHH5g0aRKjRo2iR48erF69mhUrVtC6tZPkNm/ezIgRI4iPj6dGjRpMmTKFlJQUjhw5kuObfHbDhg1j8uTJACxZsoSaNWvSrFmzPOV++uknOnbs6FlevHgxjRo1okmTJvTs2ZPvvvsuzz7p6enMmDGDtm3b5tk2ZMgQ2rdvn+f18ccf5ym7c+dOGjRo4FmuX78+O3fuzFGmYsWKTJgwgbZt2xIdHc369eu57bbb8hzr/fff54orrvAsx8XF8eOPP+b3qzGm2KRlZPLVip3eC56mMndHUNg395IyYsQIFi1aRFhYGEuXLgWc6oWaNWvmKbtw4UJGjRoFQGxsrKf6JzQ0lJkzZ7J06VLmzJnDPffcw/Lly7nvvvtYvHgxgwcP9hzj5MmTgFOdNGTIEHbv3k1aWlqOPuwDBgwgIsKZ6GLu3LmeD8zQ0FCqV6/OwYMHadSoEe3btwegY8eOJCYmer3WIUOGcOGFF/Lyyy8XWC0EsHv3bqKiojzLkyZNYujQoQAMHTqUjz/+mEGDBgGQmprqiaNbt275fiDnrpI6U6dOnWLChAmsXLmSxo0bM3LkSMaNG8djjz3mKTN27FgqVKjAjTfe6Fl39tlns2vXrmKNxZjcGtas7NdhJvyaCESkL/AqEAq8q6rjc22/ExgBZABHgTtUdb0/Y/KH1q1bM2XKFM/yG2+8wb59+4iLi/Osq1KlSpGPKyJ07tyZzp0707t3b4YPH87o0aOpUaMGq1atylN+5MiRjB49mgEDBjB//nzGjBlTpPNXqvTn4FahoaGkpqZSrVo1qlatSkJCQr53BQ0aNKBRo0YsWLCAKVOm8PPPP+d77IiICE+/+oyMDKZMmcLUqVMZO3as5wGsI0eOEBkZ6WkjKMyQIUPYuHFjnvWjR4/m5ptvzrGuXr167Nixw7OclJREvXr1cpTJOl+TJk0AuP766xk//s8/1w8//JBvv/2WOXPm5OgaeuLECU+CNcZfWkVXZ0UwPkcgIqHAG8AVQCtgmIi0ylXsU1Vtq6rtgReAV/wVjz/16tWLEydOMGHCBM86X3u6dO/enU8//RTA0yAJTs+i7L1bVq1axbnnnku1atVo1KgRX3zxBeDUba9evRqAw4cPez7gPvroowLPeemll3pizcjI4PDhw4XG+PDDDzNixAhSUpy2l6NHj+aoghk2bBj33HMPjRs3pn79+vkeo2XLlmzZsgWAOXPmEBsby44dO0hMTOT3339n0KBBBfayys9nn33GqlWr8rxyJwFw7oY+/vhjVJUlS5ZQvXr1HO0D4CSL9evXk5ycDMDs2bM9vZ9mzpzJCy+8wLRp06hcuXKO/TZt2lRobytjisOJUxnsPJTK4eOn/HJ8f7YRdAa2qGqCqqYBk4GB2QuoavZW3Sr49ZEJ/xERvv76axYsWECjRo3o3Lkzt9xyC88//7zXfe+66y6OHj1Ky5YteeKJJzz16KdOneK+++7zdNn87LPPePXVVwGn4fW9996jXbt2tG7d2tOtdMyYMQwePJiOHTtSu3btAs/56quvMm/ePNq2bUvHjh1Zv77wm7C77rqLSy65hE6dOtGmTRu6detGSMiffzqDBw8mPj6+wGohgP79+zN//nzAqRa65pprcmwfNGhQnt5DxaVfv340btyYpk2bcvvtt/Pmm296tmVVQUVHR/Pkk0/SvXt3YmNjWbVqFY888ggAd999N0eOHKF37960b98+R6eAefPm0b9/f7/EbUyW1tFOR41Pf/VPDzVR9c9nr4hcB/RV1b+5yzcBF6jq3bnKjQBGA2FAL1XdXNhx4+LiNKuffZYNGzYU2HfdlA6pqalccskl/PTTT4SGhgY6nGJx8uRJevTowaJFi6hQIW8tq/1dmuKyN+UE/567mf5to+napNZpHUNElqtqXH7bAt5rSFXfUNUmwIPAY/mVEZE7RGSZiCzLunU3wSUiIoKnnnoqT2+dYLZ9+3bGjx+fbxIwpjidXS2cZ69ue9pJwBt//gXvBBpkW67vrivIZGBCfhtUdSIwEZw7guIK0JSsyy+/PNAhFKtmzZrl21XWmGDjzzuCpUAzEWkkImHAUGBa9gIikv1/UX+g0GqhwvirisuY02F/jyaY+O2OQFXTReRuYBZO99H3VTVeRJ4GlqnqNOBuEbkMOAUcBG45nXOFh4ezf/9+G4ralApZ3WHze1LamNLIb43F/pJfY7HNUGZKG5uhzJQ2hTUWl4lWrooVK9pMUMYYc5oC3mvIGGNMYFkiMMaYcs4SgTHGlHNB11gsIsnA76e5e21gXzGGEwzsmssHu+by4Uyu+VxVjcpvQ9AlgjMhIssKajUvq+yaywe75vLBX9dsVUPGGFPOWSIwxphyrrwlgomBDiAA7JrLB7vm8sEv11yu2giMMcbkVd7uCIwxxuRiicAYY8q5MpkIRKSviGwUkS0i8lA+2yuJyGfu9l9EJCYAYRYrH655tIisF5E1IjJHRM4NRJzFyds1Zys3SERURIK+q6Ev1ywi17v/1vEi8mlJx1jcfPjbbigi80Rkpfv33S8QcRYXEXlfRPaKyLoCtouI/Nv9fawRkQ5nfFJVLVMvnCGvtwKNcaa/XA20ylXmH8Bb7vuhwGeBjrsErvkSoLL7/q7ycM1uuUhgIbAEiAt03CXw79wMWAmc5S6fHei4S+CaJwJ3ue9bAYmBjvsMr7k70AFYV8D2fsAMQIAuwC9nes6yeEfQGdiiqgmqmoYz89nAXGUGAh+5778ELpXgnsjA6zWr6jxVPe4uLsGZMS6Y+fLvDPAM8DxQFsYo9+WabwfeUNWDAKq6t4RjLG6+XLMC1dz31YFdJRhfsVPVhcCBQooMBD5WxxKghojUPZNzlsVEUA/YkW05yV2XbxlVTQcOA/6ZDLRk+HLN2d2G840imHm9ZveWuYGqfleSgfmRL//OzYHmIvKTiCwRkb4lFp1/+HLNY4C/iEgSMB0YWTKhBUxR/797VSbmIzC+E5G/AHFAj0DH4k8iEgK8Atwa4FBKWgWc6qGeOHd9C0WkraoeCmRQfjYM+FBVXxaRrsB/RKSNqmYGOrBgURbvCHYCDbIt13fX5VtGRCrg3E7uL5Ho/MOXa8adFvRRYICqniyh2PzF2zVHAm2A+SKSiFOXOi3IG4x9+XdOAqap6ilV3QZswkkMwcqXa74N+BxAVX8GwnEGZyurfPr/XhRlMREsBZqJSCMRCcNpDJ6Wq8w0/pwf+TpgrrqtMEHK6zWLyPnA2zhJINjrjcHLNavqYVWtraoxqhqD0y4yQFWX5X+4oODL3/bXOHcDiEhtnKqihBKMsbj5cs3bgUsBRKQlTiJILtEoS9Y04Ga391AX4LCq7j6TA5a5qiFVTReRu4FZOD0O3lfVeBF5GlimqtOA93BuH7fgNMoMDVzEZ87Ha34RqAp84baLb1fVAQEL+gz5eM1lio/XPAvoIyLrgQzgflUN2rtdH6/5XuAdEbkHp+H41mD+Yicik3CSeW233eNJoCKAqr6F0w7SD9gCHAeGn/E5g/j3ZYwxphiUxaohY4wxRWCJwBhjyjlLBMYYU85ZIjDGmHLOEoExxpRzlgiM34lIhoisEpF1IvKNiNQo5uMnun3mEZGjBZSJEJEFIhIqIjEikurGtF5E3nKfRC7KOeNE5N/u+54icmG2bXeKyM1nck3uccaIyH1eynwoItcV4ZgxBY1qmavcWBHZkfv3KSJ3i8hffT2fCQ6WCExJSFXV9qraBue5jREBiOGvwFeqmuEub1XV9kAszoiVVxflYKq6TFVHuYs9gQuzbXtLVT8+04AD7BucAd9ye5+yP5ZPuWOJwJS0n3EHyBKRJiIyU0SWi8iPItLCXV9HRP4rIqvd14Xu+q/dsvEickcRz3sjMDX3SnfQwcVAU/fb8lz5c86Ghu55B7t3M6tFZKG7rqeIfCvOXBZ3Ave4dxjdsr7Ji0gLEfk161zu8de67zu6dyjLRWSWeBk9UkRuF5GlbgxTRKRyts2XicgyEdkkIle65UNF5EV3nzUi8vei/LJUdUl+T6u6I9gmikh+ScIEKUsEpsSISCjOUABZT/1OBEaqakfgPuBNd/2/gQWq2g5nXPZ4d/1f3bJxwCgR8WnEWHdogsaqmpjPtspuTGuB14CPVDUW+MSNA+AJ4HI3nhxPY7vHfAv4l3vX82O2bb8BYSLSyF01BPhMRCq657rOvZ73gbFeLuMrVe3kxrABZ3ydLDE43977A2+JSLi7/bCqdgI6AbdniyPr2qNFZLqX8+ZnGdDtNPYzpVSZG2LClEoRIrIK505gAzBbRKriVKdkDXkBUMn92Qu4GcCtyjnsrh8lIte47xvgDKbmy/AJtYFDudY1cWNSYKqqzhCR/wDXutv/A7zgvv8J+FBEPge+8uF82X2OkwDGuz+HAOfhDIg32732UMDbWDFtRORZoAbOUCGzsp/DHWlzs4gkAC2APkBstvaD6ji/r01ZO6nqLpyhCopqr3sOU0ZYIjAlIVVV27vfvmfhtBF8CBxy6+m9EpGewGVAV1U9LiLzcQYX8+n8+ZTd6uu5VfVOEbkA5xv3chHp6ON5AT7DSXZfOYfSzSLSFohX1a5FOM6HwNWqulpEbsUdWC4rxNwh48xeNVJVsycMpHimZQ3H+Z2aMsKqhkyJceuXR+EMEnYc2CYig8EzD2s7t+gcnOk0s+q6q+N8oz3oJoEWOMNK+3reg0CoW2VSmMX8OQDhjcCPbgxNVPUXVX0CZ1TLBrn2O4Iz7HV+596KM/jb4zhJAWAjECXO2PmISEURae0ltkhgt1utdGOubYNFJEREmuBM6bgRJ+He5ZZHRJqLSBUv5/BVc8BrzyMTPCwRmBKlqiuBNTiTidwI3CYiq3HaAbKmIPwncInbsLocp1fPTKCCiGzAqWZZUsRTfw9c7KXMSGC4iKwBbnLjAHhRRNa63S4X48ybm903wDVZjcX5HPcz4C/8OWZ+Gs7w58+7176KbL2OCvA48AtONdVvubZtB37FmXXuTlU9AbwLrAdWuHG/Ta4agMLaCETkBXFGvqwsIkkiMibb5ouA2V7iNUHERh815YI401beo6o3BTqWYCbOvBaj7fdYttgdgSkXVHUFMM/tuWROX22cuxNThtgdgTHGlHN2R2CMMeWcJQJjjCnnLBEYY0w5Z4nAGGPKOUsExhhTzv0/Goj8+yL9UGQAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_precision_recall_curve(grid_model_svm,X_test,y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "id": "74db189e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-26T12:36:13.422618Z",
     "iopub.status.busy": "2022-07-26T12:36:13.421705Z",
     "iopub.status.idle": "2022-07-26T12:36:17.607980Z",
     "shell.execute_reply": "2022-07-26T12:36:17.606867Z"
    },
    "papermill": {
     "duration": 4.23204,
     "end_time": "2022-07-26T12:36:17.610227",
     "exception": false,
     "start_time": "2022-07-26T12:36:13.378187",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.7/site-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function plot_roc_curve is deprecated; Function :func:`plot_roc_curve` is deprecated in 1.0 and will be removed in 1.2. Use one of the class methods: :meth:`sklearn.metric.RocCurveDisplay.from_predictions` or :meth:`sklearn.metric.RocCurveDisplay.from_estimator`.\n",
      "  warnings.warn(msg, category=FutureWarning)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<sklearn.metrics._plot.roc_curve.RocCurveDisplay at 0x7fa80f132c10>"
      ]
     },
     "execution_count": 89,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_roc_curve(grid_model_svm,X_test,y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6979e666",
   "metadata": {
    "papermill": {
     "duration": 0.041912,
     "end_time": "2022-07-26T12:36:17.694698",
     "exception": false,
     "start_time": "2022-07-26T12:36:17.652786",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "53a03c20",
   "metadata": {
    "papermill": {
     "duration": 0.053093,
     "end_time": "2022-07-26T12:36:17.796938",
     "exception": false,
     "start_time": "2022-07-26T12:36:17.743845",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# K Nearest Neighbors"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "id": "3fcb87eb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-26T12:36:17.889319Z",
     "iopub.status.busy": "2022-07-26T12:36:17.888649Z",
     "iopub.status.idle": "2022-07-26T12:36:17.895924Z",
     "shell.execute_reply": "2022-07-26T12:36:17.895163Z"
    },
    "papermill": {
     "duration": 0.053485,
     "end_time": "2022-07-26T12:36:17.898091",
     "exception": false,
     "start_time": "2022-07-26T12:36:17.844606",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X=df_final.drop('target',axis=1)\n",
    "y=df_final['target']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "id": "236958d4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-26T12:36:17.986473Z",
     "iopub.status.busy": "2022-07-26T12:36:17.985815Z",
     "iopub.status.idle": "2022-07-26T12:36:17.999072Z",
     "shell.execute_reply": "2022-07-26T12:36:17.998212Z"
    },
    "papermill": {
     "duration": 0.059744,
     "end_time": "2022-07-26T12:36:18.001348",
     "exception": false,
     "start_time": "2022-07-26T12:36:17.941604",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.10, random_state=101)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "id": "862b26ae",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-26T12:36:18.087891Z",
     "iopub.status.busy": "2022-07-26T12:36:18.087229Z",
     "iopub.status.idle": "2022-07-26T12:36:18.105411Z",
     "shell.execute_reply": "2022-07-26T12:36:18.104433Z"
    },
    "papermill": {
     "duration": 0.064141,
     "end_time": "2022-07-26T12:36:18.107841",
     "exception": false,
     "start_time": "2022-07-26T12:36:18.043700",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X_train=scaler.fit_transform(X_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "id": "fad321be",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-26T12:36:18.195430Z",
     "iopub.status.busy": "2022-07-26T12:36:18.194805Z",
     "iopub.status.idle": "2022-07-26T12:36:18.201692Z",
     "shell.execute_reply": "2022-07-26T12:36:18.200868Z"
    },
    "papermill": {
     "duration": 0.052319,
     "end_time": "2022-07-26T12:36:18.203660",
     "exception": false,
     "start_time": "2022-07-26T12:36:18.151341",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X_test=scaler.transform(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "id": "1a6d480c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-26T12:36:18.289895Z",
     "iopub.status.busy": "2022-07-26T12:36:18.289218Z",
     "iopub.status.idle": "2022-07-26T12:36:18.477194Z",
     "shell.execute_reply": "2022-07-26T12:36:18.475695Z"
    },
    "papermill": {
     "duration": 0.234306,
     "end_time": "2022-07-26T12:36:18.480066",
     "exception": false,
     "start_time": "2022-07-26T12:36:18.245760",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.neighbors import KNeighborsClassifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "id": "c8c8b0d8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-26T12:36:18.568106Z",
     "iopub.status.busy": "2022-07-26T12:36:18.567695Z",
     "iopub.status.idle": "2022-07-26T12:36:18.571964Z",
     "shell.execute_reply": "2022-07-26T12:36:18.571203Z"
    },
    "papermill": {
     "duration": 0.050592,
     "end_time": "2022-07-26T12:36:18.573923",
     "exception": false,
     "start_time": "2022-07-26T12:36:18.523331",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "model_knn=KNeighborsClassifier()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "id": "f3cf80ee",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-26T12:36:18.661524Z",
     "iopub.status.busy": "2022-07-26T12:36:18.660807Z",
     "iopub.status.idle": "2022-07-26T12:36:18.665309Z",
     "shell.execute_reply": "2022-07-26T12:36:18.664531Z"
    },
    "papermill": {
     "duration": 0.050649,
     "end_time": "2022-07-26T12:36:18.667291",
     "exception": false,
     "start_time": "2022-07-26T12:36:18.616642",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "param_grid={'n_neighbors':list(range(1,10)),'metric':['euclidean','minkowski','manhattan','chebyshev']}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "id": "d4d03d4e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-26T12:36:18.754676Z",
     "iopub.status.busy": "2022-07-26T12:36:18.753964Z",
     "iopub.status.idle": "2022-07-26T12:36:18.757948Z",
     "shell.execute_reply": "2022-07-26T12:36:18.757254Z"
    },
    "papermill": {
     "duration": 0.049841,
     "end_time": "2022-07-26T12:36:18.760086",
     "exception": false,
     "start_time": "2022-07-26T12:36:18.710245",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "grid_model_knn=GridSearchCV(model_knn,param_grid=param_grid)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "id": "84eec5d7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-26T12:36:18.847104Z",
     "iopub.status.busy": "2022-07-26T12:36:18.846450Z",
     "iopub.status.idle": "2022-07-26T12:48:16.226991Z",
     "shell.execute_reply": "2022-07-26T12:48:16.225865Z"
    },
    "papermill": {
     "duration": 717.56195,
     "end_time": "2022-07-26T12:48:16.364671",
     "exception": false,
     "start_time": "2022-07-26T12:36:18.802721",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GridSearchCV(estimator=KNeighborsClassifier(),\n",
       "             param_grid={'metric': ['euclidean', 'minkowski', 'manhattan',\n",
       "                                    'chebyshev'],\n",
       "                         'n_neighbors': [1, 2, 3, 4, 5, 6, 7, 8, 9]})"
      ]
     },
     "execution_count": 98,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "grid_model_knn.fit(X_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "id": "28fc3d08",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-26T12:48:16.452856Z",
     "iopub.status.busy": "2022-07-26T12:48:16.451954Z",
     "iopub.status.idle": "2022-07-26T12:48:16.458623Z",
     "shell.execute_reply": "2022-07-26T12:48:16.457902Z"
    },
    "papermill": {
     "duration": 0.05322,
     "end_time": "2022-07-26T12:48:16.460528",
     "exception": false,
     "start_time": "2022-07-26T12:48:16.407308",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'algorithm': 'auto',\n",
       " 'leaf_size': 30,\n",
       " 'metric': 'manhattan',\n",
       " 'metric_params': None,\n",
       " 'n_jobs': None,\n",
       " 'n_neighbors': 1,\n",
       " 'p': 2,\n",
       " 'weights': 'uniform'}"
      ]
     },
     "execution_count": 99,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "grid_model_knn.best_estimator_.get_params()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "id": "026b589e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-26T12:48:16.550243Z",
     "iopub.status.busy": "2022-07-26T12:48:16.549616Z",
     "iopub.status.idle": "2022-07-26T12:48:20.449007Z",
     "shell.execute_reply": "2022-07-26T12:48:20.448128Z"
    },
    "papermill": {
     "duration": 3.946679,
     "end_time": "2022-07-26T12:48:20.451441",
     "exception": false,
     "start_time": "2022-07-26T12:48:16.504762",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "y_pred=grid_model_knn.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "id": "a74a04e9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-26T12:48:20.540901Z",
     "iopub.status.busy": "2022-07-26T12:48:20.540367Z",
     "iopub.status.idle": "2022-07-26T12:48:20.547741Z",
     "shell.execute_reply": "2022-07-26T12:48:20.546863Z"
    },
    "papermill": {
     "duration": 0.055053,
     "end_time": "2022-07-26T12:48:20.549861",
     "exception": false,
     "start_time": "2022-07-26T12:48:20.494808",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[2430,  159],\n",
       "       [ 120,  969]])"
      ]
     },
     "execution_count": 101,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "confusion_matrix(y_test,y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "id": "5c02f9a7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-26T12:48:20.637893Z",
     "iopub.status.busy": "2022-07-26T12:48:20.637539Z",
     "iopub.status.idle": "2022-07-26T12:48:24.707498Z",
     "shell.execute_reply": "2022-07-26T12:48:24.706274Z"
    },
    "papermill": {
     "duration": 4.117618,
     "end_time": "2022-07-26T12:48:24.710561",
     "exception": false,
     "start_time": "2022-07-26T12:48:20.592943",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.7/site-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function plot_confusion_matrix is deprecated; Function `plot_confusion_matrix` is deprecated in 1.0 and will be removed in 1.2. Use one of the class methods: ConfusionMatrixDisplay.from_predictions or ConfusionMatrixDisplay.from_estimator.\n",
      "  warnings.warn(msg, category=FutureWarning)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay at 0x7fa80eebfd50>"
      ]
     },
     "execution_count": 102,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_confusion_matrix(grid_model_knn,X_test,y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "id": "13fdd096",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-26T12:48:24.801360Z",
     "iopub.status.busy": "2022-07-26T12:48:24.800488Z",
     "iopub.status.idle": "2022-07-26T12:48:24.817505Z",
     "shell.execute_reply": "2022-07-26T12:48:24.816366Z"
    },
    "papermill": {
     "duration": 0.065431,
     "end_time": "2022-07-26T12:48:24.820207",
     "exception": false,
     "start_time": "2022-07-26T12:48:24.754776",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.95      0.94      0.95      2589\n",
      "           1       0.86      0.89      0.87      1089\n",
      "\n",
      "    accuracy                           0.92      3678\n",
      "   macro avg       0.91      0.91      0.91      3678\n",
      "weighted avg       0.93      0.92      0.92      3678\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(classification_report(y_test,y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "id": "aefeeb6a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-26T12:48:24.913330Z",
     "iopub.status.busy": "2022-07-26T12:48:24.912931Z",
     "iopub.status.idle": "2022-07-26T12:48:28.856058Z",
     "shell.execute_reply": "2022-07-26T12:48:28.855218Z"
    },
    "papermill": {
     "duration": 3.991875,
     "end_time": "2022-07-26T12:48:28.858242",
     "exception": false,
     "start_time": "2022-07-26T12:48:24.866367",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.7/site-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function plot_precision_recall_curve is deprecated; Function `plot_precision_recall_curve` is deprecated in 1.0 and will be removed in 1.2. Use one of the class methods: PrecisionRecallDisplay.from_predictions or PrecisionRecallDisplay.from_estimator.\n",
      "  warnings.warn(msg, category=FutureWarning)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<sklearn.metrics._plot.precision_recall_curve.PrecisionRecallDisplay at 0x7fa80f071a50>"
      ]
     },
     "execution_count": 104,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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zi/6+yLilrT+UODHwJC8YsrLwQcfzLRp02rXb775Zt566y0qKytrt+26665NPq4kjjrqKI466igGDx7MmDFjuOSSS9hjjz2oqqrarv748eO55JJLGDp0KHPnzmXixIlNOv+nPvWp2uWKigo2btxI586d2W233VixYkW9dwU9evSgT58+PP3000ybNo3nn3++3mN37Nix9rn6rVu3Mm3aNKZPn84111xT+wLWe++9R6dOnWr7CBozcuRIXn311e22X3LJJZxzzjnbbOvWrRurVq2qXa+urqZbt27b1Kk5X79+/QA466yzavsC9t1339qmpLVr17LPPvvU7rdp06baBGvWWuXZNHQUsDwiVkTER8BUYFhhhYgobMzfFYgc48nNKaecwqZNm5g8eXLttqwdiCeeeCL33XcfAC+//HJte/iaNWu2ebqlqqqKXr160blzZ/r06cODDz4IJG3bixYtAmD9+vW1v+DuvvvuBs956qmn1sa6detW1q9f32iMl19+OePGjWPDhuTH9f7772/TBDN69Gguvvhi+vbtS/fu3es9xoEHHsjy5csBmDNnDgMGDGDVqlWsXLmSP//5zwwfPrzBp6zqc//991NVVbXdp24SgORu6J577iEimDdvHrvvvvs2/QOQJIulS5eybt06AJ544onap5+GDh1a+/28++67t+nreO211xp92sqsNcizaagbsKpgvRo4um4lSeOAS4D2wCn1HUjSWGAsQM+ePZs90J0liUceeYSLL76Y66+/ni5durDrrrty3XXXFd33wgsvZMyYMRx44IEceOCBte3omzdv5tJLL2XNmjV06NCBLl261D49c++993LhhRdy9dVXs3nzZkaNGsVhhx3GxIkTGTFiBHvuuSennHIKf/rTn+o9509/+lPGjh3L7bffTkVFBZMnT97uF2PdGN9//32OPPJI2rVrR7t27fjOd75TWz5ixAgmTJjATTfd1OAxTj/9dObOncvnPvc5pkyZwle+8pVtyocPH87kyZPr/UW+s0477TRmzZrF/vvvzy677MKdd95ZWzZw4ECqqqro2rUrV155JSeeeCLt2rWjV69e3HXXXQBcdtllnHXWWdx+++306tWLBx54oHb/p556ih/+8IfNHrN9vCxdu4GRt9Z/t1tKxR5c2VGKyOePcElnAkMi4p/S9W8AR0fERQ3UPxv4QkSc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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_precision_recall_curve(grid_model_knn,X_test,y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "id": "26f6e432",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-26T12:48:28.949054Z",
     "iopub.status.busy": "2022-07-26T12:48:28.948447Z",
     "iopub.status.idle": "2022-07-26T12:48:33.022130Z",
     "shell.execute_reply": "2022-07-26T12:48:33.020976Z"
    },
    "papermill": {
     "duration": 4.121649,
     "end_time": "2022-07-26T12:48:33.024626",
     "exception": false,
     "start_time": "2022-07-26T12:48:28.902977",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.7/site-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function plot_roc_curve is deprecated; Function :func:`plot_roc_curve` is deprecated in 1.0 and will be removed in 1.2. Use one of the class methods: :meth:`sklearn.metric.RocCurveDisplay.from_predictions` or :meth:`sklearn.metric.RocCurveDisplay.from_estimator`.\n",
      "  warnings.warn(msg, category=FutureWarning)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<sklearn.metrics._plot.roc_curve.RocCurveDisplay at 0x7fa80eec8e10>"
      ]
     },
     "execution_count": 105,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_roc_curve(grid_model_knn,X_test,y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a4c29284",
   "metadata": {
    "papermill": {
     "duration": 0.044947,
     "end_time": "2022-07-26T12:48:33.115601",
     "exception": false,
     "start_time": "2022-07-26T12:48:33.070654",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "ea4d8fb9",
   "metadata": {
    "papermill": {
     "duration": 0.045009,
     "end_time": "2022-07-26T12:48:33.205932",
     "exception": false,
     "start_time": "2022-07-26T12:48:33.160923",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Conclusion: \n",
    "\n",
    "KNN with parameters,\n",
    "\n",
    "    algorithm: 'auto'\n",
    "    leaf_size: 30\n",
    "    metric: 'manhattan'\n",
    "    n_neighbors: 1\n",
    "    p: 2\n",
    "    weights: 'uniform'\n",
    "    \n",
    "is producing the best F1 Score, when compared to Logistic Regression & Support Vector Machine."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ab1fff97",
   "metadata": {
    "papermill": {
     "duration": 0.04467,
     "end_time": "2022-07-26T12:48:33.295236",
     "exception": false,
     "start_time": "2022-07-26T12:48:33.250566",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ce6bd610",
   "metadata": {
    "papermill": {
     "duration": 0.044721,
     "end_time": "2022-07-26T12:48:33.385314",
     "exception": false,
     "start_time": "2022-07-26T12:48:33.340593",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9c001b88",
   "metadata": {
    "papermill": {
     "duration": 0.045004,
     "end_time": "2022-07-26T12:48:33.475125",
     "exception": false,
     "start_time": "2022-07-26T12:48:33.430121",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "19867ca3",
   "metadata": {
    "papermill": {
     "duration": 0.04476,
     "end_time": "2022-07-26T12:48:33.564744",
     "exception": false,
     "start_time": "2022-07-26T12:48:33.519984",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Submission:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "58bdfe25",
   "metadata": {
    "papermill": {
     "duration": 0.044804,
     "end_time": "2022-07-26T12:48:33.653338",
     "exception": false,
     "start_time": "2022-07-26T12:48:33.608534",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "id": "b93310f5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-26T12:48:33.747581Z",
     "iopub.status.busy": "2022-07-26T12:48:33.746798Z",
     "iopub.status.idle": "2022-07-26T12:48:33.797879Z",
     "shell.execute_reply": "2022-07-26T12:48:33.796970Z"
    },
    "papermill": {
     "duration": 0.101796,
     "end_time": "2022-07-26T12:48:33.800348",
     "exception": false,
     "start_time": "2022-07-26T12:48:33.698552",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df_master_test=pd.read_csv('../input/railofy-challenge/Railofy_testing_data_for_model.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "id": "bd902895",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-26T12:48:33.894281Z",
     "iopub.status.busy": "2022-07-26T12:48:33.893585Z",
     "iopub.status.idle": "2022-07-26T12:48:33.916539Z",
     "shell.execute_reply": "2022-07-26T12:48:33.915814Z"
    },
    "papermill": {
     "duration": 0.072181,
     "end_time": "2022-07-26T12:48:33.918482",
     "exception": false,
     "start_time": "2022-07-26T12:48:33.846301",
     "status": "completed"
    },
    "scrolled": true,
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>pk</th>\n",
       "      <th>QT</th>\n",
       "      <th>GRCA</th>\n",
       "      <th>CCA</th>\n",
       "      <th>JD</th>\n",
       "      <th>ODD</th>\n",
       "      <th>JS</th>\n",
       "      <th>ODS</th>\n",
       "      <th>SL</th>\n",
       "      <th>NDTD</th>\n",
       "      <th>...</th>\n",
       "      <th>SCRA</th>\n",
       "      <th>GRA</th>\n",
       "      <th>CURA</th>\n",
       "      <th>RPW</th>\n",
       "      <th>CUCA</th>\n",
       "      <th>CAR</th>\n",
       "      <th>BKT_2</th>\n",
       "      <th>CL_1</th>\n",
       "      <th>CL_2</th>\n",
       "      <th>CL_3</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>8831606085</td>\n",
       "      <td>GN</td>\n",
       "      <td>0.065517</td>\n",
       "      <td>0.041589</td>\n",
       "      <td>1.614476</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.773582</td>\n",
       "      <td>0.975610</td>\n",
       "      <td>1</td>\n",
       "      <td>0.008326</td>\n",
       "      <td>...</td>\n",
       "      <td>0.058562</td>\n",
       "      <td>0.705277</td>\n",
       "      <td>1.457012</td>\n",
       "      <td>0.280196</td>\n",
       "      <td>1.335478</td>\n",
       "      <td>1.692308</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>8831561565</td>\n",
       "      <td>GN</td>\n",
       "      <td>2.710786</td>\n",
       "      <td>1.658815</td>\n",
       "      <td>0.927683</td>\n",
       "      <td>0.836028</td>\n",
       "      <td>0.665093</td>\n",
       "      <td>0.681818</td>\n",
       "      <td>1</td>\n",
       "      <td>0.013590</td>\n",
       "      <td>...</td>\n",
       "      <td>0.119819</td>\n",
       "      <td>-0.323278</td>\n",
       "      <td>-0.195543</td>\n",
       "      <td>0.276128</td>\n",
       "      <td>-0.537617</td>\n",
       "      <td>1.629686</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>8831539811</td>\n",
       "      <td>GN</td>\n",
       "      <td>3.365960</td>\n",
       "      <td>1.514607</td>\n",
       "      <td>1.546139</td>\n",
       "      <td>0.961232</td>\n",
       "      <td>1.418866</td>\n",
       "      <td>0.888889</td>\n",
       "      <td>1</td>\n",
       "      <td>0.008322</td>\n",
       "      <td>...</td>\n",
       "      <td>0.200964</td>\n",
       "      <td>0.305956</td>\n",
       "      <td>0.328951</td>\n",
       "      <td>0.276128</td>\n",
       "      <td>-0.093347</td>\n",
       "      <td>1.116554</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>8831313791</td>\n",
       "      <td>GN</td>\n",
       "      <td>2.342250</td>\n",
       "      <td>1.277346</td>\n",
       "      <td>0.990041</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.842451</td>\n",
       "      <td>0.950000</td>\n",
       "      <td>1</td>\n",
       "      <td>0.007728</td>\n",
       "      <td>...</td>\n",
       "      <td>1.082519</td>\n",
       "      <td>0.446952</td>\n",
       "      <td>0.494185</td>\n",
       "      <td>0.271758</td>\n",
       "      <td>0.069792</td>\n",
       "      <td>1.442885</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>8831070109</td>\n",
       "      <td>GN</td>\n",
       "      <td>0.139225</td>\n",
       "      <td>0.054502</td>\n",
       "      <td>1.575182</td>\n",
       "      <td>0.817376</td>\n",
       "      <td>2.571694</td>\n",
       "      <td>0.773333</td>\n",
       "      <td>1</td>\n",
       "      <td>0.024999</td>\n",
       "      <td>...</td>\n",
       "      <td>1.975081</td>\n",
       "      <td>3.847262</td>\n",
       "      <td>3.497138</td>\n",
       "      <td>0.267730</td>\n",
       "      <td>1.296174</td>\n",
       "      <td>1.372434</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 24 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           pk  QT      GRCA       CCA        JD       ODD        JS       ODS  \\\n",
       "0  8831606085  GN  0.065517  0.041589  1.614476  1.000000  1.773582  0.975610   \n",
       "1  8831561565  GN  2.710786  1.658815  0.927683  0.836028  0.665093  0.681818   \n",
       "2  8831539811  GN  3.365960  1.514607  1.546139  0.961232  1.418866  0.888889   \n",
       "3  8831313791  GN  2.342250  1.277346  0.990041  1.000000  0.842451  0.950000   \n",
       "4  8831070109  GN  0.139225  0.054502  1.575182  0.817376  2.571694  0.773333   \n",
       "\n",
       "   SL      NDTD  ...      SCRA       GRA      CURA       RPW      CUCA  \\\n",
       "0   1  0.008326  ...  0.058562  0.705277  1.457012  0.280196  1.335478   \n",
       "1   1  0.013590  ...  0.119819 -0.323278 -0.195543  0.276128 -0.537617   \n",
       "2   1  0.008322  ...  0.200964  0.305956  0.328951  0.276128 -0.093347   \n",
       "3   1  0.007728  ...  1.082519  0.446952  0.494185  0.271758  0.069792   \n",
       "4   1  0.024999  ...  1.975081  3.847262  3.497138  0.267730  1.296174   \n",
       "\n",
       "        CAR  BKT_2  CL_1  CL_2  CL_3  \n",
       "0  1.692308      0     0     0     1  \n",
       "1  1.629686      0     1     0     0  \n",
       "2  1.116554      0     1     0     0  \n",
       "3  1.442885      0     1     0     0  \n",
       "4  1.372434      0     0     1     0  \n",
       "\n",
       "[5 rows x 24 columns]"
      ]
     },
     "execution_count": 107,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_master_test.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "id": "c530de31",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-26T12:48:34.013228Z",
     "iopub.status.busy": "2022-07-26T12:48:34.012547Z",
     "iopub.status.idle": "2022-07-26T12:48:34.017058Z",
     "shell.execute_reply": "2022-07-26T12:48:34.016305Z"
    },
    "papermill": {
     "duration": 0.054281,
     "end_time": "2022-07-26T12:48:34.019106",
     "exception": false,
     "start_time": "2022-07-26T12:48:33.964825",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df_test=copy.copy(df_master_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "id": "75ec1b61",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-26T12:48:34.112580Z",
     "iopub.status.busy": "2022-07-26T12:48:34.112170Z",
     "iopub.status.idle": "2022-07-26T12:48:34.138607Z",
     "shell.execute_reply": "2022-07-26T12:48:34.137299Z"
    },
    "papermill": {
     "duration": 0.07535,
     "end_time": "2022-07-26T12:48:34.140659",
     "exception": false,
     "start_time": "2022-07-26T12:48:34.065309",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>pk</th>\n",
       "      <th>QT</th>\n",
       "      <th>GRCA</th>\n",
       "      <th>CCA</th>\n",
       "      <th>JD</th>\n",
       "      <th>ODD</th>\n",
       "      <th>JS</th>\n",
       "      <th>ODS</th>\n",
       "      <th>SL</th>\n",
       "      <th>NDTD</th>\n",
       "      <th>...</th>\n",
       "      <th>SCRA</th>\n",
       "      <th>GRA</th>\n",
       "      <th>CURA</th>\n",
       "      <th>RPW</th>\n",
       "      <th>CUCA</th>\n",
       "      <th>CAR</th>\n",
       "      <th>BKT_2</th>\n",
       "      <th>CL_1</th>\n",
       "      <th>CL_2</th>\n",
       "      <th>CL_3</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>8831606085</td>\n",
       "      <td>GN</td>\n",
       "      <td>0.065517</td>\n",
       "      <td>0.041589</td>\n",
       "      <td>1.614476</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.773582</td>\n",
       "      <td>0.975610</td>\n",
       "      <td>1</td>\n",
       "      <td>0.008326</td>\n",
       "      <td>...</td>\n",
       "      <td>0.058562</td>\n",
       "      <td>0.705277</td>\n",
       "      <td>1.457012</td>\n",
       "      <td>0.280196</td>\n",
       "      <td>1.335478</td>\n",
       "      <td>1.692308</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>8831561565</td>\n",
       "      <td>GN</td>\n",
       "      <td>2.710786</td>\n",
       "      <td>1.658815</td>\n",
       "      <td>0.927683</td>\n",
       "      <td>0.836028</td>\n",
       "      <td>0.665093</td>\n",
       "      <td>0.681818</td>\n",
       "      <td>1</td>\n",
       "      <td>0.013590</td>\n",
       "      <td>...</td>\n",
       "      <td>0.119819</td>\n",
       "      <td>-0.323278</td>\n",
       "      <td>-0.195543</td>\n",
       "      <td>0.276128</td>\n",
       "      <td>-0.537617</td>\n",
       "      <td>1.629686</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>8831539811</td>\n",
       "      <td>GN</td>\n",
       "      <td>3.365960</td>\n",
       "      <td>1.514607</td>\n",
       "      <td>1.546139</td>\n",
       "      <td>0.961232</td>\n",
       "      <td>1.418866</td>\n",
       "      <td>0.888889</td>\n",
       "      <td>1</td>\n",
       "      <td>0.008322</td>\n",
       "      <td>...</td>\n",
       "      <td>0.200964</td>\n",
       "      <td>0.305956</td>\n",
       "      <td>0.328951</td>\n",
       "      <td>0.276128</td>\n",
       "      <td>-0.093347</td>\n",
       "      <td>1.116554</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>8831313791</td>\n",
       "      <td>GN</td>\n",
       "      <td>2.342250</td>\n",
       "      <td>1.277346</td>\n",
       "      <td>0.990041</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.842451</td>\n",
       "      <td>0.950000</td>\n",
       "      <td>1</td>\n",
       "      <td>0.007728</td>\n",
       "      <td>...</td>\n",
       "      <td>1.082519</td>\n",
       "      <td>0.446952</td>\n",
       "      <td>0.494185</td>\n",
       "      <td>0.271758</td>\n",
       "      <td>0.069792</td>\n",
       "      <td>1.442885</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>8831070109</td>\n",
       "      <td>GN</td>\n",
       "      <td>0.139225</td>\n",
       "      <td>0.054502</td>\n",
       "      <td>1.575182</td>\n",
       "      <td>0.817376</td>\n",
       "      <td>2.571694</td>\n",
       "      <td>0.773333</td>\n",
       "      <td>1</td>\n",
       "      <td>0.024999</td>\n",
       "      <td>...</td>\n",
       "      <td>1.975081</td>\n",
       "      <td>3.847262</td>\n",
       "      <td>3.497138</td>\n",
       "      <td>0.267730</td>\n",
       "      <td>1.296174</td>\n",
       "      <td>1.372434</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 24 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           pk  QT      GRCA       CCA        JD       ODD        JS       ODS  \\\n",
       "0  8831606085  GN  0.065517  0.041589  1.614476  1.000000  1.773582  0.975610   \n",
       "1  8831561565  GN  2.710786  1.658815  0.927683  0.836028  0.665093  0.681818   \n",
       "2  8831539811  GN  3.365960  1.514607  1.546139  0.961232  1.418866  0.888889   \n",
       "3  8831313791  GN  2.342250  1.277346  0.990041  1.000000  0.842451  0.950000   \n",
       "4  8831070109  GN  0.139225  0.054502  1.575182  0.817376  2.571694  0.773333   \n",
       "\n",
       "   SL      NDTD  ...      SCRA       GRA      CURA       RPW      CUCA  \\\n",
       "0   1  0.008326  ...  0.058562  0.705277  1.457012  0.280196  1.335478   \n",
       "1   1  0.013590  ...  0.119819 -0.323278 -0.195543  0.276128 -0.537617   \n",
       "2   1  0.008322  ...  0.200964  0.305956  0.328951  0.276128 -0.093347   \n",
       "3   1  0.007728  ...  1.082519  0.446952  0.494185  0.271758  0.069792   \n",
       "4   1  0.024999  ...  1.975081  3.847262  3.497138  0.267730  1.296174   \n",
       "\n",
       "        CAR  BKT_2  CL_1  CL_2  CL_3  \n",
       "0  1.692308      0     0     0     1  \n",
       "1  1.629686      0     1     0     0  \n",
       "2  1.116554      0     1     0     0  \n",
       "3  1.442885      0     1     0     0  \n",
       "4  1.372434      0     0     1     0  \n",
       "\n",
       "[5 rows x 24 columns]"
      ]
     },
     "execution_count": 109,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_test.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "id": "fc0229ae",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-26T12:48:34.234260Z",
     "iopub.status.busy": "2022-07-26T12:48:34.233649Z",
     "iopub.status.idle": "2022-07-26T12:48:34.240379Z",
     "shell.execute_reply": "2022-07-26T12:48:34.239377Z"
    },
    "papermill": {
     "duration": 0.056001,
     "end_time": "2022-07-26T12:48:34.242502",
     "exception": false,
     "start_time": "2022-07-26T12:48:34.186501",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "features=df_test.drop('pk',axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "id": "4e447b55",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-26T12:48:34.336459Z",
     "iopub.status.busy": "2022-07-26T12:48:34.336102Z",
     "iopub.status.idle": "2022-07-26T12:48:34.359744Z",
     "shell.execute_reply": "2022-07-26T12:48:34.358789Z"
    },
    "papermill": {
     "duration": 0.07321,
     "end_time": "2022-07-26T12:48:34.361685",
     "exception": false,
     "start_time": "2022-07-26T12:48:34.288475",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>QT</th>\n",
       "      <th>GRCA</th>\n",
       "      <th>CCA</th>\n",
       "      <th>JD</th>\n",
       "      <th>ODD</th>\n",
       "      <th>JS</th>\n",
       "      <th>ODS</th>\n",
       "      <th>SL</th>\n",
       "      <th>NDTD</th>\n",
       "      <th>CURP</th>\n",
       "      <th>...</th>\n",
       "      <th>SCRA</th>\n",
       "      <th>GRA</th>\n",
       "      <th>CURA</th>\n",
       "      <th>RPW</th>\n",
       "      <th>CUCA</th>\n",
       "      <th>CAR</th>\n",
       "      <th>BKT_2</th>\n",
       "      <th>CL_1</th>\n",
       "      <th>CL_2</th>\n",
       "      <th>CL_3</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>GN</td>\n",
       "      <td>0.065517</td>\n",
       "      <td>0.041589</td>\n",
       "      <td>1.614476</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.773582</td>\n",
       "      <td>0.975610</td>\n",
       "      <td>1</td>\n",
       "      <td>0.008326</td>\n",
       "      <td>0.375000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.058562</td>\n",
       "      <td>0.705277</td>\n",
       "      <td>1.457012</td>\n",
       "      <td>0.280196</td>\n",
       "      <td>1.335478</td>\n",
       "      <td>1.692308</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>GN</td>\n",
       "      <td>2.710786</td>\n",
       "      <td>1.658815</td>\n",
       "      <td>0.927683</td>\n",
       "      <td>0.836028</td>\n",
       "      <td>0.665093</td>\n",
       "      <td>0.681818</td>\n",
       "      <td>1</td>\n",
       "      <td>0.013590</td>\n",
       "      <td>0.299094</td>\n",
       "      <td>...</td>\n",
       "      <td>0.119819</td>\n",
       "      <td>-0.323278</td>\n",
       "      <td>-0.195543</td>\n",
       "      <td>0.276128</td>\n",
       "      <td>-0.537617</td>\n",
       "      <td>1.629686</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>GN</td>\n",
       "      <td>3.365960</td>\n",
       "      <td>1.514607</td>\n",
       "      <td>1.546139</td>\n",
       "      <td>0.961232</td>\n",
       "      <td>1.418866</td>\n",
       "      <td>0.888889</td>\n",
       "      <td>1</td>\n",
       "      <td>0.008322</td>\n",
       "      <td>0.493917</td>\n",
       "      <td>...</td>\n",
       "      <td>0.200964</td>\n",
       "      <td>0.305956</td>\n",
       "      <td>0.328951</td>\n",
       "      <td>0.276128</td>\n",
       "      <td>-0.093347</td>\n",
       "      <td>1.116554</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>GN</td>\n",
       "      <td>2.342250</td>\n",
       "      <td>1.277346</td>\n",
       "      <td>0.990041</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.842451</td>\n",
       "      <td>0.950000</td>\n",
       "      <td>1</td>\n",
       "      <td>0.007728</td>\n",
       "      <td>0.440559</td>\n",
       "      <td>...</td>\n",
       "      <td>1.082519</td>\n",
       "      <td>0.446952</td>\n",
       "      <td>0.494185</td>\n",
       "      <td>0.271758</td>\n",
       "      <td>0.069792</td>\n",
       "      <td>1.442885</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>GN</td>\n",
       "      <td>0.139225</td>\n",
       "      <td>0.054502</td>\n",
       "      <td>1.575182</td>\n",
       "      <td>0.817376</td>\n",
       "      <td>2.571694</td>\n",
       "      <td>0.773333</td>\n",
       "      <td>1</td>\n",
       "      <td>0.024999</td>\n",
       "      <td>0.411765</td>\n",
       "      <td>...</td>\n",
       "      <td>1.975081</td>\n",
       "      <td>3.847262</td>\n",
       "      <td>3.497138</td>\n",
       "      <td>0.267730</td>\n",
       "      <td>1.296174</td>\n",
       "      <td>1.372434</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 23 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   QT      GRCA       CCA        JD       ODD        JS       ODS  SL  \\\n",
       "0  GN  0.065517  0.041589  1.614476  1.000000  1.773582  0.975610   1   \n",
       "1  GN  2.710786  1.658815  0.927683  0.836028  0.665093  0.681818   1   \n",
       "2  GN  3.365960  1.514607  1.546139  0.961232  1.418866  0.888889   1   \n",
       "3  GN  2.342250  1.277346  0.990041  1.000000  0.842451  0.950000   1   \n",
       "4  GN  0.139225  0.054502  1.575182  0.817376  2.571694  0.773333   1   \n",
       "\n",
       "       NDTD      CURP  ...      SCRA       GRA      CURA       RPW      CUCA  \\\n",
       "0  0.008326  0.375000  ...  0.058562  0.705277  1.457012  0.280196  1.335478   \n",
       "1  0.013590  0.299094  ...  0.119819 -0.323278 -0.195543  0.276128 -0.537617   \n",
       "2  0.008322  0.493917  ...  0.200964  0.305956  0.328951  0.276128 -0.093347   \n",
       "3  0.007728  0.440559  ...  1.082519  0.446952  0.494185  0.271758  0.069792   \n",
       "4  0.024999  0.411765  ...  1.975081  3.847262  3.497138  0.267730  1.296174   \n",
       "\n",
       "        CAR  BKT_2  CL_1  CL_2  CL_3  \n",
       "0  1.692308      0     0     0     1  \n",
       "1  1.629686      0     1     0     0  \n",
       "2  1.116554      0     1     0     0  \n",
       "3  1.442885      0     1     0     0  \n",
       "4  1.372434      0     0     1     0  \n",
       "\n",
       "[5 rows x 23 columns]"
      ]
     },
     "execution_count": 111,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "features.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "id": "b5279675",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-26T12:48:34.456372Z",
     "iopub.status.busy": "2022-07-26T12:48:34.455673Z",
     "iopub.status.idle": "2022-07-26T12:48:34.464889Z",
     "shell.execute_reply": "2022-07-26T12:48:34.464199Z"
    },
    "papermill": {
     "duration": 0.058609,
     "end_time": "2022-07-26T12:48:34.467028",
     "exception": false,
     "start_time": "2022-07-26T12:48:34.408419",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "features=pd.get_dummies(features,drop_first=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "id": "3f6419c7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-26T12:48:34.561819Z",
     "iopub.status.busy": "2022-07-26T12:48:34.561169Z",
     "iopub.status.idle": "2022-07-26T12:48:34.582111Z",
     "shell.execute_reply": "2022-07-26T12:48:34.581411Z"
    },
    "papermill": {
     "duration": 0.070452,
     "end_time": "2022-07-26T12:48:34.584048",
     "exception": false,
     "start_time": "2022-07-26T12:48:34.513596",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>GRCA</th>\n",
       "      <th>CCA</th>\n",
       "      <th>JD</th>\n",
       "      <th>ODD</th>\n",
       "      <th>JS</th>\n",
       "      <th>ODS</th>\n",
       "      <th>SL</th>\n",
       "      <th>NDTD</th>\n",
       "      <th>CURP</th>\n",
       "      <th>GROP</th>\n",
       "      <th>...</th>\n",
       "      <th>CURA</th>\n",
       "      <th>RPW</th>\n",
       "      <th>CUCA</th>\n",
       "      <th>CAR</th>\n",
       "      <th>BKT_2</th>\n",
       "      <th>CL_1</th>\n",
       "      <th>CL_2</th>\n",
       "      <th>CL_3</th>\n",
       "      <th>QT_PQ</th>\n",
       "      <th>QT_RL</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.065517</td>\n",
       "      <td>0.041589</td>\n",
       "      <td>1.614476</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.773582</td>\n",
       "      <td>0.975610</td>\n",
       "      <td>1</td>\n",
       "      <td>0.008326</td>\n",
       "      <td>0.375000</td>\n",
       "      <td>0.625000</td>\n",
       "      <td>...</td>\n",
       "      <td>1.457012</td>\n",
       "      <td>0.280196</td>\n",
       "      <td>1.335478</td>\n",
       "      <td>1.692308</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2.710786</td>\n",
       "      <td>1.658815</td>\n",
       "      <td>0.927683</td>\n",
       "      <td>0.836028</td>\n",
       "      <td>0.665093</td>\n",
       "      <td>0.681818</td>\n",
       "      <td>1</td>\n",
       "      <td>0.013590</td>\n",
       "      <td>0.299094</td>\n",
       "      <td>0.368580</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.195543</td>\n",
       "      <td>0.276128</td>\n",
       "      <td>-0.537617</td>\n",
       "      <td>1.629686</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3.365960</td>\n",
       "      <td>1.514607</td>\n",
       "      <td>1.546139</td>\n",
       "      <td>0.961232</td>\n",
       "      <td>1.418866</td>\n",
       "      <td>0.888889</td>\n",
       "      <td>1</td>\n",
       "      <td>0.008322</td>\n",
       "      <td>0.493917</td>\n",
       "      <td>0.688564</td>\n",
       "      <td>...</td>\n",
       "      <td>0.328951</td>\n",
       "      <td>0.276128</td>\n",
       "      <td>-0.093347</td>\n",
       "      <td>1.116554</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2.342250</td>\n",
       "      <td>1.277346</td>\n",
       "      <td>0.990041</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.842451</td>\n",
       "      <td>0.950000</td>\n",
       "      <td>1</td>\n",
       "      <td>0.007728</td>\n",
       "      <td>0.440559</td>\n",
       "      <td>0.695804</td>\n",
       "      <td>...</td>\n",
       "      <td>0.494185</td>\n",
       "      <td>0.271758</td>\n",
       "      <td>0.069792</td>\n",
       "      <td>1.442885</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.139225</td>\n",
       "      <td>0.054502</td>\n",
       "      <td>1.575182</td>\n",
       "      <td>0.817376</td>\n",
       "      <td>2.571694</td>\n",
       "      <td>0.773333</td>\n",
       "      <td>1</td>\n",
       "      <td>0.024999</td>\n",
       "      <td>0.411765</td>\n",
       "      <td>1.176471</td>\n",
       "      <td>...</td>\n",
       "      <td>3.497138</td>\n",
       "      <td>0.267730</td>\n",
       "      <td>1.296174</td>\n",
       "      <td>1.372434</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 24 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       GRCA       CCA        JD       ODD        JS       ODS  SL      NDTD  \\\n",
       "0  0.065517  0.041589  1.614476  1.000000  1.773582  0.975610   1  0.008326   \n",
       "1  2.710786  1.658815  0.927683  0.836028  0.665093  0.681818   1  0.013590   \n",
       "2  3.365960  1.514607  1.546139  0.961232  1.418866  0.888889   1  0.008322   \n",
       "3  2.342250  1.277346  0.990041  1.000000  0.842451  0.950000   1  0.007728   \n",
       "4  0.139225  0.054502  1.575182  0.817376  2.571694  0.773333   1  0.024999   \n",
       "\n",
       "       CURP      GROP  ...      CURA       RPW      CUCA       CAR  BKT_2  \\\n",
       "0  0.375000  0.625000  ...  1.457012  0.280196  1.335478  1.692308      0   \n",
       "1  0.299094  0.368580  ... -0.195543  0.276128 -0.537617  1.629686      0   \n",
       "2  0.493917  0.688564  ...  0.328951  0.276128 -0.093347  1.116554      0   \n",
       "3  0.440559  0.695804  ...  0.494185  0.271758  0.069792  1.442885      0   \n",
       "4  0.411765  1.176471  ...  3.497138  0.267730  1.296174  1.372434      0   \n",
       "\n",
       "   CL_1  CL_2  CL_3  QT_PQ  QT_RL  \n",
       "0     0     0     1      0      0  \n",
       "1     1     0     0      0      0  \n",
       "2     1     0     0      0      0  \n",
       "3     1     0     0      0      0  \n",
       "4     0     1     0      0      0  \n",
       "\n",
       "[5 rows x 24 columns]"
      ]
     },
     "execution_count": 113,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "features.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "id": "431cfa41",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-26T12:48:34.678238Z",
     "iopub.status.busy": "2022-07-26T12:48:34.677556Z",
     "iopub.status.idle": "2022-07-26T12:48:34.688276Z",
     "shell.execute_reply": "2022-07-26T12:48:34.687278Z"
    },
    "papermill": {
     "duration": 0.05987,
     "end_time": "2022-07-26T12:48:34.690528",
     "exception": false,
     "start_time": "2022-07-26T12:48:34.630658",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.7/site-packages/sklearn/base.py:493: FutureWarning: The feature names should match those that were passed during fit. Starting version 1.2, an error will be raised.\n",
      "Feature names must be in the same order as they were in fit.\n",
      "\n",
      "  warnings.warn(message, FutureWarning)\n"
     ]
    }
   ],
   "source": [
    "scaled_features=scaler.transform(features)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "id": "8bde6d2e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-26T12:48:34.799699Z",
     "iopub.status.busy": "2022-07-26T12:48:34.798013Z",
     "iopub.status.idle": "2022-07-26T12:48:38.859111Z",
     "shell.execute_reply": "2022-07-26T12:48:38.858229Z"
    },
    "papermill": {
     "duration": 4.120706,
     "end_time": "2022-07-26T12:48:38.861592",
     "exception": false,
     "start_time": "2022-07-26T12:48:34.740886",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "final_test_result=grid_model_knn.predict(scaled_features)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "id": "fefc02df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-26T12:48:38.966588Z",
     "iopub.status.busy": "2022-07-26T12:48:38.965754Z",
     "iopub.status.idle": "2022-07-26T12:48:38.970864Z",
     "shell.execute_reply": "2022-07-26T12:48:38.970192Z"
    },
    "papermill": {
     "duration": 0.061182,
     "end_time": "2022-07-26T12:48:38.972873",
     "exception": false,
     "start_time": "2022-07-26T12:48:38.911691",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "output = pd.DataFrame({'pk': df_test.pk, 'target': final_test_result})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "id": "b510638f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-26T12:48:39.071613Z",
     "iopub.status.busy": "2022-07-26T12:48:39.071244Z",
     "iopub.status.idle": "2022-07-26T12:48:39.083040Z",
     "shell.execute_reply": "2022-07-26T12:48:39.081945Z"
    },
    "papermill": {
     "duration": 0.063837,
     "end_time": "2022-07-26T12:48:39.085393",
     "exception": false,
     "start_time": "2022-07-26T12:48:39.021556",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>pk</th>\n",
       "      <th>target</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>8831606085</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>8831561565</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>8831539811</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>8831313791</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>8831070109</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3842</th>\n",
       "      <td>2139056922</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3843</th>\n",
       "      <td>2138303681</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3844</th>\n",
       "      <td>2138033785</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3845</th>\n",
       "      <td>2137893302</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3846</th>\n",
       "      <td>2137633112</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>3847 rows Ã— 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "              pk  target\n",
       "0     8831606085       0\n",
       "1     8831561565       0\n",
       "2     8831539811       0\n",
       "3     8831313791       0\n",
       "4     8831070109       0\n",
       "...          ...     ...\n",
       "3842  2139056922       0\n",
       "3843  2138303681       0\n",
       "3844  2138033785       0\n",
       "3845  2137893302       0\n",
       "3846  2137633112       1\n",
       "\n",
       "[3847 rows x 2 columns]"
      ]
     },
     "execution_count": 117,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "output"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "id": "e29fc749",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-26T12:48:39.184108Z",
     "iopub.status.busy": "2022-07-26T12:48:39.183371Z",
     "iopub.status.idle": "2022-07-26T12:48:39.188060Z",
     "shell.execute_reply": "2022-07-26T12:48:39.187343Z"
    },
    "papermill": {
     "duration": 0.057084,
     "end_time": "2022-07-26T12:48:39.190548",
     "exception": false,
     "start_time": "2022-07-26T12:48:39.133464",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#output.to_csv('Submission_Railofy.csv', index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "64631588",
   "metadata": {
    "papermill": {
     "duration": 0.047785,
     "end_time": "2022-07-26T12:48:39.286079",
     "exception": false,
     "start_time": "2022-07-26T12:48:39.238294",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.12"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 6230.710742,
   "end_time": "2022-07-26T12:48:40.167711",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2022-07-26T11:04:49.456969",
   "version": "2.3.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
